/**********************************************************************************************************************
 * Copyright (C) 2005-2022 SplendidCRM Software, Inc. 
 * MIT License
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation 
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, 
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
 * is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR 
 * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *********************************************************************************************************************/
using System;
using System.Data;
using System.Data.Common;
//using Microsoft.VisualBasic;
using System.Xml;

namespace SplendidCRM
{
	/// <summary>
	/// SqlProcs generated from database [SplendidCRM_SplendidApp] on 12/28/2021 1:52:56 AM.
	/// </summary>
	public partial class SqlProcs
	{
		private DbProviderFactories  DbProviderFactories = new DbProviderFactories();
		private HttpApplicationState Application = new HttpApplicationState();
		private Security             Security           ;
		private Sql                  Sql                ;

		public SqlProcs(Security Security, Sql Sql)
		{
			this.Security            = Security           ;
			this.Sql                 = Sql                ;
		}

		private static void Trace(IDbCommand cmd)
		{
			System.Diagnostics.Debug.WriteLine("SqlProcs.Trace:	exec dbo." + Sql.ExpandParameters(cmd) + ";");
		}

		#region spACL_ACTIONS_Delete
		/// <summary>
		/// spACL_ACTIONS_Delete
		/// </summary>
		public void spACL_ACTIONS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ACTIONS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ACTIONS_Delete
		/// <summary>
		/// spACL_ACTIONS_Delete
		/// </summary>
		public void spACL_ACTIONS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ACTIONS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ACTIONS_Delete
		/// <summary>
		/// spACL_ACTIONS_Delete
		/// </summary>
		public IDbCommand cmdACL_ACTIONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ACTIONS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ACTIONS_Initialize
		/// <summary>
		/// spACL_ACTIONS_Initialize
		/// </summary>
		public void spACL_ACTIONS_Initialize()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ACTIONS_Initialize";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ACTIONS_Initialize
		/// <summary>
		/// spACL_ACTIONS_Initialize
		/// </summary>
		public void spACL_ACTIONS_Initialize(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ACTIONS_Initialize";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ACTIONS_Initialize
		/// <summary>
		/// spACL_ACTIONS_Initialize
		/// </summary>
		public IDbCommand cmdACL_ACTIONS_Initialize(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ACTIONS_Initialize";
			return cmd;
		}
		#endregion

		#region spACL_ACTIONS_InsertOnly
		/// <summary>
		/// spACL_ACTIONS_InsertOnly
		/// </summary>
		public void spACL_ACTIONS_InsertOnly(string sNAME, string sCATEGORY, string sACLTYPE, Int32 nACLACCESS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ACTIONS_InsertOnly";
							IDbDataParameter parNAME      = Sql.AddParameter(cmd, "@NAME"     , sNAME       , 150);
							IDbDataParameter parCATEGORY  = Sql.AddParameter(cmd, "@CATEGORY" , sCATEGORY   , 100);
							IDbDataParameter parACLTYPE   = Sql.AddParameter(cmd, "@ACLTYPE"  , sACLTYPE    , 100);
							IDbDataParameter parACLACCESS = Sql.AddParameter(cmd, "@ACLACCESS", nACLACCESS  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ACTIONS_InsertOnly
		/// <summary>
		/// spACL_ACTIONS_InsertOnly
		/// </summary>
		public void spACL_ACTIONS_InsertOnly(string sNAME, string sCATEGORY, string sACLTYPE, Int32 nACLACCESS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ACTIONS_InsertOnly";
				IDbDataParameter parNAME      = Sql.AddParameter(cmd, "@NAME"     , sNAME       , 150);
				IDbDataParameter parCATEGORY  = Sql.AddParameter(cmd, "@CATEGORY" , sCATEGORY   , 100);
				IDbDataParameter parACLTYPE   = Sql.AddParameter(cmd, "@ACLTYPE"  , sACLTYPE    , 100);
				IDbDataParameter parACLACCESS = Sql.AddParameter(cmd, "@ACLACCESS", nACLACCESS  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ACTIONS_InsertOnly
		/// <summary>
		/// spACL_ACTIONS_InsertOnly
		/// </summary>
		public IDbCommand cmdACL_ACTIONS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ACTIONS_InsertOnly";
			IDbDataParameter parNAME      = Sql.CreateParameter(cmd, "@NAME"     , "string", 150);
			IDbDataParameter parCATEGORY  = Sql.CreateParameter(cmd, "@CATEGORY" , "string", 100);
			IDbDataParameter parACLTYPE   = Sql.CreateParameter(cmd, "@ACLTYPE"  , "string", 100);
			IDbDataParameter parACLACCESS = Sql.CreateParameter(cmd, "@ACLACCESS", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spACL_ACTIONS_Update
		/// <summary>
		/// spACL_ACTIONS_Update
		/// </summary>
		public void spACL_ACTIONS_Update(ref Guid gID, string sNAME, string sCATEGORY, string sACLTYPE, Int32 nACLACCESS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ACTIONS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 100);
							IDbDataParameter parACLTYPE          = Sql.AddParameter(cmd, "@ACLTYPE"         , sACLTYPE           , 100);
							IDbDataParameter parACLACCESS        = Sql.AddParameter(cmd, "@ACLACCESS"       , nACLACCESS         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ACTIONS_Update
		/// <summary>
		/// spACL_ACTIONS_Update
		/// </summary>
		public void spACL_ACTIONS_Update(ref Guid gID, string sNAME, string sCATEGORY, string sACLTYPE, Int32 nACLACCESS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ACTIONS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 100);
				IDbDataParameter parACLTYPE          = Sql.AddParameter(cmd, "@ACLTYPE"         , sACLTYPE           , 100);
				IDbDataParameter parACLACCESS        = Sql.AddParameter(cmd, "@ACLACCESS"       , nACLACCESS         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACL_ACTIONS_Update
		/// <summary>
		/// spACL_ACTIONS_Update
		/// </summary>
		public IDbCommand cmdACL_ACTIONS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ACTIONS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 100);
			IDbDataParameter parACLTYPE          = Sql.CreateParameter(cmd, "@ACLTYPE"         , "string", 100);
			IDbDataParameter parACLACCESS        = Sql.CreateParameter(cmd, "@ACLACCESS"       , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACL_FIELDS_Update
		/// <summary>
		/// spACL_FIELDS_Update
		/// </summary>
		public void spACL_FIELDS_Update(ref Guid gID, Guid gROLE_ID, string sNAME, string sCATEGORY, Int32 nACLACCESS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_FIELDS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 100);
							IDbDataParameter parACLACCESS        = Sql.AddParameter(cmd, "@ACLACCESS"       , nACLACCESS         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_FIELDS_Update
		/// <summary>
		/// spACL_FIELDS_Update
		/// </summary>
		public void spACL_FIELDS_Update(ref Guid gID, Guid gROLE_ID, string sNAME, string sCATEGORY, Int32 nACLACCESS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_FIELDS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 100);
				IDbDataParameter parACLACCESS        = Sql.AddParameter(cmd, "@ACLACCESS"       , nACLACCESS         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACL_FIELDS_Update
		/// <summary>
		/// spACL_FIELDS_Update
		/// </summary>
		public IDbCommand cmdACL_FIELDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_FIELDS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 100);
			IDbDataParameter parACLACCESS        = Sql.CreateParameter(cmd, "@ACLACCESS"       , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACL_ROLES_ACTIONS_Delete
		/// <summary>
		/// spACL_ROLES_ACTIONS_Delete
		/// </summary>
		public void spACL_ROLES_ACTIONS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_ACTIONS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_ACTIONS_Delete
		/// <summary>
		/// spACL_ROLES_ACTIONS_Delete
		/// </summary>
		public void spACL_ROLES_ACTIONS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_ACTIONS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_ACTIONS_Delete
		/// <summary>
		/// spACL_ROLES_ACTIONS_Delete
		/// </summary>
		public IDbCommand cmdACL_ROLES_ACTIONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_ACTIONS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_ACTIONS_Update
		/// <summary>
		/// spACL_ROLES_ACTIONS_Update
		/// </summary>
		public void spACL_ROLES_ACTIONS_Update(ref Guid gID, Guid gROLE_ID, string sACTION_NAME, string sMODULE_NAME, Int32 nACCESS_OVERRIDE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_ACTIONS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parACTION_NAME      = Sql.AddParameter(cmd, "@ACTION_NAME"     , sACTION_NAME       ,  25);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parACCESS_OVERRIDE  = Sql.AddParameter(cmd, "@ACCESS_OVERRIDE" , nACCESS_OVERRIDE   );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_ACTIONS_Update
		/// <summary>
		/// spACL_ROLES_ACTIONS_Update
		/// </summary>
		public void spACL_ROLES_ACTIONS_Update(ref Guid gID, Guid gROLE_ID, string sACTION_NAME, string sMODULE_NAME, Int32 nACCESS_OVERRIDE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_ACTIONS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parACTION_NAME      = Sql.AddParameter(cmd, "@ACTION_NAME"     , sACTION_NAME       ,  25);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parACCESS_OVERRIDE  = Sql.AddParameter(cmd, "@ACCESS_OVERRIDE" , nACCESS_OVERRIDE   );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACL_ROLES_ACTIONS_Update
		/// <summary>
		/// spACL_ROLES_ACTIONS_Update
		/// </summary>
		public IDbCommand cmdACL_ROLES_ACTIONS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_ACTIONS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parACTION_NAME      = Sql.CreateParameter(cmd, "@ACTION_NAME"     , "string",  25);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parACCESS_OVERRIDE  = Sql.CreateParameter(cmd, "@ACCESS_OVERRIDE" , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACL_ROLES_Delete
		/// <summary>
		/// spACL_ROLES_Delete
		/// </summary>
		public void spACL_ROLES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_Delete
		/// <summary>
		/// spACL_ROLES_Delete
		/// </summary>
		public void spACL_ROLES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_Delete
		/// <summary>
		/// spACL_ROLES_Delete
		/// </summary>
		public IDbCommand cmdACL_ROLES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_InsertOnly
		/// <summary>
		/// spACL_ROLES_InsertOnly
		/// </summary>
		public void spACL_ROLES_InsertOnly(Guid gID, string sNAME, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_InsertOnly";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         , 150);
							IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_InsertOnly
		/// <summary>
		/// spACL_ROLES_InsertOnly
		/// </summary>
		public void spACL_ROLES_InsertOnly(Guid gID, string sNAME, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_InsertOnly";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         , 150);
				IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_InsertOnly
		/// <summary>
		/// spACL_ROLES_InsertOnly
		/// </summary>
		public IDbCommand cmdACL_ROLES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_InsertOnly";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parNAME        = Sql.CreateParameter(cmd, "@NAME"       , "string", 150);
			IDbDataParameter parDESCRIPTION = Sql.CreateParameter(cmd, "@DESCRIPTION", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_MassDelete
		/// <summary>
		/// spACL_ROLES_MassDelete
		/// </summary>
		public void spACL_ROLES_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_MassDelete
		/// <summary>
		/// spACL_ROLES_MassDelete
		/// </summary>
		public void spACL_ROLES_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_MassDelete
		/// <summary>
		/// spACL_ROLES_MassDelete
		/// </summary>
		public IDbCommand cmdACL_ROLES_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_Update
		/// <summary>
		/// spACL_ROLES_Update
		/// </summary>
		public void spACL_ROLES_Update(ref Guid gID, string sNAME, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_Update
		/// <summary>
		/// spACL_ROLES_Update
		/// </summary>
		public void spACL_ROLES_Update(ref Guid gID, string sNAME, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdACL_ROLES_Update
		/// <summary>
		/// spACL_ROLES_Update
		/// </summary>
		public IDbCommand cmdACL_ROLES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spACL_ROLES_USERS_Delete
		/// <summary>
		/// spACL_ROLES_USERS_Delete
		/// </summary>
		public void spACL_ROLES_USERS_Delete(Guid gROLE_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_USERS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_USERS_Delete
		/// <summary>
		/// spACL_ROLES_USERS_Delete
		/// </summary>
		public void spACL_ROLES_USERS_Delete(Guid gROLE_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_USERS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_USERS_Delete
		/// <summary>
		/// spACL_ROLES_USERS_Delete
		/// </summary>
		public IDbCommand cmdACL_ROLES_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_USERS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_USERS_MassUpdate
		/// <summary>
		/// spACL_ROLES_USERS_MassUpdate
		/// </summary>
		public void spACL_ROLES_USERS_MassUpdate(Guid gROLE_ID, string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_USERS_MassUpdate";
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_USERS_MassUpdate
		/// <summary>
		/// spACL_ROLES_USERS_MassUpdate
		/// </summary>
		public void spACL_ROLES_USERS_MassUpdate(Guid gROLE_ID, string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_USERS_MassUpdate";
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_USERS_MassUpdate
		/// <summary>
		/// spACL_ROLES_USERS_MassUpdate
		/// </summary>
		public IDbCommand cmdACL_ROLES_USERS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_USERS_MassUpdate";
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			return cmd;
		}
		#endregion

		#region spACL_ROLES_USERS_Update
		/// <summary>
		/// spACL_ROLES_USERS_Update
		/// </summary>
		public void spACL_ROLES_USERS_Update(Guid gROLE_ID, Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spACL_ROLES_USERS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spACL_ROLES_USERS_Update
		/// <summary>
		/// spACL_ROLES_USERS_Update
		/// </summary>
		public void spACL_ROLES_USERS_Update(Guid gROLE_ID, Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spACL_ROLES_USERS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdACL_ROLES_USERS_Update
		/// <summary>
		/// spACL_ROLES_USERS_Update
		/// </summary>
		public IDbCommand cmdACL_ROLES_USERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spACL_ROLES_USERS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spASSIGNED_SETS_NormalizeSet
		/// <summary>
		/// spASSIGNED_SETS_NormalizeSet
		/// </summary>
		public void spASSIGNED_SETS_NormalizeSet(ref Guid gID, Guid gPRIMARY_ASSIGNED_ID, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spASSIGNED_SETS_NormalizeSet";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parPRIMARY_ASSIGNED_ID = Sql.AddParameter(cmd, "@PRIMARY_ASSIGNED_ID", gPRIMARY_ASSIGNED_ID  );
							IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spASSIGNED_SETS_NormalizeSet
		/// <summary>
		/// spASSIGNED_SETS_NormalizeSet
		/// </summary>
		public void spASSIGNED_SETS_NormalizeSet(ref Guid gID, Guid gPRIMARY_ASSIGNED_ID, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spASSIGNED_SETS_NormalizeSet";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parPRIMARY_ASSIGNED_ID = Sql.AddParameter(cmd, "@PRIMARY_ASSIGNED_ID", gPRIMARY_ASSIGNED_ID  );
				IDbDataParameter parASSIGNED_SET_LIST   = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST"  , sASSIGNED_SET_LIST    , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdASSIGNED_SETS_NormalizeSet
		/// <summary>
		/// spASSIGNED_SETS_NormalizeSet
		/// </summary>
		public IDbCommand cmdASSIGNED_SETS_NormalizeSet(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spASSIGNED_SETS_NormalizeSet";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parPRIMARY_ASSIGNED_ID = Sql.CreateParameter(cmd, "@PRIMARY_ASSIGNED_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_SET_LIST   = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST"  , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spASSIGNED_SETS_UpdateNames
		/// <summary>
		/// spASSIGNED_SETS_UpdateNames
		/// </summary>
		public void spASSIGNED_SETS_UpdateNames(Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spASSIGNED_SETS_UpdateNames";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spASSIGNED_SETS_UpdateNames
		/// <summary>
		/// spASSIGNED_SETS_UpdateNames
		/// </summary>
		public void spASSIGNED_SETS_UpdateNames(Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spASSIGNED_SETS_UpdateNames";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdASSIGNED_SETS_UpdateNames
		/// <summary>
		/// spASSIGNED_SETS_UpdateNames
		/// </summary>
		public IDbCommand cmdASSIGNED_SETS_UpdateNames(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spASSIGNED_SETS_UpdateNames";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONFIG_Delete
		/// <summary>
		/// spCONFIG_Delete
		/// </summary>
		public void spCONFIG_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_Delete
		/// <summary>
		/// spCONFIG_Delete
		/// </summary>
		public void spCONFIG_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_Delete
		/// <summary>
		/// spCONFIG_Delete
		/// </summary>
		public IDbCommand cmdCONFIG_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONFIG_InsertOnly
		/// <summary>
		/// spCONFIG_InsertOnly
		/// </summary>
		public void spCONFIG_InsertOnly(string sCATEGORY, string sNAME, string sVALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  32);
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
							IDbDataParameter parVALUE            = Sql.AddParameter(cmd, "@VALUE"           , sVALUE             );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_InsertOnly
		/// <summary>
		/// spCONFIG_InsertOnly
		/// </summary>
		public void spCONFIG_InsertOnly(string sCATEGORY, string sNAME, string sVALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  32);
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
				IDbDataParameter parVALUE            = Sql.AddParameter(cmd, "@VALUE"           , sVALUE             );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_InsertOnly
		/// <summary>
		/// spCONFIG_InsertOnly
		/// </summary>
		public IDbCommand cmdCONFIG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  32);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  60);
			IDbDataParameter parVALUE            = Sql.CreateParameter(cmd, "@VALUE"           , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spCONFIG_MassDelete
		/// <summary>
		/// spCONFIG_MassDelete
		/// </summary>
		public void spCONFIG_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_MassDelete
		/// <summary>
		/// spCONFIG_MassDelete
		/// </summary>
		public void spCONFIG_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_MassDelete
		/// <summary>
		/// spCONFIG_MassDelete
		/// </summary>
		public IDbCommand cmdCONFIG_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCONFIG_Update
		/// <summary>
		/// spCONFIG_Update
		/// </summary>
		public void spCONFIG_Update(string sCATEGORY, string sNAME, string sVALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCONFIG_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  32);
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
							IDbDataParameter parVALUE            = Sql.AddParameter(cmd, "@VALUE"           , sVALUE             );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCONFIG_Update
		/// <summary>
		/// spCONFIG_Update
		/// </summary>
		public void spCONFIG_Update(string sCATEGORY, string sNAME, string sVALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCONFIG_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  32);
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  60);
				IDbDataParameter parVALUE            = Sql.AddParameter(cmd, "@VALUE"           , sVALUE             );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCONFIG_Update
		/// <summary>
		/// spCONFIG_Update
		/// </summary>
		public IDbCommand cmdCONFIG_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCONFIG_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  32);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  60);
			IDbDataParameter parVALUE            = Sql.CreateParameter(cmd, "@VALUE"           , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_Delete
		/// <summary>
		/// spCURRENCIES_Delete
		/// </summary>
		public void spCURRENCIES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_Delete
		/// <summary>
		/// spCURRENCIES_Delete
		/// </summary>
		public void spCURRENCIES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_Delete
		/// <summary>
		/// spCURRENCIES_Delete
		/// </summary>
		public IDbCommand cmdCURRENCIES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_InsertOnly
		/// <summary>
		/// spCURRENCIES_InsertOnly
		/// </summary>
		public void spCURRENCIES_InsertOnly(Guid gID, string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_InsertOnly";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  36);
							IDbDataParameter parSYMBOL           = Sql.AddParameter(cmd, "@SYMBOL"          , sSYMBOL            ,  36);
							IDbDataParameter parISO4217          = Sql.AddParameter(cmd, "@ISO4217"         , sISO4217           ,   3);
							IDbDataParameter parCONVERSION_RATE  = Sql.AddParameter(cmd, "@CONVERSION_RATE" , flCONVERSION_RATE  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_InsertOnly
		/// <summary>
		/// spCURRENCIES_InsertOnly
		/// </summary>
		public void spCURRENCIES_InsertOnly(Guid gID, string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_InsertOnly";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  36);
				IDbDataParameter parSYMBOL           = Sql.AddParameter(cmd, "@SYMBOL"          , sSYMBOL            ,  36);
				IDbDataParameter parISO4217          = Sql.AddParameter(cmd, "@ISO4217"         , sISO4217           ,   3);
				IDbDataParameter parCONVERSION_RATE  = Sql.AddParameter(cmd, "@CONVERSION_RATE" , flCONVERSION_RATE  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_InsertOnly
		/// <summary>
		/// spCURRENCIES_InsertOnly
		/// </summary>
		public IDbCommand cmdCURRENCIES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_InsertOnly";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  36);
			IDbDataParameter parSYMBOL           = Sql.CreateParameter(cmd, "@SYMBOL"          , "string",  36);
			IDbDataParameter parISO4217          = Sql.CreateParameter(cmd, "@ISO4217"         , "string",   3);
			IDbDataParameter parCONVERSION_RATE  = Sql.CreateParameter(cmd, "@CONVERSION_RATE" , "float",   8);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_InsertOnlyByISO
		/// <summary>
		/// spCURRENCIES_InsertOnlyByISO
		/// </summary>
		public void spCURRENCIES_InsertOnlyByISO(string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_InsertOnlyByISO";
							IDbDataParameter parNAME            = Sql.AddParameter(cmd, "@NAME"           , sNAME             ,  36);
							IDbDataParameter parSYMBOL          = Sql.AddParameter(cmd, "@SYMBOL"         , sSYMBOL           ,  36);
							IDbDataParameter parISO4217         = Sql.AddParameter(cmd, "@ISO4217"        , sISO4217          ,   3);
							IDbDataParameter parCONVERSION_RATE = Sql.AddParameter(cmd, "@CONVERSION_RATE", flCONVERSION_RATE );
							IDbDataParameter parSTATUS          = Sql.AddParameter(cmd, "@STATUS"         , sSTATUS           ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_InsertOnlyByISO
		/// <summary>
		/// spCURRENCIES_InsertOnlyByISO
		/// </summary>
		public void spCURRENCIES_InsertOnlyByISO(string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_InsertOnlyByISO";
				IDbDataParameter parNAME            = Sql.AddParameter(cmd, "@NAME"           , sNAME             ,  36);
				IDbDataParameter parSYMBOL          = Sql.AddParameter(cmd, "@SYMBOL"         , sSYMBOL           ,  36);
				IDbDataParameter parISO4217         = Sql.AddParameter(cmd, "@ISO4217"        , sISO4217          ,   3);
				IDbDataParameter parCONVERSION_RATE = Sql.AddParameter(cmd, "@CONVERSION_RATE", flCONVERSION_RATE );
				IDbDataParameter parSTATUS          = Sql.AddParameter(cmd, "@STATUS"         , sSTATUS           ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_InsertOnlyByISO
		/// <summary>
		/// spCURRENCIES_InsertOnlyByISO
		/// </summary>
		public IDbCommand cmdCURRENCIES_InsertOnlyByISO(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_InsertOnlyByISO";
			IDbDataParameter parNAME            = Sql.CreateParameter(cmd, "@NAME"           , "string",  36);
			IDbDataParameter parSYMBOL          = Sql.CreateParameter(cmd, "@SYMBOL"         , "string",  36);
			IDbDataParameter parISO4217         = Sql.CreateParameter(cmd, "@ISO4217"        , "string",   3);
			IDbDataParameter parCONVERSION_RATE = Sql.CreateParameter(cmd, "@CONVERSION_RATE", "float",   8);
			IDbDataParameter parSTATUS          = Sql.CreateParameter(cmd, "@STATUS"         , "string",  25);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_MassUpdate
		/// <summary>
		/// spCURRENCIES_MassUpdate
		/// </summary>
		public void spCURRENCIES_MassUpdate(string sID_LIST, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_MassUpdate
		/// <summary>
		/// spCURRENCIES_MassUpdate
		/// </summary>
		public void spCURRENCIES_MassUpdate(string sID_LIST, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_MassUpdate
		/// <summary>
		/// spCURRENCIES_MassUpdate
		/// </summary>
		public IDbCommand cmdCURRENCIES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spCURRENCIES_Update
		/// <summary>
		/// spCURRENCIES_Update
		/// </summary>
		public void spCURRENCIES_Update(ref Guid gID, string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  36);
							IDbDataParameter parSYMBOL           = Sql.AddParameter(cmd, "@SYMBOL"          , sSYMBOL            ,  36);
							IDbDataParameter parISO4217          = Sql.AddParameter(cmd, "@ISO4217"         , sISO4217           ,   3);
							IDbDataParameter parCONVERSION_RATE  = Sql.AddParameter(cmd, "@CONVERSION_RATE" , flCONVERSION_RATE  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_Update
		/// <summary>
		/// spCURRENCIES_Update
		/// </summary>
		public void spCURRENCIES_Update(ref Guid gID, string sNAME, string sSYMBOL, string sISO4217, float flCONVERSION_RATE, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  36);
				IDbDataParameter parSYMBOL           = Sql.AddParameter(cmd, "@SYMBOL"          , sSYMBOL            ,  36);
				IDbDataParameter parISO4217          = Sql.AddParameter(cmd, "@ISO4217"         , sISO4217           ,   3);
				IDbDataParameter parCONVERSION_RATE  = Sql.AddParameter(cmd, "@CONVERSION_RATE" , flCONVERSION_RATE  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdCURRENCIES_Update
		/// <summary>
		/// spCURRENCIES_Update
		/// </summary>
		public IDbCommand cmdCURRENCIES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  36);
			IDbDataParameter parSYMBOL           = Sql.CreateParameter(cmd, "@SYMBOL"          , "string",  36);
			IDbDataParameter parISO4217          = Sql.CreateParameter(cmd, "@ISO4217"         , "string",   3);
			IDbDataParameter parCONVERSION_RATE  = Sql.CreateParameter(cmd, "@CONVERSION_RATE" , "float",   8);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spCURRENCIES_UpdateRateByISO
		/// <summary>
		/// spCURRENCIES_UpdateRateByISO
		/// </summary>
		public void spCURRENCIES_UpdateRateByISO(string sISO4217, float flCONVERSION_RATE, Guid gSYSTEM_CURRENCY_LOG_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spCURRENCIES_UpdateRateByISO";
							IDbDataParameter parMODIFIED_USER_ID       = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"      ,  Security.USER_ID        );
							IDbDataParameter parISO4217                = Sql.AddParameter(cmd, "@ISO4217"               , sISO4217                 ,   3);
							IDbDataParameter parCONVERSION_RATE        = Sql.AddParameter(cmd, "@CONVERSION_RATE"       , flCONVERSION_RATE        );
							IDbDataParameter parSYSTEM_CURRENCY_LOG_ID = Sql.AddParameter(cmd, "@SYSTEM_CURRENCY_LOG_ID", gSYSTEM_CURRENCY_LOG_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spCURRENCIES_UpdateRateByISO
		/// <summary>
		/// spCURRENCIES_UpdateRateByISO
		/// </summary>
		public void spCURRENCIES_UpdateRateByISO(string sISO4217, float flCONVERSION_RATE, Guid gSYSTEM_CURRENCY_LOG_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spCURRENCIES_UpdateRateByISO";
				IDbDataParameter parMODIFIED_USER_ID       = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"      ,  Security.USER_ID        );
				IDbDataParameter parISO4217                = Sql.AddParameter(cmd, "@ISO4217"               , sISO4217                 ,   3);
				IDbDataParameter parCONVERSION_RATE        = Sql.AddParameter(cmd, "@CONVERSION_RATE"       , flCONVERSION_RATE        );
				IDbDataParameter parSYSTEM_CURRENCY_LOG_ID = Sql.AddParameter(cmd, "@SYSTEM_CURRENCY_LOG_ID", gSYSTEM_CURRENCY_LOG_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdCURRENCIES_UpdateRateByISO
		/// <summary>
		/// spCURRENCIES_UpdateRateByISO
		/// </summary>
		public IDbCommand cmdCURRENCIES_UpdateRateByISO(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spCURRENCIES_UpdateRateByISO";
			IDbDataParameter parMODIFIED_USER_ID       = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"      , "Guid",  16);
			IDbDataParameter parISO4217                = Sql.CreateParameter(cmd, "@ISO4217"               , "string",   3);
			IDbDataParameter parCONVERSION_RATE        = Sql.CreateParameter(cmd, "@CONVERSION_RATE"       , "float",   8);
			IDbDataParameter parSYSTEM_CURRENCY_LOG_ID = Sql.CreateParameter(cmd, "@SYSTEM_CURRENCY_LOG_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHBOARD_APPS_InsertOnly
		/// <summary>
		/// spDASHBOARD_APPS_InsertOnly
		/// </summary>
		public void spDASHBOARD_APPS_InsertOnly(string sNAME, string sCATEGORY, string sMODULE_NAME, string sTITLE, string sSETTINGS_EDITVIEW, string sSCRIPT_URL, bool bIS_ADMIN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARD_APPS_InsertOnly";
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parCATEGORY          = Sql.AddParameter(cmd, "@CATEGORY"         , sCATEGORY           ,  25);
							IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  50);
							IDbDataParameter parTITLE             = Sql.AddParameter(cmd, "@TITLE"            , sTITLE              , 100);
							IDbDataParameter parSETTINGS_EDITVIEW = Sql.AddParameter(cmd, "@SETTINGS_EDITVIEW", sSETTINGS_EDITVIEW  ,  50);
							IDbDataParameter parSCRIPT_URL        = Sql.AddParameter(cmd, "@SCRIPT_URL"       , sSCRIPT_URL         , 2083);
							IDbDataParameter parIS_ADMIN          = Sql.AddParameter(cmd, "@IS_ADMIN"         , bIS_ADMIN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARD_APPS_InsertOnly
		/// <summary>
		/// spDASHBOARD_APPS_InsertOnly
		/// </summary>
		public void spDASHBOARD_APPS_InsertOnly(string sNAME, string sCATEGORY, string sMODULE_NAME, string sTITLE, string sSETTINGS_EDITVIEW, string sSCRIPT_URL, bool bIS_ADMIN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARD_APPS_InsertOnly";
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parCATEGORY          = Sql.AddParameter(cmd, "@CATEGORY"         , sCATEGORY           ,  25);
				IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  50);
				IDbDataParameter parTITLE             = Sql.AddParameter(cmd, "@TITLE"            , sTITLE              , 100);
				IDbDataParameter parSETTINGS_EDITVIEW = Sql.AddParameter(cmd, "@SETTINGS_EDITVIEW", sSETTINGS_EDITVIEW  ,  50);
				IDbDataParameter parSCRIPT_URL        = Sql.AddParameter(cmd, "@SCRIPT_URL"       , sSCRIPT_URL         , 2083);
				IDbDataParameter parIS_ADMIN          = Sql.AddParameter(cmd, "@IS_ADMIN"         , bIS_ADMIN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARD_APPS_InsertOnly
		/// <summary>
		/// spDASHBOARD_APPS_InsertOnly
		/// </summary>
		public IDbCommand cmdDASHBOARD_APPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARD_APPS_InsertOnly";
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parCATEGORY          = Sql.CreateParameter(cmd, "@CATEGORY"         , "string",  25);
			IDbDataParameter parMODULE_NAME       = Sql.CreateParameter(cmd, "@MODULE_NAME"      , "string",  50);
			IDbDataParameter parTITLE             = Sql.CreateParameter(cmd, "@TITLE"            , "string", 100);
			IDbDataParameter parSETTINGS_EDITVIEW = Sql.CreateParameter(cmd, "@SETTINGS_EDITVIEW", "string",  50);
			IDbDataParameter parSCRIPT_URL        = Sql.CreateParameter(cmd, "@SCRIPT_URL"       , "string", 2083);
			IDbDataParameter parIS_ADMIN          = Sql.CreateParameter(cmd, "@IS_ADMIN"         , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_Delete
		/// <summary>
		/// spDASHBOARDS_Delete
		/// </summary>
		public void spDASHBOARDS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_Delete
		/// <summary>
		/// spDASHBOARDS_Delete
		/// </summary>
		public void spDASHBOARDS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_Delete
		/// <summary>
		/// spDASHBOARDS_Delete
		/// </summary>
		public IDbCommand cmdDASHBOARDS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_InsertOnly
		/// </summary>
		public void spDASHBOARDS_InsertOnly(Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, string sCATEGORY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_InsertOnly";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 100);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_InsertOnly
		/// </summary>
		public void spDASHBOARDS_InsertOnly(Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sNAME, string sCATEGORY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_InsertOnly";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 100);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_InsertOnly
		/// </summary>
		public IDbCommand cmdDASHBOARDS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_InsertOnly";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 100);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  50);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_PANELS_AddReport
		/// <summary>
		/// spDASHBOARDS_PANELS_AddReport
		/// </summary>
		public void spDASHBOARDS_PANELS_AddReport(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, Guid gDASHBOARD_ID, string sDASHBOARD_CATEGORY, Guid gREPORT_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_PANELS_AddReport";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
							IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
							IDbDataParameter parDASHBOARD_ID       = Sql.AddParameter(cmd, "@DASHBOARD_ID"      , gDASHBOARD_ID        );
							IDbDataParameter parDASHBOARD_CATEGORY = Sql.AddParameter(cmd, "@DASHBOARD_CATEGORY", sDASHBOARD_CATEGORY  ,  50);
							IDbDataParameter parREPORT_ID          = Sql.AddParameter(cmd, "@REPORT_ID"         , gREPORT_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_PANELS_AddReport
		/// <summary>
		/// spDASHBOARDS_PANELS_AddReport
		/// </summary>
		public void spDASHBOARDS_PANELS_AddReport(Guid gASSIGNED_USER_ID, Guid gTEAM_ID, Guid gDASHBOARD_ID, string sDASHBOARD_CATEGORY, Guid gREPORT_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_PANELS_AddReport";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parASSIGNED_USER_ID   = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"  , gASSIGNED_USER_ID    );
				IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
				IDbDataParameter parDASHBOARD_ID       = Sql.AddParameter(cmd, "@DASHBOARD_ID"      , gDASHBOARD_ID        );
				IDbDataParameter parDASHBOARD_CATEGORY = Sql.AddParameter(cmd, "@DASHBOARD_CATEGORY", sDASHBOARD_CATEGORY  ,  50);
				IDbDataParameter parREPORT_ID          = Sql.AddParameter(cmd, "@REPORT_ID"         , gREPORT_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_PANELS_AddReport
		/// <summary>
		/// spDASHBOARDS_PANELS_AddReport
		/// </summary>
		public IDbCommand cmdDASHBOARDS_PANELS_AddReport(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_PANELS_AddReport";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID   = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"  , "Guid",  16);
			IDbDataParameter parTEAM_ID            = Sql.CreateParameter(cmd, "@TEAM_ID"           , "Guid",  16);
			IDbDataParameter parDASHBOARD_ID       = Sql.CreateParameter(cmd, "@DASHBOARD_ID"      , "Guid",  16);
			IDbDataParameter parDASHBOARD_CATEGORY = Sql.CreateParameter(cmd, "@DASHBOARD_CATEGORY", "string",  50);
			IDbDataParameter parREPORT_ID          = Sql.CreateParameter(cmd, "@REPORT_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_PANELS_Delete
		/// <summary>
		/// spDASHBOARDS_PANELS_Delete
		/// </summary>
		public void spDASHBOARDS_PANELS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_PANELS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_PANELS_Delete
		/// <summary>
		/// spDASHBOARDS_PANELS_Delete
		/// </summary>
		public void spDASHBOARDS_PANELS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_PANELS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_PANELS_Delete
		/// <summary>
		/// spDASHBOARDS_PANELS_Delete
		/// </summary>
		public IDbCommand cmdDASHBOARDS_PANELS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_PANELS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_PANELS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_PANELS_InsertOnly
		/// </summary>
		public void spDASHBOARDS_PANELS_InsertOnly(Guid gDASHBOARD_ID, string sDASHBOARD_APP_NAME, Int32 nPANEL_ORDER, Int32 nROW_INDEX, Int32 nCOLUMN_WIDTH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_PANELS_InsertOnly";
							IDbDataParameter parDASHBOARD_ID       = Sql.AddParameter(cmd, "@DASHBOARD_ID"      , gDASHBOARD_ID        );
							IDbDataParameter parDASHBOARD_APP_NAME = Sql.AddParameter(cmd, "@DASHBOARD_APP_NAME", sDASHBOARD_APP_NAME  , 150);
							IDbDataParameter parPANEL_ORDER        = Sql.AddParameter(cmd, "@PANEL_ORDER"       , nPANEL_ORDER         );
							IDbDataParameter parROW_INDEX          = Sql.AddParameter(cmd, "@ROW_INDEX"         , nROW_INDEX           );
							IDbDataParameter parCOLUMN_WIDTH       = Sql.AddParameter(cmd, "@COLUMN_WIDTH"      , nCOLUMN_WIDTH        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_PANELS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_PANELS_InsertOnly
		/// </summary>
		public void spDASHBOARDS_PANELS_InsertOnly(Guid gDASHBOARD_ID, string sDASHBOARD_APP_NAME, Int32 nPANEL_ORDER, Int32 nROW_INDEX, Int32 nCOLUMN_WIDTH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_PANELS_InsertOnly";
				IDbDataParameter parDASHBOARD_ID       = Sql.AddParameter(cmd, "@DASHBOARD_ID"      , gDASHBOARD_ID        );
				IDbDataParameter parDASHBOARD_APP_NAME = Sql.AddParameter(cmd, "@DASHBOARD_APP_NAME", sDASHBOARD_APP_NAME  , 150);
				IDbDataParameter parPANEL_ORDER        = Sql.AddParameter(cmd, "@PANEL_ORDER"       , nPANEL_ORDER         );
				IDbDataParameter parROW_INDEX          = Sql.AddParameter(cmd, "@ROW_INDEX"         , nROW_INDEX           );
				IDbDataParameter parCOLUMN_WIDTH       = Sql.AddParameter(cmd, "@COLUMN_WIDTH"      , nCOLUMN_WIDTH        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHBOARDS_PANELS_InsertOnly
		/// <summary>
		/// spDASHBOARDS_PANELS_InsertOnly
		/// </summary>
		public IDbCommand cmdDASHBOARDS_PANELS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_PANELS_InsertOnly";
			IDbDataParameter parDASHBOARD_ID       = Sql.CreateParameter(cmd, "@DASHBOARD_ID"      , "Guid",  16);
			IDbDataParameter parDASHBOARD_APP_NAME = Sql.CreateParameter(cmd, "@DASHBOARD_APP_NAME", "string", 150);
			IDbDataParameter parPANEL_ORDER        = Sql.CreateParameter(cmd, "@PANEL_ORDER"       , "Int32",   4);
			IDbDataParameter parROW_INDEX          = Sql.CreateParameter(cmd, "@ROW_INDEX"         , "Int32",   4);
			IDbDataParameter parCOLUMN_WIDTH       = Sql.CreateParameter(cmd, "@COLUMN_WIDTH"      , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_PANELS_Update
		/// <summary>
		/// spDASHBOARDS_PANELS_Update
		/// </summary>
		public void spDASHBOARDS_PANELS_Update(ref Guid gID, Guid gDASHBOARD_ID, Guid gDASHBOARD_APP_ID, Int32 nPANEL_ORDER, Int32 nROW_INDEX, Int32 nCOLUMN_WIDTH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_PANELS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDASHBOARD_ID     = Sql.AddParameter(cmd, "@DASHBOARD_ID"    , gDASHBOARD_ID      );
							IDbDataParameter parDASHBOARD_APP_ID = Sql.AddParameter(cmd, "@DASHBOARD_APP_ID", gDASHBOARD_APP_ID  );
							IDbDataParameter parPANEL_ORDER      = Sql.AddParameter(cmd, "@PANEL_ORDER"     , nPANEL_ORDER       );
							IDbDataParameter parROW_INDEX        = Sql.AddParameter(cmd, "@ROW_INDEX"       , nROW_INDEX         );
							IDbDataParameter parCOLUMN_WIDTH     = Sql.AddParameter(cmd, "@COLUMN_WIDTH"    , nCOLUMN_WIDTH      );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_PANELS_Update
		/// <summary>
		/// spDASHBOARDS_PANELS_Update
		/// </summary>
		public void spDASHBOARDS_PANELS_Update(ref Guid gID, Guid gDASHBOARD_ID, Guid gDASHBOARD_APP_ID, Int32 nPANEL_ORDER, Int32 nROW_INDEX, Int32 nCOLUMN_WIDTH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_PANELS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDASHBOARD_ID     = Sql.AddParameter(cmd, "@DASHBOARD_ID"    , gDASHBOARD_ID      );
				IDbDataParameter parDASHBOARD_APP_ID = Sql.AddParameter(cmd, "@DASHBOARD_APP_ID", gDASHBOARD_APP_ID  );
				IDbDataParameter parPANEL_ORDER      = Sql.AddParameter(cmd, "@PANEL_ORDER"     , nPANEL_ORDER       );
				IDbDataParameter parROW_INDEX        = Sql.AddParameter(cmd, "@ROW_INDEX"       , nROW_INDEX         );
				IDbDataParameter parCOLUMN_WIDTH     = Sql.AddParameter(cmd, "@COLUMN_WIDTH"    , nCOLUMN_WIDTH      );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDASHBOARDS_PANELS_Update
		/// <summary>
		/// spDASHBOARDS_PANELS_Update
		/// </summary>
		public IDbCommand cmdDASHBOARDS_PANELS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_PANELS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDASHBOARD_ID     = Sql.CreateParameter(cmd, "@DASHBOARD_ID"    , "Guid",  16);
			IDbDataParameter parDASHBOARD_APP_ID = Sql.CreateParameter(cmd, "@DASHBOARD_APP_ID", "Guid",  16);
			IDbDataParameter parPANEL_ORDER      = Sql.CreateParameter(cmd, "@PANEL_ORDER"     , "Int32",   4);
			IDbDataParameter parROW_INDEX        = Sql.CreateParameter(cmd, "@ROW_INDEX"       , "Int32",   4);
			IDbDataParameter parCOLUMN_WIDTH     = Sql.CreateParameter(cmd, "@COLUMN_WIDTH"    , "Int32",   4);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDASHBOARDS_Update
		/// <summary>
		/// spDASHBOARDS_Update
		/// </summary>
		public void spDASHBOARDS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sNAME, string sCATEGORY, string sDESCRIPTION, string sCONTENT, string sASSIGNED_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHBOARDS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 100);
							IDbDataParameter parCATEGORY          = Sql.AddParameter(cmd, "@CATEGORY"         , sCATEGORY           ,  50);
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parCONTENT           = Sql.AddParameter(cmd, "@CONTENT"          , sCONTENT            );
							IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHBOARDS_Update
		/// <summary>
		/// spDASHBOARDS_Update
		/// </summary>
		public void spDASHBOARDS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, Guid gTEAM_ID, string sTEAM_SET_LIST, string sNAME, string sCATEGORY, string sDESCRIPTION, string sCONTENT, string sASSIGNED_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHBOARDS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 100);
				IDbDataParameter parCATEGORY          = Sql.AddParameter(cmd, "@CATEGORY"         , sCATEGORY           ,  50);
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parCONTENT           = Sql.AddParameter(cmd, "@CONTENT"          , sCONTENT            );
				IDbDataParameter parASSIGNED_SET_LIST = Sql.AddAnsiParam(cmd, "@ASSIGNED_SET_LIST", sASSIGNED_SET_LIST  , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDASHBOARDS_Update
		/// <summary>
		/// spDASHBOARDS_Update
		/// </summary>
		public IDbCommand cmdDASHBOARDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHBOARDS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 100);
			IDbDataParameter parCATEGORY          = Sql.CreateParameter(cmd, "@CATEGORY"         , "string",  50);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parCONTENT           = Sql.CreateParameter(cmd, "@CONTENT"          , "string", 104857600);
			IDbDataParameter parASSIGNED_SET_LIST = Sql.CreateParameter(cmd, "@ASSIGNED_SET_LIST", "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDASHLETS_Delete
		/// <summary>
		/// spDASHLETS_Delete
		/// </summary>
		public void spDASHLETS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_Delete
		/// <summary>
		/// spDASHLETS_Delete
		/// </summary>
		public void spDASHLETS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_Delete
		/// <summary>
		/// spDASHLETS_Delete
		/// </summary>
		public IDbCommand cmdDASHLETS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_InsertOnly
		/// <summary>
		/// spDASHLETS_InsertOnly
		/// </summary>
		public void spDASHLETS_InsertOnly(string sCATEGORY, string sMODULE_NAME, string sCONTROL_NAME, string sTITLE, bool bALLOW_MULTIPLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_InsertOnly";
							IDbDataParameter parCATEGORY       = Sql.AddParameter(cmd, "@CATEGORY"      , sCATEGORY        ,  25);
							IDbDataParameter parMODULE_NAME    = Sql.AddParameter(cmd, "@MODULE_NAME"   , sMODULE_NAME     ,  50);
							IDbDataParameter parCONTROL_NAME   = Sql.AddParameter(cmd, "@CONTROL_NAME"  , sCONTROL_NAME    , 100);
							IDbDataParameter parTITLE          = Sql.AddParameter(cmd, "@TITLE"         , sTITLE           , 100);
							IDbDataParameter parALLOW_MULTIPLE = Sql.AddParameter(cmd, "@ALLOW_MULTIPLE", bALLOW_MULTIPLE  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_InsertOnly
		/// <summary>
		/// spDASHLETS_InsertOnly
		/// </summary>
		public void spDASHLETS_InsertOnly(string sCATEGORY, string sMODULE_NAME, string sCONTROL_NAME, string sTITLE, bool bALLOW_MULTIPLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_InsertOnly";
				IDbDataParameter parCATEGORY       = Sql.AddParameter(cmd, "@CATEGORY"      , sCATEGORY        ,  25);
				IDbDataParameter parMODULE_NAME    = Sql.AddParameter(cmd, "@MODULE_NAME"   , sMODULE_NAME     ,  50);
				IDbDataParameter parCONTROL_NAME   = Sql.AddParameter(cmd, "@CONTROL_NAME"  , sCONTROL_NAME    , 100);
				IDbDataParameter parTITLE          = Sql.AddParameter(cmd, "@TITLE"         , sTITLE           , 100);
				IDbDataParameter parALLOW_MULTIPLE = Sql.AddParameter(cmd, "@ALLOW_MULTIPLE", bALLOW_MULTIPLE  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_InsertOnly
		/// <summary>
		/// spDASHLETS_InsertOnly
		/// </summary>
		public IDbCommand cmdDASHLETS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_InsertOnly";
			IDbDataParameter parCATEGORY       = Sql.CreateParameter(cmd, "@CATEGORY"      , "string",  25);
			IDbDataParameter parMODULE_NAME    = Sql.CreateParameter(cmd, "@MODULE_NAME"   , "string",  50);
			IDbDataParameter parCONTROL_NAME   = Sql.CreateParameter(cmd, "@CONTROL_NAME"  , "string", 100);
			IDbDataParameter parTITLE          = Sql.CreateParameter(cmd, "@TITLE"         , "string", 100);
			IDbDataParameter parALLOW_MULTIPLE = Sql.CreateParameter(cmd, "@ALLOW_MULTIPLE", "bool",   1);
			return cmd;
		}
		#endregion

		#region spDASHLETS_Update
		/// <summary>
		/// spDASHLETS_Update
		/// </summary>
		public void spDASHLETS_Update(ref Guid gID, string sCATEGORY, string sMODULE_NAME, string sCONTROL_NAME, string sTITLE, bool bDASHLET_ENABLED, bool bALLOW_MULTIPLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  25);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
							IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
							IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
							IDbDataParameter parDASHLET_ENABLED  = Sql.AddParameter(cmd, "@DASHLET_ENABLED" , bDASHLET_ENABLED   );
							IDbDataParameter parALLOW_MULTIPLE   = Sql.AddParameter(cmd, "@ALLOW_MULTIPLE"  , bALLOW_MULTIPLE    );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_Update
		/// <summary>
		/// spDASHLETS_Update
		/// </summary>
		public void spDASHLETS_Update(ref Guid gID, string sCATEGORY, string sMODULE_NAME, string sCONTROL_NAME, string sTITLE, bool bDASHLET_ENABLED, bool bALLOW_MULTIPLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  25);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
				IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
				IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
				IDbDataParameter parDASHLET_ENABLED  = Sql.AddParameter(cmd, "@DASHLET_ENABLED" , bDASHLET_ENABLED   );
				IDbDataParameter parALLOW_MULTIPLE   = Sql.AddParameter(cmd, "@ALLOW_MULTIPLE"  , bALLOW_MULTIPLE    );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDASHLETS_Update
		/// <summary>
		/// spDASHLETS_Update
		/// </summary>
		public IDbCommand cmdDASHLETS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  25);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  50);
			IDbDataParameter parCONTROL_NAME     = Sql.CreateParameter(cmd, "@CONTROL_NAME"    , "string", 100);
			IDbDataParameter parTITLE            = Sql.CreateParameter(cmd, "@TITLE"           , "string", 100);
			IDbDataParameter parDASHLET_ENABLED  = Sql.CreateParameter(cmd, "@DASHLET_ENABLED" , "bool",   1);
			IDbDataParameter parALLOW_MULTIPLE   = Sql.CreateParameter(cmd, "@ALLOW_MULTIPLE"  , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Delete
		/// <summary>
		/// spDASHLETS_USERS_Delete
		/// </summary>
		public void spDASHLETS_USERS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Delete
		/// <summary>
		/// spDASHLETS_USERS_Delete
		/// </summary>
		public void spDASHLETS_USERS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Delete
		/// <summary>
		/// spDASHLETS_USERS_Delete
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Disable
		/// <summary>
		/// spDASHLETS_USERS_Disable
		/// </summary>
		public void spDASHLETS_USERS_Disable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Disable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Disable
		/// <summary>
		/// spDASHLETS_USERS_Disable
		/// </summary>
		public void spDASHLETS_USERS_Disable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Disable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Disable
		/// <summary>
		/// spDASHLETS_USERS_Disable
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Disable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Enable
		/// <summary>
		/// spDASHLETS_USERS_Enable
		/// </summary>
		public void spDASHLETS_USERS_Enable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Enable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Enable
		/// <summary>
		/// spDASHLETS_USERS_Enable
		/// </summary>
		public void spDASHLETS_USERS_Enable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Enable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Enable
		/// <summary>
		/// spDASHLETS_USERS_Enable
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Enable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Init
		/// <summary>
		/// spDASHLETS_USERS_Init
		/// </summary>
		public void spDASHLETS_USERS_Init(Guid gASSIGNED_USER_ID, string sDETAIL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Init";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Init
		/// <summary>
		/// spDASHLETS_USERS_Init
		/// </summary>
		public void spDASHLETS_USERS_Init(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Init";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Init
		/// <summary>
		/// spDASHLETS_USERS_Init
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Init(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Init";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_InitDisable
		/// <summary>
		/// spDASHLETS_USERS_InitDisable
		/// </summary>
		public void spDASHLETS_USERS_InitDisable(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_InitDisable";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
							IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_InitDisable
		/// <summary>
		/// spDASHLETS_USERS_InitDisable
		/// </summary>
		public void spDASHLETS_USERS_InitDisable(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_InitDisable";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
				IDbDataParameter parCONTROL_NAME     = Sql.AddParameter(cmd, "@CONTROL_NAME"    , sCONTROL_NAME      , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_InitDisable
		/// <summary>
		/// spDASHLETS_USERS_InitDisable
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_InitDisable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_InitDisable";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  50);
			IDbDataParameter parCONTROL_NAME     = Sql.CreateParameter(cmd, "@CONTROL_NAME"    , "string", 100);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_MassUpdate
		/// <summary>
		/// spDASHLETS_USERS_MassUpdate
		/// </summary>
		public void spDASHLETS_USERS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sDETAIL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_MassUpdate";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_MassUpdate
		/// <summary>
		/// spDASHLETS_USERS_MassUpdate
		/// </summary>
		public void spDASHLETS_USERS_MassUpdate(string sID_LIST, Guid gASSIGNED_USER_ID, string sDETAIL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_MassUpdate";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_MassUpdate
		/// <summary>
		/// spDASHLETS_USERS_MassUpdate
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_MassUpdate";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_MoveDown
		/// <summary>
		/// spDASHLETS_USERS_MoveDown
		/// </summary>
		public void spDASHLETS_USERS_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_MoveDown
		/// <summary>
		/// spDASHLETS_USERS_MoveDown
		/// </summary>
		public void spDASHLETS_USERS_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_MoveDown
		/// <summary>
		/// spDASHLETS_USERS_MoveDown
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_MoveItem
		/// <summary>
		/// spDASHLETS_USERS_MoveItem
		/// </summary>
		public void spDASHLETS_USERS_MoveItem(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_MoveItem
		/// <summary>
		/// spDASHLETS_USERS_MoveItem
		/// </summary>
		public void spDASHLETS_USERS_MoveItem(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_MoveItem
		/// <summary>
		/// spDASHLETS_USERS_MoveItem
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_MoveUp
		/// <summary>
		/// spDASHLETS_USERS_MoveUp
		/// </summary>
		public void spDASHLETS_USERS_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_MoveUp
		/// <summary>
		/// spDASHLETS_USERS_MoveUp
		/// </summary>
		public void spDASHLETS_USERS_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_MoveUp
		/// <summary>
		/// spDASHLETS_USERS_MoveUp
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_Reorder
		/// <summary>
		/// spDASHLETS_USERS_Reorder
		/// </summary>
		public void spDASHLETS_USERS_Reorder(Guid gASSIGNED_USER_ID, string sDETAIL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_Reorder";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_Reorder
		/// <summary>
		/// spDASHLETS_USERS_Reorder
		/// </summary>
		public void spDASHLETS_USERS_Reorder(Guid gASSIGNED_USER_ID, string sDETAIL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_Reorder";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_Reorder
		/// <summary>
		/// spDASHLETS_USERS_Reorder
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_Reorder(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_Reorder";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			return cmd;
		}
		#endregion

		#region spDASHLETS_USERS_UpdateTitle
		/// <summary>
		/// spDASHLETS_USERS_UpdateTitle
		/// </summary>
		public void spDASHLETS_USERS_UpdateTitle(Guid gID, string sTITLE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDASHLETS_USERS_UpdateTitle";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDASHLETS_USERS_UpdateTitle
		/// <summary>
		/// spDASHLETS_USERS_UpdateTitle
		/// </summary>
		public void spDASHLETS_USERS_UpdateTitle(Guid gID, string sTITLE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDASHLETS_USERS_UpdateTitle";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTITLE            = Sql.AddParameter(cmd, "@TITLE"           , sTITLE             , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDASHLETS_USERS_UpdateTitle
		/// <summary>
		/// spDASHLETS_USERS_UpdateTitle
		/// </summary>
		public IDbCommand cmdDASHLETS_USERS_UpdateTitle(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDASHLETS_USERS_UpdateTitle";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTITLE            = Sql.CreateParameter(cmd, "@TITLE"           , "string", 100);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_Delete
		/// <summary>
		/// spDETAILVIEWS_Delete
		/// </summary>
		public void spDETAILVIEWS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_Delete
		/// <summary>
		/// spDETAILVIEWS_Delete
		/// </summary>
		public void spDETAILVIEWS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_Delete
		/// <summary>
		/// spDETAILVIEWS_Delete
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_Delete
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Delete
		/// </summary>
		public void spDETAILVIEWS_FIELDS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_Delete
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Delete
		/// </summary>
		public void spDETAILVIEWS_FIELDS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_Delete
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Delete
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBlank
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBlank(string sDETAIL_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBlank";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBlank
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBlank(string sDETAIL_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBlank";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBlank
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsBlank(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBlank";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBound
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBound
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBound(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBound";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBound
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBound
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBound(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBound";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsBound
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBound
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsBound(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBound";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBoundList
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBoundList(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sLIST_NAME, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundL";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundList";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parLIST_NAME   = Sql.AddParameter(cmd, "@LIST_NAME"  , sLIST_NAME    ,  50);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBoundList
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsBoundList(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sLIST_NAME, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundL";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundList";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parLIST_NAME   = Sql.AddParameter(cmd, "@LIST_NAME"  , sLIST_NAME    ,  50);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsBoundList
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsBoundList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundL";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsBoundList";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parLIST_NAME   = Sql.CreateParameter(cmd, "@LIST_NAME"  , "string",  50);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsButton
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsButton
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsButton(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsButton";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsButton
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsButton
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsButton(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsButton";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsButton
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsButton
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsButton(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsButton";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsCheckBox(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckB";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckBox";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsCheckBox(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckB";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckBox";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsCheckBox(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckB";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsCheckBox";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsDependList
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsDependList(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sPARENT_FIELD, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDepend";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDependList";
							IDbDataParameter parDETAIL_NAME  = Sql.AddParameter(cmd, "@DETAIL_NAME" , sDETAIL_NAME   ,  50);
							IDbDataParameter parFIELD_INDEX  = Sql.AddParameter(cmd, "@FIELD_INDEX" , nFIELD_INDEX   );
							IDbDataParameter parDATA_LABEL   = Sql.AddParameter(cmd, "@DATA_LABEL"  , sDATA_LABEL    , 150);
							IDbDataParameter parDATA_FIELD   = Sql.AddParameter(cmd, "@DATA_FIELD"  , sDATA_FIELD    , 1000);
							IDbDataParameter parDATA_FORMAT  = Sql.AddParameter(cmd, "@DATA_FORMAT" , sDATA_FORMAT   );
							IDbDataParameter parPARENT_FIELD = Sql.AddParameter(cmd, "@PARENT_FIELD", sPARENT_FIELD  ,  30);
							IDbDataParameter parCOLSPAN      = Sql.AddParameter(cmd, "@COLSPAN"     , nCOLSPAN       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsDependList
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsDependList(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sPARENT_FIELD, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDepend";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDependList";
				IDbDataParameter parDETAIL_NAME  = Sql.AddParameter(cmd, "@DETAIL_NAME" , sDETAIL_NAME   ,  50);
				IDbDataParameter parFIELD_INDEX  = Sql.AddParameter(cmd, "@FIELD_INDEX" , nFIELD_INDEX   );
				IDbDataParameter parDATA_LABEL   = Sql.AddParameter(cmd, "@DATA_LABEL"  , sDATA_LABEL    , 150);
				IDbDataParameter parDATA_FIELD   = Sql.AddParameter(cmd, "@DATA_FIELD"  , sDATA_FIELD    , 1000);
				IDbDataParameter parDATA_FORMAT  = Sql.AddParameter(cmd, "@DATA_FORMAT" , sDATA_FORMAT   );
				IDbDataParameter parPARENT_FIELD = Sql.AddParameter(cmd, "@PARENT_FIELD", sPARENT_FIELD  ,  30);
				IDbDataParameter parCOLSPAN      = Sql.AddParameter(cmd, "@COLSPAN"     , nCOLSPAN       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsDependList
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsDependList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDepend";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsDependList";
			IDbDataParameter parDETAIL_NAME  = Sql.CreateParameter(cmd, "@DETAIL_NAME" , "string",  50);
			IDbDataParameter parFIELD_INDEX  = Sql.CreateParameter(cmd, "@FIELD_INDEX" , "Int32",   4);
			IDbDataParameter parDATA_LABEL   = Sql.CreateParameter(cmd, "@DATA_LABEL"  , "string", 150);
			IDbDataParameter parDATA_FIELD   = Sql.CreateParameter(cmd, "@DATA_FIELD"  , "string", 1000);
			IDbDataParameter parDATA_FORMAT  = Sql.CreateParameter(cmd, "@DATA_FORMAT" , "string", 104857600);
			IDbDataParameter parPARENT_FIELD = Sql.CreateParameter(cmd, "@PARENT_FIELD", "string",  30);
			IDbDataParameter parCOLSPAN      = Sql.CreateParameter(cmd, "@COLSPAN"     , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsertOnly(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, Int32 nCOLSPAN, string sTOOL_TIP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnl";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnly";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parFIELD_TYPE  = Sql.AddParameter(cmd, "@FIELD_TYPE" , sFIELD_TYPE   ,  25);
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
							IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
							IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
							IDbDataParameter parLIST_NAME   = Sql.AddParameter(cmd, "@LIST_NAME"  , sLIST_NAME    ,  50);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							IDbDataParameter parTOOL_TIP    = Sql.AddParameter(cmd, "@TOOL_TIP"   , sTOOL_TIP     , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsertOnly(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, Int32 nCOLSPAN, string sTOOL_TIP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnl";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnly";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parFIELD_TYPE  = Sql.AddParameter(cmd, "@FIELD_TYPE" , sFIELD_TYPE   ,  25);
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
				IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
				IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
				IDbDataParameter parLIST_NAME   = Sql.AddParameter(cmd, "@LIST_NAME"  , sLIST_NAME    ,  50);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				IDbDataParameter parTOOL_TIP    = Sql.AddParameter(cmd, "@TOOL_TIP"   , sTOOL_TIP     , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsertOnly
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnl";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsertOnly";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parFIELD_TYPE  = Sql.CreateParameter(cmd, "@FIELD_TYPE" , "string",  25);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parURL_FIELD   = Sql.CreateParameter(cmd, "@URL_FIELD"  , "string", 104857600);
			IDbDataParameter parURL_FORMAT  = Sql.CreateParameter(cmd, "@URL_FORMAT" , "string", 104857600);
			IDbDataParameter parURL_TARGET  = Sql.CreateParameter(cmd, "@URL_TARGET" , "string",  60);
			IDbDataParameter parLIST_NAME   = Sql.CreateParameter(cmd, "@LIST_NAME"  , "string",  50);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			IDbDataParameter parTOOL_TIP    = Sql.CreateParameter(cmd, "@TOOL_TIP"   , "string", 150);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHeader
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsHeader(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHeader";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHeader
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsHeader(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHeader";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHeader
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsHeader(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHeader";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsHyperLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHyperLink
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsHyperLink(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperL";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperLink";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
							IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
							IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsHyperLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHyperLink
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsHyperLink(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperL";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperLink";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
				IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
				IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsHyperLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsHyperLink
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsHyperLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperL";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsHyperLink";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parURL_FIELD   = Sql.CreateParameter(cmd, "@URL_FIELD"  , "string", 104857600);
			IDbDataParameter parURL_FORMAT  = Sql.CreateParameter(cmd, "@URL_FORMAT" , "string", 104857600);
			IDbDataParameter parURL_TARGET  = Sql.CreateParameter(cmd, "@URL_TARGET" , "string",  60);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsJavaScript
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsJavaScript
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsJavaScript(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaSc";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaScript";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
							IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
							IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsJavaScript
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsJavaScript
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsJavaScript(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaSc";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaScript";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parURL_FIELD   = Sql.AddParameter(cmd, "@URL_FIELD"  , sURL_FIELD    );
				IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
				IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsJavaScript
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsJavaScript
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsJavaScript(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaSc";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsJavaScript";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parURL_FIELD   = Sql.CreateParameter(cmd, "@URL_FIELD"  , "string", 104857600);
			IDbDataParameter parURL_FORMAT  = Sql.CreateParameter(cmd, "@URL_FORMAT" , "string", 104857600);
			IDbDataParameter parURL_TARGET  = Sql.CreateParameter(cmd, "@URL_TARGET" , "string",  60);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsModule
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModule
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsModule(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parMODULE_TYPE = Sql.AddParameter(cmd, "@MODULE_TYPE", sMODULE_TYPE  ,  25);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsModule
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModule
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsModule(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parMODULE_TYPE = Sql.AddParameter(cmd, "@MODULE_TYPE", sMODULE_TYPE  ,  25);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsModule
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModule
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsModule(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parMODULE_TYPE = Sql.CreateParameter(cmd, "@MODULE_TYPE", "string",  25);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsModuleLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModuleLink
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsModuleLink(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FORMAT, string sURL_TARGET, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModuleLink";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
							IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
							IDbDataParameter parMODULE_TYPE = Sql.AddParameter(cmd, "@MODULE_TYPE", sMODULE_TYPE  ,  25);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsModuleLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModuleLink
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsModuleLink(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FORMAT, string sURL_TARGET, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModuleLink";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parURL_FORMAT  = Sql.AddParameter(cmd, "@URL_FORMAT" , sURL_FORMAT   );
				IDbDataParameter parURL_TARGET  = Sql.AddParameter(cmd, "@URL_TARGET" , sURL_TARGET   ,  60);
				IDbDataParameter parMODULE_TYPE = Sql.AddParameter(cmd, "@MODULE_TYPE", sMODULE_TYPE  ,  25);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsModuleLink
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsModuleLink
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsModuleLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModule";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsModuleLink";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parURL_FORMAT  = Sql.CreateParameter(cmd, "@URL_FORMAT" , "string", 104857600);
			IDbDataParameter parURL_TARGET  = Sql.CreateParameter(cmd, "@URL_TARGET" , "string",  60);
			IDbDataParameter parMODULE_TYPE = Sql.CreateParameter(cmd, "@MODULE_TYPE", "string",  25);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsSeparator
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsSeparator(string sDETAIL_NAME, Int32 nFIELD_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSepara";
							else
								cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSeparator";
							IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsSeparator
		/// </summary>
		public void spDETAILVIEWS_FIELDS_InsSeparator(string sDETAIL_NAME, Int32 nFIELD_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSepara";
				else
					cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSeparator";
				IDbDataParameter parDETAIL_NAME = Sql.AddParameter(cmd, "@DETAIL_NAME", sDETAIL_NAME  ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spDETAILVIEWS_FIELDS_InsSeparator
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_InsSeparator(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSepara";
			else
				cmd.CommandText = "spDETAILVIEWS_FIELDS_InsSeparator";
			IDbDataParameter parDETAIL_NAME = Sql.CreateParameter(cmd, "@DETAIL_NAME", "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_Update
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Update
		/// </summary>
		public void spDETAILVIEWS_FIELDS_Update(ref Guid gID, string sDETAIL_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, Int32 nCOLSPAN, string sTOOL_TIP, string sMODULE_TYPE, string sPARENT_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  25);
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 1000);
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       );
							IDbDataParameter parURL_FIELD        = Sql.AddParameter(cmd, "@URL_FIELD"       , sURL_FIELD         );
							IDbDataParameter parURL_FORMAT       = Sql.AddParameter(cmd, "@URL_FORMAT"      , sURL_FORMAT        );
							IDbDataParameter parURL_TARGET       = Sql.AddParameter(cmd, "@URL_TARGET"      , sURL_TARGET        ,  60);
							IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
							IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
							IDbDataParameter parPARENT_FIELD     = Sql.AddParameter(cmd, "@PARENT_FIELD"    , sPARENT_FIELD      ,  30);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_Update
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Update
		/// </summary>
		public void spDETAILVIEWS_FIELDS_Update(ref Guid gID, string sDETAIL_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, Int32 nCOLSPAN, string sTOOL_TIP, string sMODULE_TYPE, string sPARENT_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  25);
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 1000);
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       );
				IDbDataParameter parURL_FIELD        = Sql.AddParameter(cmd, "@URL_FIELD"       , sURL_FIELD         );
				IDbDataParameter parURL_FORMAT       = Sql.AddParameter(cmd, "@URL_FORMAT"      , sURL_FORMAT        );
				IDbDataParameter parURL_TARGET       = Sql.AddParameter(cmd, "@URL_TARGET"      , sURL_TARGET        ,  60);
				IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
				IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
				IDbDataParameter parPARENT_FIELD     = Sql.AddParameter(cmd, "@PARENT_FIELD"    , sPARENT_FIELD      ,  30);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_Update
		/// <summary>
		/// spDETAILVIEWS_FIELDS_Update
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parFIELD_TYPE       = Sql.CreateParameter(cmd, "@FIELD_TYPE"      , "string",  25);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 1000);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_FIELD        = Sql.CreateParameter(cmd, "@URL_FIELD"       , "string", 104857600);
			IDbDataParameter parURL_FORMAT       = Sql.CreateParameter(cmd, "@URL_FORMAT"      , "string", 104857600);
			IDbDataParameter parURL_TARGET       = Sql.CreateParameter(cmd, "@URL_TARGET"      , "string",  60);
			IDbDataParameter parLIST_NAME        = Sql.CreateParameter(cmd, "@LIST_NAME"       , "string",  50);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parTOOL_TIP         = Sql.CreateParameter(cmd, "@TOOL_TIP"        , "string", 150);
			IDbDataParameter parMODULE_TYPE      = Sql.CreateParameter(cmd, "@MODULE_TYPE"     , "string",  25);
			IDbDataParameter parPARENT_FIELD     = Sql.CreateParameter(cmd, "@PARENT_FIELD"    , "string",  30);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateTip
		/// </summary>
		public void spDETAILVIEWS_FIELDS_UpdateTip(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sTOOL_TIP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateTip";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateTip
		/// </summary>
		public void spDETAILVIEWS_FIELDS_UpdateTip(string sDETAIL_NAME, Int32 nFIELD_INDEX, string sTOOL_TIP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateTip";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateTip
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_UpdateTip(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateTip";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parTOOL_TIP         = Sql.CreateParameter(cmd, "@TOOL_TIP"        , "string", 150);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_UpdateUrl
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateUrl
		/// </summary>
		public void spDETAILVIEWS_FIELDS_UpdateUrl(string sDETAIL_NAME, string sDATA_FIELD, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateUrl";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 1000);
							IDbDataParameter parURL_FIELD        = Sql.AddParameter(cmd, "@URL_FIELD"       , sURL_FIELD         );
							IDbDataParameter parURL_FORMAT       = Sql.AddParameter(cmd, "@URL_FORMAT"      , sURL_FORMAT        );
							IDbDataParameter parURL_TARGET       = Sql.AddParameter(cmd, "@URL_TARGET"      , sURL_TARGET        ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_FIELDS_UpdateUrl
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateUrl
		/// </summary>
		public void spDETAILVIEWS_FIELDS_UpdateUrl(string sDETAIL_NAME, string sDATA_FIELD, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateUrl";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 1000);
				IDbDataParameter parURL_FIELD        = Sql.AddParameter(cmd, "@URL_FIELD"       , sURL_FIELD         );
				IDbDataParameter parURL_FORMAT       = Sql.AddParameter(cmd, "@URL_FORMAT"      , sURL_FORMAT        );
				IDbDataParameter parURL_TARGET       = Sql.AddParameter(cmd, "@URL_TARGET"      , sURL_TARGET        ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_FIELDS_UpdateUrl
		/// <summary>
		/// spDETAILVIEWS_FIELDS_UpdateUrl
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_FIELDS_UpdateUrl(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_FIELDS_UpdateUrl";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 1000);
			IDbDataParameter parURL_FIELD        = Sql.CreateParameter(cmd, "@URL_FIELD"       , "string", 104857600);
			IDbDataParameter parURL_FORMAT       = Sql.CreateParameter(cmd, "@URL_FORMAT"      , "string", 104857600);
			IDbDataParameter parURL_TARGET       = Sql.CreateParameter(cmd, "@URL_TARGET"      , "string",  60);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_InsertOnly";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
							IDbDataParameter parVIEW_NAME    = Sql.AddParameter(cmd, "@VIEW_NAME"   , sVIEW_NAME     ,  50);
							IDbDataParameter parLABEL_WIDTH  = Sql.AddParameter(cmd, "@LABEL_WIDTH" , sLABEL_WIDTH   ,  10);
							IDbDataParameter parFIELD_WIDTH  = Sql.AddParameter(cmd, "@FIELD_WIDTH" , sFIELD_WIDTH   ,  10);
							IDbDataParameter parDATA_COLUMNS = Sql.AddParameter(cmd, "@DATA_COLUMNS", nDATA_COLUMNS  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_InsertOnly";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
				IDbDataParameter parVIEW_NAME    = Sql.AddParameter(cmd, "@VIEW_NAME"   , sVIEW_NAME     ,  50);
				IDbDataParameter parLABEL_WIDTH  = Sql.AddParameter(cmd, "@LABEL_WIDTH" , sLABEL_WIDTH   ,  10);
				IDbDataParameter parFIELD_WIDTH  = Sql.AddParameter(cmd, "@FIELD_WIDTH" , sFIELD_WIDTH   ,  10);
				IDbDataParameter parDATA_COLUMNS = Sql.AddParameter(cmd, "@DATA_COLUMNS", nDATA_COLUMNS  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_InsertOnly
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_InsertOnly";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string",  50);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  25);
			IDbDataParameter parVIEW_NAME    = Sql.CreateParameter(cmd, "@VIEW_NAME"   , "string",  50);
			IDbDataParameter parLABEL_WIDTH  = Sql.CreateParameter(cmd, "@LABEL_WIDTH" , "string",  10);
			IDbDataParameter parFIELD_WIDTH  = Sql.CreateParameter(cmd, "@FIELD_WIDTH" , "string",  10);
			IDbDataParameter parDATA_COLUMNS = Sql.CreateParameter(cmd, "@DATA_COLUMNS", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_De";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_De";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_De";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Disable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Di";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Disable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Disable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Di";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Disable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Di";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Disable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Down(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Do";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Down";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Down(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Do";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Down";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Down(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Do";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Down";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Enable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_En";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Enable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Enable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_En";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Enable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_En";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Enable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_InsertOnly(string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, string sTITLE, string sTABLE_NAME, string sPRIMARY_FIELD, string sSORT_FIELD, string sSORT_DIRECTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_In";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_InsertOnly";
							IDbDataParameter parDETAIL_NAME        = Sql.AddParameter(cmd, "@DETAIL_NAME"       , sDETAIL_NAME         ,  50);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  50);
							IDbDataParameter parCONTROL_NAME       = Sql.AddParameter(cmd, "@CONTROL_NAME"      , sCONTROL_NAME        , 100);
							IDbDataParameter parRELATIONSHIP_ORDER = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER", nRELATIONSHIP_ORDER  );
							IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               , 100);
							IDbDataParameter parTABLE_NAME         = Sql.AddParameter(cmd, "@TABLE_NAME"        , sTABLE_NAME          ,  50);
							IDbDataParameter parPRIMARY_FIELD      = Sql.AddParameter(cmd, "@PRIMARY_FIELD"     , sPRIMARY_FIELD       , 255);
							IDbDataParameter parSORT_FIELD         = Sql.AddParameter(cmd, "@SORT_FIELD"        , sSORT_FIELD          ,  50);
							IDbDataParameter parSORT_DIRECTION     = Sql.AddParameter(cmd, "@SORT_DIRECTION"    , sSORT_DIRECTION      ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_InsertOnly(string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, string sTITLE, string sTABLE_NAME, string sPRIMARY_FIELD, string sSORT_FIELD, string sSORT_DIRECTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_In";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_InsertOnly";
				IDbDataParameter parDETAIL_NAME        = Sql.AddParameter(cmd, "@DETAIL_NAME"       , sDETAIL_NAME         ,  50);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  50);
				IDbDataParameter parCONTROL_NAME       = Sql.AddParameter(cmd, "@CONTROL_NAME"      , sCONTROL_NAME        , 100);
				IDbDataParameter parRELATIONSHIP_ORDER = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER", nRELATIONSHIP_ORDER  );
				IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               , 100);
				IDbDataParameter parTABLE_NAME         = Sql.AddParameter(cmd, "@TABLE_NAME"        , sTABLE_NAME          ,  50);
				IDbDataParameter parPRIMARY_FIELD      = Sql.AddParameter(cmd, "@PRIMARY_FIELD"     , sPRIMARY_FIELD       , 255);
				IDbDataParameter parSORT_FIELD         = Sql.AddParameter(cmd, "@SORT_FIELD"        , sSORT_FIELD          ,  50);
				IDbDataParameter parSORT_DIRECTION     = Sql.AddParameter(cmd, "@SORT_DIRECTION"    , sSORT_DIRECTION      ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_In";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_InsertOnly";
			IDbDataParameter parDETAIL_NAME        = Sql.CreateParameter(cmd, "@DETAIL_NAME"       , "string",  50);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  50);
			IDbDataParameter parCONTROL_NAME       = Sql.CreateParameter(cmd, "@CONTROL_NAME"      , "string", 100);
			IDbDataParameter parRELATIONSHIP_ORDER = Sql.CreateParameter(cmd, "@RELATIONSHIP_ORDER", "Int32",   4);
			IDbDataParameter parTITLE              = Sql.CreateParameter(cmd, "@TITLE"             , "string", 100);
			IDbDataParameter parTABLE_NAME         = Sql.CreateParameter(cmd, "@TABLE_NAME"        , "string",  50);
			IDbDataParameter parPRIMARY_FIELD      = Sql.CreateParameter(cmd, "@PRIMARY_FIELD"     , "string", 255);
			IDbDataParameter parSORT_FIELD         = Sql.CreateParameter(cmd, "@SORT_FIELD"        , "string",  50);
			IDbDataParameter parSORT_DIRECTION     = Sql.CreateParameter(cmd, "@SORT_DIRECTION"    , "string",  10);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Item(string sDETAIL_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_It";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Item";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Item(string sDETAIL_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_It";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Item";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDETAIL_NAME      = Sql.AddParameter(cmd, "@DETAIL_NAME"     , sDETAIL_NAME       ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Item(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_It";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Item";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDETAIL_NAME      = Sql.CreateParameter(cmd, "@DETAIL_NAME"     , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Mo";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Mo";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Mo";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Update(ref Guid gID, string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, string sTITLE, string sTABLE_NAME, string sPRIMARY_FIELD, string sSORT_FIELD, string sSORT_DIRECTION, bool bRELATIONSHIP_ENABLED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Up";
							else
								cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Update";
							IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
							IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
							IDbDataParameter parDETAIL_NAME          = Sql.AddParameter(cmd, "@DETAIL_NAME"         , sDETAIL_NAME           ,  50);
							IDbDataParameter parMODULE_NAME          = Sql.AddParameter(cmd, "@MODULE_NAME"         , sMODULE_NAME           ,  50);
							IDbDataParameter parCONTROL_NAME         = Sql.AddParameter(cmd, "@CONTROL_NAME"        , sCONTROL_NAME          , 100);
							IDbDataParameter parRELATIONSHIP_ORDER   = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"  , nRELATIONSHIP_ORDER    );
							IDbDataParameter parTITLE                = Sql.AddParameter(cmd, "@TITLE"               , sTITLE                 , 100);
							IDbDataParameter parTABLE_NAME           = Sql.AddParameter(cmd, "@TABLE_NAME"          , sTABLE_NAME            ,  50);
							IDbDataParameter parPRIMARY_FIELD        = Sql.AddParameter(cmd, "@PRIMARY_FIELD"       , sPRIMARY_FIELD         , 255);
							IDbDataParameter parSORT_FIELD           = Sql.AddParameter(cmd, "@SORT_FIELD"          , sSORT_FIELD            ,  50);
							IDbDataParameter parSORT_DIRECTION       = Sql.AddParameter(cmd, "@SORT_DIRECTION"      , sSORT_DIRECTION        ,  10);
							IDbDataParameter parRELATIONSHIP_ENABLED = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED", bRELATIONSHIP_ENABLED  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public void spDETAILVIEWS_RELATIONSHIPS_Update(ref Guid gID, string sDETAIL_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, string sTITLE, string sTABLE_NAME, string sPRIMARY_FIELD, string sSORT_FIELD, string sSORT_DIRECTION, bool bRELATIONSHIP_ENABLED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Up";
				else
					cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Update";
				IDbDataParameter parID                   = Sql.AddParameter(cmd, "@ID"                  , gID                    );
				IDbDataParameter parMODIFIED_USER_ID     = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"    ,  Security.USER_ID      );
				IDbDataParameter parDETAIL_NAME          = Sql.AddParameter(cmd, "@DETAIL_NAME"         , sDETAIL_NAME           ,  50);
				IDbDataParameter parMODULE_NAME          = Sql.AddParameter(cmd, "@MODULE_NAME"         , sMODULE_NAME           ,  50);
				IDbDataParameter parCONTROL_NAME         = Sql.AddParameter(cmd, "@CONTROL_NAME"        , sCONTROL_NAME          , 100);
				IDbDataParameter parRELATIONSHIP_ORDER   = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"  , nRELATIONSHIP_ORDER    );
				IDbDataParameter parTITLE                = Sql.AddParameter(cmd, "@TITLE"               , sTITLE                 , 100);
				IDbDataParameter parTABLE_NAME           = Sql.AddParameter(cmd, "@TABLE_NAME"          , sTABLE_NAME            ,  50);
				IDbDataParameter parPRIMARY_FIELD        = Sql.AddParameter(cmd, "@PRIMARY_FIELD"       , sPRIMARY_FIELD         , 255);
				IDbDataParameter parSORT_FIELD           = Sql.AddParameter(cmd, "@SORT_FIELD"          , sSORT_FIELD            ,  50);
				IDbDataParameter parSORT_DIRECTION       = Sql.AddParameter(cmd, "@SORT_DIRECTION"      , sSORT_DIRECTION        ,  10);
				IDbDataParameter parRELATIONSHIP_ENABLED = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED", bRELATIONSHIP_ENABLED  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDETAILVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spDETAILVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_RELATIONSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Up";
			else
				cmd.CommandText = "spDETAILVIEWS_RELATIONSHIPS_Update";
			IDbDataParameter parID                   = Sql.CreateParameter(cmd, "@ID"                  , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID     = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"    , "Guid",  16);
			IDbDataParameter parDETAIL_NAME          = Sql.CreateParameter(cmd, "@DETAIL_NAME"         , "string",  50);
			IDbDataParameter parMODULE_NAME          = Sql.CreateParameter(cmd, "@MODULE_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_NAME         = Sql.CreateParameter(cmd, "@CONTROL_NAME"        , "string", 100);
			IDbDataParameter parRELATIONSHIP_ORDER   = Sql.CreateParameter(cmd, "@RELATIONSHIP_ORDER"  , "Int32",   4);
			IDbDataParameter parTITLE                = Sql.CreateParameter(cmd, "@TITLE"               , "string", 100);
			IDbDataParameter parTABLE_NAME           = Sql.CreateParameter(cmd, "@TABLE_NAME"          , "string",  50);
			IDbDataParameter parPRIMARY_FIELD        = Sql.CreateParameter(cmd, "@PRIMARY_FIELD"       , "string", 255);
			IDbDataParameter parSORT_FIELD           = Sql.CreateParameter(cmd, "@SORT_FIELD"          , "string",  50);
			IDbDataParameter parSORT_DIRECTION       = Sql.CreateParameter(cmd, "@SORT_DIRECTION"      , "string",  10);
			IDbDataParameter parRELATIONSHIP_ENABLED = Sql.CreateParameter(cmd, "@RELATIONSHIP_ENABLED", "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_Update
		/// <summary>
		/// spDETAILVIEWS_Update
		/// </summary>
		public void spDETAILVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parLABEL_WIDTH        = Sql.AddParameter(cmd, "@LABEL_WIDTH"       , sLABEL_WIDTH         ,  10);
							IDbDataParameter parFIELD_WIDTH        = Sql.AddParameter(cmd, "@FIELD_WIDTH"       , sFIELD_WIDTH         ,  10);
							IDbDataParameter parDATA_COLUMNS       = Sql.AddParameter(cmd, "@DATA_COLUMNS"      , nDATA_COLUMNS        );
							IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
							IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
							IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_Update
		/// <summary>
		/// spDETAILVIEWS_Update
		/// </summary>
		public void spDETAILVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parLABEL_WIDTH        = Sql.AddParameter(cmd, "@LABEL_WIDTH"       , sLABEL_WIDTH         ,  10);
				IDbDataParameter parFIELD_WIDTH        = Sql.AddParameter(cmd, "@FIELD_WIDTH"       , sFIELD_WIDTH         ,  10);
				IDbDataParameter parDATA_COLUMNS       = Sql.AddParameter(cmd, "@DATA_COLUMNS"      , nDATA_COLUMNS        );
				IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
				IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
				IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDETAILVIEWS_Update
		/// <summary>
		/// spDETAILVIEWS_Update
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parLABEL_WIDTH        = Sql.CreateParameter(cmd, "@LABEL_WIDTH"       , "string",  10);
			IDbDataParameter parFIELD_WIDTH        = Sql.CreateParameter(cmd, "@FIELD_WIDTH"       , "string",  10);
			IDbDataParameter parDATA_COLUMNS       = Sql.CreateParameter(cmd, "@DATA_COLUMNS"      , "Int32",   4);
			IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID", "Guid",  16);
			IDbDataParameter parSCRIPT             = Sql.CreateParameter(cmd, "@SCRIPT"            , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spDETAILVIEWS_UpdateEvents
		/// <summary>
		/// spDETAILVIEWS_UpdateEvents
		/// </summary>
		public void spDETAILVIEWS_UpdateEvents(string sNAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDETAILVIEWS_UpdateEvents";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
							IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
							IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDETAILVIEWS_UpdateEvents
		/// <summary>
		/// spDETAILVIEWS_UpdateEvents
		/// </summary>
		public void spDETAILVIEWS_UpdateEvents(string sNAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDETAILVIEWS_UpdateEvents";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
				IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
				IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDETAILVIEWS_UpdateEvents
		/// <summary>
		/// spDETAILVIEWS_UpdateEvents
		/// </summary>
		public IDbCommand cmdDETAILVIEWS_UpdateEvents(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDETAILVIEWS_UpdateEvents";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID", "Guid",  16);
			IDbDataParameter parSCRIPT             = Sql.CreateParameter(cmd, "@SCRIPT"            , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_CopyDefault
		/// <summary>
		/// spDYNAMIC_BUTTONS_CopyDefault
		/// </summary>
		public void spDYNAMIC_BUTTONS_CopyDefault(string sSOURCE_VIEW_NAME, string sNEW_VIEW_NAME, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_CopyDefault";
							IDbDataParameter parSOURCE_VIEW_NAME = Sql.AddParameter(cmd, "@SOURCE_VIEW_NAME", sSOURCE_VIEW_NAME  ,  50);
							IDbDataParameter parNEW_VIEW_NAME    = Sql.AddParameter(cmd, "@NEW_VIEW_NAME"   , sNEW_VIEW_NAME     ,  50);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_CopyDefault
		/// <summary>
		/// spDYNAMIC_BUTTONS_CopyDefault
		/// </summary>
		public void spDYNAMIC_BUTTONS_CopyDefault(string sSOURCE_VIEW_NAME, string sNEW_VIEW_NAME, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_CopyDefault";
				IDbDataParameter parSOURCE_VIEW_NAME = Sql.AddParameter(cmd, "@SOURCE_VIEW_NAME", sSOURCE_VIEW_NAME  ,  50);
				IDbDataParameter parNEW_VIEW_NAME    = Sql.AddParameter(cmd, "@NEW_VIEW_NAME"   , sNEW_VIEW_NAME     ,  50);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_CopyDefault
		/// <summary>
		/// spDYNAMIC_BUTTONS_CopyDefault
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_CopyDefault(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_CopyDefault";
			IDbDataParameter parSOURCE_VIEW_NAME = Sql.CreateParameter(cmd, "@SOURCE_VIEW_NAME", "string",  50);
			IDbDataParameter parNEW_VIEW_NAME    = Sql.CreateParameter(cmd, "@NEW_VIEW_NAME"   , "string",  50);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_Delete
		/// <summary>
		/// spDYNAMIC_BUTTONS_Delete
		/// </summary>
		public void spDYNAMIC_BUTTONS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_Delete
		/// <summary>
		/// spDYNAMIC_BUTTONS_Delete
		/// </summary>
		public void spDYNAMIC_BUTTONS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_Delete
		/// <summary>
		/// spDYNAMIC_BUTTONS_Delete
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsButton
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButton
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsButton(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCOMMAND_NAME, string sARGUMENT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sONCLICK_SCRIPT, bool bMOBILE_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsButton";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
							IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsButton
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButton
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsButton(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCOMMAND_NAME, string sARGUMENT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsButton";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
				IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsButton
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButton
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsButton(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsButton";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parCOMMAND_NAME       = Sql.CreateParameter(cmd, "@COMMAND_NAME"      , "string",  50);
			IDbDataParameter parARGUMENT_FIELD     = Sql.CreateParameter(cmd, "@ARGUMENT_FIELD"    , "string", 200);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsButtonLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButtonLink
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsButtonLink(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCOMMAND_NAME, string sURL_FORMAT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sURL_TARGET, bool bMOBILE_ONLY, string sONCLICK_SCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLin";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLink";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsButtonLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButtonLink
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsButtonLink(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCOMMAND_NAME, string sURL_FORMAT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sURL_TARGET, bool bMOBILE_ONLY, string sONCLICK_SCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLin";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLink";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsButtonLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsButtonLink
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsButtonLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLin";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsButtonLink";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parCOMMAND_NAME       = Sql.CreateParameter(cmd, "@COMMAND_NAME"      , "string",  50);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 255);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  20);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancel
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsCancel(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, bool bMOBILE_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancel";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							IDbDataParameter parMOBILE_ONLY   = Sql.AddParameter(cmd, "@MOBILE_ONLY"  , bMOBILE_ONLY    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancel
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsCancel(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, bool bMOBILE_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancel";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				IDbDataParameter parMOBILE_ONLY   = Sql.AddParameter(cmd, "@MOBILE_ONLY"  , bMOBILE_ONLY    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancel
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsCancel(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancel";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			IDbDataParameter parMOBILE_ONLY   = Sql.CreateParameter(cmd, "@MOBILE_ONLY"  , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsCancelEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancelEdit
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsCancelEdit(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdi";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdit";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsCancelEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancelEdit
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsCancelEdit(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdi";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdit";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsCancelEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsCancelEdit
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsCancelEdit(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdi";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsCancelEdit";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsDelete
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDelete
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsDelete(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsDelete";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsDelete
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDelete
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsDelete(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsDelete";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsDelete
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDelete
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsDelete";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDuplicate
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsDuplicate(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsDuplicate";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDuplicate
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsDuplicate(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsDuplicate";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsDuplicate
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsDuplicate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsDuplicate";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsEdit
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsEdit(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsEdit";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsEdit
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsEdit(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsEdit";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsEdit
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsEdit
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsEdit(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsEdit";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsertOnly
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsertOnly
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsertOnly(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sCONTROL_TYPE, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sCONTROL_CSSCLASS, string sTEXT_FIELD, string sARGUMENT_FIELD, string sCOMMAND_NAME, string sURL_FORMAT, string sURL_TARGET, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, bool bADMIN_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsertOnly";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parCONTROL_TYPE       = Sql.AddParameter(cmd, "@CONTROL_TYPE"      , sCONTROL_TYPE        ,  25);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parCONTROL_CSSCLASS   = Sql.AddParameter(cmd, "@CONTROL_CSSCLASS"  , sCONTROL_CSSCLASS    ,  50);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
							IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							IDbDataParameter parADMIN_ONLY         = Sql.AddParameter(cmd, "@ADMIN_ONLY"        , bADMIN_ONLY          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsertOnly
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsertOnly
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsertOnly(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sCONTROL_TYPE, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sCONTROL_CSSCLASS, string sTEXT_FIELD, string sARGUMENT_FIELD, string sCOMMAND_NAME, string sURL_FORMAT, string sURL_TARGET, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, bool bADMIN_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsertOnly";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parCONTROL_TYPE       = Sql.AddParameter(cmd, "@CONTROL_TYPE"      , sCONTROL_TYPE        ,  25);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parCONTROL_CSSCLASS   = Sql.AddParameter(cmd, "@CONTROL_CSSCLASS"  , sCONTROL_CSSCLASS    ,  50);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
				IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				IDbDataParameter parADMIN_ONLY         = Sql.AddParameter(cmd, "@ADMIN_ONLY"        , bADMIN_ONLY          );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsertOnly
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsertOnly
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsertOnly";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parCONTROL_TYPE       = Sql.CreateParameter(cmd, "@CONTROL_TYPE"      , "string",  25);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parCONTROL_CSSCLASS   = Sql.CreateParameter(cmd, "@CONTROL_CSSCLASS"  , "string",  50);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parARGUMENT_FIELD     = Sql.CreateParameter(cmd, "@ARGUMENT_FIELD"    , "string", 200);
			IDbDataParameter parCOMMAND_NAME       = Sql.CreateParameter(cmd, "@COMMAND_NAME"      , "string",  50);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 255);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  20);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			IDbDataParameter parADMIN_ONLY         = Sql.CreateParameter(cmd, "@ADMIN_ONLY"        , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsHyperLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsHyperLink
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsHyperLink(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sURL_FORMAT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sONCLICK_SCRIPT, string sURL_TARGET, bool bMOBILE_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsHyperLink";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsHyperLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsHyperLink
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsHyperLink(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sURL_FORMAT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sONCLICK_SCRIPT, string sURL_TARGET, bool bMOBILE_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsHyperLink";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsHyperLink
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsHyperLink
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsHyperLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsHyperLink";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 255);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  20);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopup
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopup
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopup(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sONCLICK_SCRIPT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sARGUMENT_FIELD, bool bMOBILE_ONLY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopup";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopup
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopup
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopup(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sONCLICK_SCRIPT, string sTEXT_FIELD, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sARGUMENT_FIELD, bool bMOBILE_ONLY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopup";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      , 255);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsPopup
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopup
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsPopup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopup";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 255);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parARGUMENT_FIELD     = Sql.CreateParameter(cmd, "@ARGUMENT_FIELD"    , "string", 200);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopupCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupCancel
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopupCancel(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCanc";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCancel";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopupCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupCancel
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopupCancel(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCanc";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCancel";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsPopupCancel
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupCancel
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsPopupCancel(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCanc";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupCancel";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopupClear
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupClear
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopupClear(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClea";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClear";
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsPopupClear
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupClear
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsPopupClear(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClea";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClear";
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsPopupClear
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsPopupClear
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsPopupClear(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClea";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsPopupClear";
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSave
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSave
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSave(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsSave";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSave
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSave
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSave(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSave";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsSave
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSave
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsSave(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsSave";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveConcurrency(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcu";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcurrency";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveConcurrency(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcu";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcurrency";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsSaveConcurrency
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveConcurrency
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsSaveConcurrency(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcu";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveConcurrency";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveDuplicate(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDupli";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDuplicate";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveDuplicate(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDupli";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDuplicate";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsSaveDuplicate
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveDuplicate
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsSaveDuplicate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDupli";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveDuplicate";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveNew
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveNew
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveNew(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveNew";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsSaveNew
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveNew
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsSaveNew(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveNew";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsSaveNew
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsSaveNew
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsSaveNew(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsSaveNew";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsViewLog
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsViewLog
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsViewLog(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_InsViewLog";
							IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
							IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
							IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_InsViewLog
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsViewLog
		/// </summary>
		public void spDYNAMIC_BUTTONS_InsViewLog(string sVIEW_NAME, Int32 nCONTROL_INDEX, string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_InsViewLog";
				IDbDataParameter parVIEW_NAME     = Sql.AddParameter(cmd, "@VIEW_NAME"    , sVIEW_NAME      ,  50);
				IDbDataParameter parCONTROL_INDEX = Sql.AddParameter(cmd, "@CONTROL_INDEX", nCONTROL_INDEX  );
				IDbDataParameter parMODULE_NAME   = Sql.AddParameter(cmd, "@MODULE_NAME"  , sMODULE_NAME    ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_InsViewLog
		/// <summary>
		/// spDYNAMIC_BUTTONS_InsViewLog
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_InsViewLog(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_InsViewLog";
			IDbDataParameter parVIEW_NAME     = Sql.CreateParameter(cmd, "@VIEW_NAME"    , "string",  50);
			IDbDataParameter parCONTROL_INDEX = Sql.CreateParameter(cmd, "@CONTROL_INDEX", "Int32",   4);
			IDbDataParameter parMODULE_NAME   = Sql.CreateParameter(cmd, "@MODULE_NAME"  , "string",  25);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDo";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDo";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_ORDER_MoveDown
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveDown
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_ORDER_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDo";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveItem(string sVIEW_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveIt";
							else
								cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parVIEW_NAME        = Sql.AddParameter(cmd, "@VIEW_NAME"       , sVIEW_NAME         ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveItem(string sVIEW_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveIt";
				else
					cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parVIEW_NAME        = Sql.AddParameter(cmd, "@VIEW_NAME"       , sVIEW_NAME         ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_ORDER_MoveItem
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveItem
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_ORDER_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveIt";
			else
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parVIEW_NAME        = Sql.CreateParameter(cmd, "@VIEW_NAME"       , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// </summary>
		public void spDYNAMIC_BUTTONS_ORDER_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_ORDER_MoveUp
		/// <summary>
		/// spDYNAMIC_BUTTONS_ORDER_MoveUp
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_ORDER_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_ORDER_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spDYNAMIC_BUTTONS_Update
		/// <summary>
		/// spDYNAMIC_BUTTONS_Update
		/// </summary>
		public void spDYNAMIC_BUTTONS_Update(ref Guid gID, string sVIEW_NAME, Int32 nCONTROL_INDEX, string sCONTROL_TYPE, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sCONTROL_CSSCLASS, string sTEXT_FIELD, string sARGUMENT_FIELD, string sCOMMAND_NAME, string sURL_FORMAT, string sURL_TARGET, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, bool bADMIN_ONLY, bool bEXCLUDE_MOBILE, bool bHIDDEN, string sBUSINESS_RULE, string sBUSINESS_SCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spDYNAMIC_BUTTONS_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
							IDbDataParameter parCONTROL_TYPE       = Sql.AddParameter(cmd, "@CONTROL_TYPE"      , sCONTROL_TYPE        ,  25);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
							IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
							IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
							IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
							IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
							IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
							IDbDataParameter parCONTROL_CSSCLASS   = Sql.AddParameter(cmd, "@CONTROL_CSSCLASS"  , sCONTROL_CSSCLASS    ,  50);
							IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
							IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
							IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
							IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      );
							IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
							IDbDataParameter parADMIN_ONLY         = Sql.AddParameter(cmd, "@ADMIN_ONLY"        , bADMIN_ONLY          );
							IDbDataParameter parEXCLUDE_MOBILE     = Sql.AddParameter(cmd, "@EXCLUDE_MOBILE"    , bEXCLUDE_MOBILE      );
							IDbDataParameter parHIDDEN             = Sql.AddParameter(cmd, "@HIDDEN"            , bHIDDEN              );
							IDbDataParameter parBUSINESS_RULE      = Sql.AddParameter(cmd, "@BUSINESS_RULE"     , sBUSINESS_RULE       );
							IDbDataParameter parBUSINESS_SCRIPT    = Sql.AddParameter(cmd, "@BUSINESS_SCRIPT"   , sBUSINESS_SCRIPT     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spDYNAMIC_BUTTONS_Update
		/// <summary>
		/// spDYNAMIC_BUTTONS_Update
		/// </summary>
		public void spDYNAMIC_BUTTONS_Update(ref Guid gID, string sVIEW_NAME, Int32 nCONTROL_INDEX, string sCONTROL_TYPE, string sMODULE_NAME, string sMODULE_ACCESS_TYPE, string sTARGET_NAME, string sTARGET_ACCESS_TYPE, string sCONTROL_TEXT, string sCONTROL_TOOLTIP, string sCONTROL_ACCESSKEY, string sCONTROL_CSSCLASS, string sTEXT_FIELD, string sARGUMENT_FIELD, string sCOMMAND_NAME, string sURL_FORMAT, string sURL_TARGET, string sONCLICK_SCRIPT, bool bMOBILE_ONLY, bool bADMIN_ONLY, bool bEXCLUDE_MOBILE, bool bHIDDEN, string sBUSINESS_RULE, string sBUSINESS_SCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spDYNAMIC_BUTTONS_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parCONTROL_INDEX      = Sql.AddParameter(cmd, "@CONTROL_INDEX"     , nCONTROL_INDEX       );
				IDbDataParameter parCONTROL_TYPE       = Sql.AddParameter(cmd, "@CONTROL_TYPE"      , sCONTROL_TYPE        ,  25);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parMODULE_ACCESS_TYPE = Sql.AddParameter(cmd, "@MODULE_ACCESS_TYPE", sMODULE_ACCESS_TYPE  , 100);
				IDbDataParameter parTARGET_NAME        = Sql.AddParameter(cmd, "@TARGET_NAME"       , sTARGET_NAME         ,  25);
				IDbDataParameter parTARGET_ACCESS_TYPE = Sql.AddParameter(cmd, "@TARGET_ACCESS_TYPE", sTARGET_ACCESS_TYPE  , 100);
				IDbDataParameter parCONTROL_TEXT       = Sql.AddParameter(cmd, "@CONTROL_TEXT"      , sCONTROL_TEXT        , 150);
				IDbDataParameter parCONTROL_TOOLTIP    = Sql.AddParameter(cmd, "@CONTROL_TOOLTIP"   , sCONTROL_TOOLTIP     , 150);
				IDbDataParameter parCONTROL_ACCESSKEY  = Sql.AddParameter(cmd, "@CONTROL_ACCESSKEY" , sCONTROL_ACCESSKEY   , 150);
				IDbDataParameter parCONTROL_CSSCLASS   = Sql.AddParameter(cmd, "@CONTROL_CSSCLASS"  , sCONTROL_CSSCLASS    ,  50);
				IDbDataParameter parTEXT_FIELD         = Sql.AddParameter(cmd, "@TEXT_FIELD"        , sTEXT_FIELD          , 200);
				IDbDataParameter parARGUMENT_FIELD     = Sql.AddParameter(cmd, "@ARGUMENT_FIELD"    , sARGUMENT_FIELD      , 200);
				IDbDataParameter parCOMMAND_NAME       = Sql.AddParameter(cmd, "@COMMAND_NAME"      , sCOMMAND_NAME        ,  50);
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          , 255);
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  20);
				IDbDataParameter parONCLICK_SCRIPT     = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"    , sONCLICK_SCRIPT      );
				IDbDataParameter parMOBILE_ONLY        = Sql.AddParameter(cmd, "@MOBILE_ONLY"       , bMOBILE_ONLY         );
				IDbDataParameter parADMIN_ONLY         = Sql.AddParameter(cmd, "@ADMIN_ONLY"        , bADMIN_ONLY          );
				IDbDataParameter parEXCLUDE_MOBILE     = Sql.AddParameter(cmd, "@EXCLUDE_MOBILE"    , bEXCLUDE_MOBILE      );
				IDbDataParameter parHIDDEN             = Sql.AddParameter(cmd, "@HIDDEN"            , bHIDDEN              );
				IDbDataParameter parBUSINESS_RULE      = Sql.AddParameter(cmd, "@BUSINESS_RULE"     , sBUSINESS_RULE       );
				IDbDataParameter parBUSINESS_SCRIPT    = Sql.AddParameter(cmd, "@BUSINESS_SCRIPT"   , sBUSINESS_SCRIPT     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdDYNAMIC_BUTTONS_Update
		/// <summary>
		/// spDYNAMIC_BUTTONS_Update
		/// </summary>
		public IDbCommand cmdDYNAMIC_BUTTONS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spDYNAMIC_BUTTONS_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parCONTROL_INDEX      = Sql.CreateParameter(cmd, "@CONTROL_INDEX"     , "Int32",   4);
			IDbDataParameter parCONTROL_TYPE       = Sql.CreateParameter(cmd, "@CONTROL_TYPE"      , "string",  25);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parMODULE_ACCESS_TYPE = Sql.CreateParameter(cmd, "@MODULE_ACCESS_TYPE", "string", 100);
			IDbDataParameter parTARGET_NAME        = Sql.CreateParameter(cmd, "@TARGET_NAME"       , "string",  25);
			IDbDataParameter parTARGET_ACCESS_TYPE = Sql.CreateParameter(cmd, "@TARGET_ACCESS_TYPE", "string", 100);
			IDbDataParameter parCONTROL_TEXT       = Sql.CreateParameter(cmd, "@CONTROL_TEXT"      , "string", 150);
			IDbDataParameter parCONTROL_TOOLTIP    = Sql.CreateParameter(cmd, "@CONTROL_TOOLTIP"   , "string", 150);
			IDbDataParameter parCONTROL_ACCESSKEY  = Sql.CreateParameter(cmd, "@CONTROL_ACCESSKEY" , "string", 150);
			IDbDataParameter parCONTROL_CSSCLASS   = Sql.CreateParameter(cmd, "@CONTROL_CSSCLASS"  , "string",  50);
			IDbDataParameter parTEXT_FIELD         = Sql.CreateParameter(cmd, "@TEXT_FIELD"        , "string", 200);
			IDbDataParameter parARGUMENT_FIELD     = Sql.CreateParameter(cmd, "@ARGUMENT_FIELD"    , "string", 200);
			IDbDataParameter parCOMMAND_NAME       = Sql.CreateParameter(cmd, "@COMMAND_NAME"      , "string",  50);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 255);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  20);
			IDbDataParameter parONCLICK_SCRIPT     = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"    , "string", 104857600);
			IDbDataParameter parMOBILE_ONLY        = Sql.CreateParameter(cmd, "@MOBILE_ONLY"       , "bool",   1);
			IDbDataParameter parADMIN_ONLY         = Sql.CreateParameter(cmd, "@ADMIN_ONLY"        , "bool",   1);
			IDbDataParameter parEXCLUDE_MOBILE     = Sql.CreateParameter(cmd, "@EXCLUDE_MOBILE"    , "bool",   1);
			IDbDataParameter parHIDDEN             = Sql.CreateParameter(cmd, "@HIDDEN"            , "bool",   1);
			IDbDataParameter parBUSINESS_RULE      = Sql.CreateParameter(cmd, "@BUSINESS_RULE"     , "string", 104857600);
			IDbDataParameter parBUSINESS_SCRIPT    = Sql.CreateParameter(cmd, "@BUSINESS_SCRIPT"   , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_Delete
		/// <summary>
		/// spEDITVIEWS_Delete
		/// </summary>
		public void spEDITVIEWS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_Delete
		/// <summary>
		/// spEDITVIEWS_Delete
		/// </summary>
		public void spEDITVIEWS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_Delete
		/// <summary>
		/// spEDITVIEWS_Delete
		/// </summary>
		public IDbCommand cmdEDITVIEWS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_Delete
		/// <summary>
		/// spEDITVIEWS_FIELDS_Delete
		/// </summary>
		public void spEDITVIEWS_FIELDS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_Delete
		/// <summary>
		/// spEDITVIEWS_FIELDS_Delete
		/// </summary>
		public void spEDITVIEWS_FIELDS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_Delete
		/// <summary>
		/// spEDITVIEWS_FIELDS_Delete
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsAutoComplete
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsAutoComplete
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsAutoComplete(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComp";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComplete";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parMODULE_TYPE       = Sql.AddParameter(cmd, "@MODULE_TYPE"      , sMODULE_TYPE        ,  25);
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsAutoComplete
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsAutoComplete
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsAutoComplete(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComp";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComplete";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parMODULE_TYPE       = Sql.AddParameter(cmd, "@MODULE_TYPE"      , sMODULE_TYPE        ,  25);
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsAutoComplete
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsAutoComplete
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsAutoComplete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComp";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsAutoComplete";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parMODULE_TYPE       = Sql.CreateParameter(cmd, "@MODULE_TYPE"      , "string",  25);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBlank
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBlank(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsBlank";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBlank
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBlank(string sEDIT_NAME, Int32 nFIELD_INDEX, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsBlank";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsBlank
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBlank
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsBlank(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsBlank";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBound
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBound
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBound(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsBound";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBound
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBound
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBound(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsBound";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsBound
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBound
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsBound(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsBound";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBoundList
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBoundList(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundLis";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundList";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBoundList
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsBoundList(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundLis";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundList";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsBoundList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsBoundList
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsBoundList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundLis";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsBoundList";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCACHE_NAME       = Sql.CreateParameter(cmd, "@CACHE_NAME"      , "string",  50);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string", 100);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsButton
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsButton
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsButton(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsButton";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
							IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsButton
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsButton
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsButton(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, string sDATA_FORMAT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsButton";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 1000);
				IDbDataParameter parDATA_FORMAT = Sql.AddParameter(cmd, "@DATA_FORMAT", sDATA_FORMAT  );
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsButton
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsButton
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsButton(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsButton";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 1000);
			IDbDataParameter parDATA_FORMAT = Sql.CreateParameter(cmd, "@DATA_FORMAT", "string", 104857600);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsChange";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsChange";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsChange
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsChange(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsChange";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsCheckBox(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckBox";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsCheckBox(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckBox";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsCheckBox
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckBox
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsCheckBox(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckBox";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsCheckLst
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckLst
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsCheckLst(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, string sDATA_FORMAT, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckLst";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsCheckLst
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckLst
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsCheckLst(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, string sDATA_FORMAT, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckLst";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsCheckLst
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsCheckLst
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsCheckLst(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsCheckLst";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCACHE_NAME       = Sql.CreateParameter(cmd, "@CACHE_NAME"      , "string",  50);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string", 100);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsControl
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsControl
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsControl(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sFIELD_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsControl";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  50);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsControl
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsControl
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsControl(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sFIELD_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsControl";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parFIELD_TYPE       = Sql.AddParameter(cmd, "@FIELD_TYPE"      , sFIELD_TYPE        ,  50);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsControl
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsControl
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsControl(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsControl";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parFIELD_TYPE       = Sql.CreateParameter(cmd, "@FIELD_TYPE"      , "string",  50);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDatePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDatePick
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDatePick(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsDatePick";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDatePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDatePick
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDatePick(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsDatePick";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsDatePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDatePick
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsDatePick(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsDatePick";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDateRng
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDateRng
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDateRng(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsDateRng";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDateRng
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDateRng
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDateRng(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsDateRng";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsDateRng
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDateRng
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsDateRng(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsDateRng";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDependList
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDependList(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sPARENT_FIELD, Int32 nCOLSPAN, Int32 nFORMAT_ROWS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependLi";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependList";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parPARENT_FIELD     = Sql.AddParameter(cmd, "@PARENT_FIELD"    , sPARENT_FIELD      ,  30);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDependList
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsDependList(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sPARENT_FIELD, Int32 nCOLSPAN, Int32 nFORMAT_ROWS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependLi";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependList";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parPARENT_FIELD     = Sql.AddParameter(cmd, "@PARENT_FIELD"    , sPARENT_FIELD      ,  30);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsDependList
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsDependList
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsDependList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependLi";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsDependList";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parPARENT_FIELD     = Sql.CreateParameter(cmd, "@PARENT_FIELD"    , "string",  30);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsFile
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsFile
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsFile(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsFile";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsFile
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsFile
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsFile(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsFile";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsFile
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsFile
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsFile(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsFile";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHeader
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHeader(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsHeader";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHeader
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHeader(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsHeader";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsHeader
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHeader
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsHeader(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsHeader";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHidden
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHidden
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHidden(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsHidden";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHidden
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHidden
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHidden(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsHidden";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsHidden
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHidden
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsHidden(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsHidden";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 100);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHtmlEditor
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHtmlEditor
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHtmlEditor(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEdit";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEditor";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							IDbDataParameter parFORMAT_COLUMNS   = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"  , nFORMAT_COLUMNS    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsHtmlEditor
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHtmlEditor
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsHtmlEditor(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEdit";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEditor";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				IDbDataParameter parFORMAT_COLUMNS   = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"  , nFORMAT_COLUMNS    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsHtmlEditor
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsHtmlEditor
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsHtmlEditor(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEdit";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsHtmlEditor";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			IDbDataParameter parFORMAT_COLUMNS   = Sql.CreateParameter(cmd, "@FORMAT_COLUMNS"  , "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsLabel
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsLabel
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsLabel(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsLabel";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
							IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 100);
							IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsLabel
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsLabel
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsLabel(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsLabel";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				IDbDataParameter parDATA_LABEL  = Sql.AddParameter(cmd, "@DATA_LABEL" , sDATA_LABEL   , 150);
				IDbDataParameter parDATA_FIELD  = Sql.AddParameter(cmd, "@DATA_FIELD" , sDATA_FIELD   , 100);
				IDbDataParameter parCOLSPAN     = Sql.AddParameter(cmd, "@COLSPAN"    , nCOLSPAN      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsLabel
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsLabel
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsLabel(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsLabel";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			IDbDataParameter parDATA_LABEL  = Sql.CreateParameter(cmd, "@DATA_LABEL" , "string", 150);
			IDbDataParameter parDATA_FIELD  = Sql.CreateParameter(cmd, "@DATA_FIELD" , "string", 100);
			IDbDataParameter parCOLSPAN     = Sql.CreateParameter(cmd, "@COLSPAN"    , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsModulePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsModulePopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsModulePopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePo";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePopup";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsModulePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsModulePopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsModulePopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePo";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePopup";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsModulePopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsModulePopup
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsModulePopup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePo";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsModulePopup";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parMODULE_TYPE      = Sql.CreateParameter(cmd, "@MODULE_TYPE"     , "string",  25);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsMultiLine
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsMultiLine
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsMultiLine(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLin";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLine";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							IDbDataParameter parFORMAT_COLUMNS   = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"  , nFORMAT_COLUMNS    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsMultiLine
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsMultiLine
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsMultiLine(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLin";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLine";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				IDbDataParameter parFORMAT_COLUMNS   = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"  , nFORMAT_COLUMNS    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsMultiLine
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsMultiLine
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsMultiLine(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLin";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsMultiLine";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			IDbDataParameter parFORMAT_COLUMNS   = Sql.CreateParameter(cmd, "@FORMAT_COLUMNS"  , "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsPassword
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPassword
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsPassword(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsPassword";
							IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
							IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
							IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
							IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
							IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
							IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
							IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
							IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
							IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsPassword
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPassword
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsPassword(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsPassword";
				IDbDataParameter parEDIT_NAME         = Sql.AddParameter(cmd, "@EDIT_NAME"        , sEDIT_NAME          ,  50);
				IDbDataParameter parFIELD_INDEX       = Sql.AddParameter(cmd, "@FIELD_INDEX"      , nFIELD_INDEX        );
				IDbDataParameter parDATA_LABEL        = Sql.AddParameter(cmd, "@DATA_LABEL"       , sDATA_LABEL         , 150);
				IDbDataParameter parDATA_FIELD        = Sql.AddParameter(cmd, "@DATA_FIELD"       , sDATA_FIELD         , 100);
				IDbDataParameter parDATA_REQUIRED     = Sql.AddParameter(cmd, "@DATA_REQUIRED"    , bDATA_REQUIRED      );
				IDbDataParameter parFORMAT_TAB_INDEX  = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX" , nFORMAT_TAB_INDEX   );
				IDbDataParameter parFORMAT_MAX_LENGTH = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH", nFORMAT_MAX_LENGTH  );
				IDbDataParameter parFORMAT_SIZE       = Sql.AddParameter(cmd, "@FORMAT_SIZE"      , nFORMAT_SIZE        );
				IDbDataParameter parCOLSPAN           = Sql.AddParameter(cmd, "@COLSPAN"          , nCOLSPAN            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsPassword
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPassword
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsPassword(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsPassword";
			IDbDataParameter parEDIT_NAME         = Sql.CreateParameter(cmd, "@EDIT_NAME"        , "string",  50);
			IDbDataParameter parFIELD_INDEX       = Sql.CreateParameter(cmd, "@FIELD_INDEX"      , "Int32",   4);
			IDbDataParameter parDATA_LABEL        = Sql.CreateParameter(cmd, "@DATA_LABEL"       , "string", 150);
			IDbDataParameter parDATA_FIELD        = Sql.CreateParameter(cmd, "@DATA_FIELD"       , "string", 100);
			IDbDataParameter parDATA_REQUIRED     = Sql.CreateParameter(cmd, "@DATA_REQUIRED"    , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX  = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX" , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH", "Int32",   4);
			IDbDataParameter parFORMAT_SIZE       = Sql.CreateParameter(cmd, "@FORMAT_SIZE"      , "Int32",   4);
			IDbDataParameter parCOLSPAN           = Sql.CreateParameter(cmd, "@COLSPAN"          , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsPopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsPopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsPopup";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsPopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPopup
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsPopup(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sMODULE_TYPE, string sONCLICK_SCRIPT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsPopup";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parMODULE_TYPE      = Sql.AddParameter(cmd, "@MODULE_TYPE"     , sMODULE_TYPE       ,  25);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsPopup
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsPopup
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsPopup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsPopup";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parMODULE_TYPE      = Sql.CreateParameter(cmd, "@MODULE_TYPE"     , "string",  25);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsRadio
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsRadio
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsRadio(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsRadio";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsRadio
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsRadio
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsRadio(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sCACHE_NAME, Int32 nCOLSPAN, Int32 nFORMAT_ROWS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsRadio";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCACHE_NAME       = Sql.AddParameter(cmd, "@CACHE_NAME"      , sCACHE_NAME        ,  50);
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parFORMAT_ROWS      = Sql.AddParameter(cmd, "@FORMAT_ROWS"     , nFORMAT_ROWS       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsRadio
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsRadio
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsRadio(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsRadio";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCACHE_NAME       = Sql.CreateParameter(cmd, "@CACHE_NAME"      , "string",  50);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parFORMAT_ROWS      = Sql.CreateParameter(cmd, "@FORMAT_ROWS"     , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsSeparator
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsSeparator(string sEDIT_NAME, Int32 nFIELD_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparato";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparator";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsSeparator
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsSeparator(string sEDIT_NAME, Int32 nFIELD_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparato";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparator";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parFIELD_INDEX = Sql.AddParameter(cmd, "@FIELD_INDEX", nFIELD_INDEX  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsSeparator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsSeparator
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsSeparator(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparato";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsSeparator";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parFIELD_INDEX = Sql.CreateParameter(cmd, "@FIELD_INDEX", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimeEdit
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeEdit
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimeEdit(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeEdit";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimeEdit
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeEdit
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimeEdit(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeEdit";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsTimeEdit
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeEdit
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsTimeEdit(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeEdit";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimeNew
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeNew
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimeNew(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeNew";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimeNew
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeNew
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimeNew(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeNew";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsTimeNew
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimeNew
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsTimeNew(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimeNew";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimePick
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimePick(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimePick";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsTimePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimePick
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsTimePick(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, Int32 nCOLSPAN, Int32 nROWSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimePick";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				IDbDataParameter parROWSPAN          = Sql.AddParameter(cmd, "@ROWSPAN"         , nROWSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsTimePick
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsTimePick
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsTimePick(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_InsTimePick";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			IDbDataParameter parROWSPAN          = Sql.CreateParameter(cmd, "@ROWSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsValidator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsValidator
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsValidator(string sEDIT_NAME, Int32 nFIELD_INDEX, string sFIELD_VALIDATOR_NAME, string sDATA_FIELD, string sFIELD_VALIDATOR_MESSAGE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidato";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidator";
							IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
							IDbDataParameter parFIELD_INDEX             = Sql.AddParameter(cmd, "@FIELD_INDEX"            , nFIELD_INDEX              );
							IDbDataParameter parFIELD_VALIDATOR_NAME    = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_NAME"   , sFIELD_VALIDATOR_NAME     ,  50);
							IDbDataParameter parDATA_FIELD              = Sql.AddParameter(cmd, "@DATA_FIELD"             , sDATA_FIELD               , 100);
							IDbDataParameter parFIELD_VALIDATOR_MESSAGE = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_MESSAGE", sFIELD_VALIDATOR_MESSAGE  , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_InsValidator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsValidator
		/// </summary>
		public void spEDITVIEWS_FIELDS_InsValidator(string sEDIT_NAME, Int32 nFIELD_INDEX, string sFIELD_VALIDATOR_NAME, string sDATA_FIELD, string sFIELD_VALIDATOR_MESSAGE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidato";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidator";
				IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
				IDbDataParameter parFIELD_INDEX             = Sql.AddParameter(cmd, "@FIELD_INDEX"            , nFIELD_INDEX              );
				IDbDataParameter parFIELD_VALIDATOR_NAME    = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_NAME"   , sFIELD_VALIDATOR_NAME     ,  50);
				IDbDataParameter parDATA_FIELD              = Sql.AddParameter(cmd, "@DATA_FIELD"             , sDATA_FIELD               , 100);
				IDbDataParameter parFIELD_VALIDATOR_MESSAGE = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_MESSAGE", sFIELD_VALIDATOR_MESSAGE  , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_InsValidator
		/// <summary>
		/// spEDITVIEWS_FIELDS_InsValidator
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_InsValidator(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidato";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_InsValidator";
			IDbDataParameter parEDIT_NAME               = Sql.CreateParameter(cmd, "@EDIT_NAME"              , "string",  50);
			IDbDataParameter parFIELD_INDEX             = Sql.CreateParameter(cmd, "@FIELD_INDEX"            , "Int32",   4);
			IDbDataParameter parFIELD_VALIDATOR_NAME    = Sql.CreateParameter(cmd, "@FIELD_VALIDATOR_NAME"   , "string",  50);
			IDbDataParameter parDATA_FIELD              = Sql.CreateParameter(cmd, "@DATA_FIELD"             , "string", 100);
			IDbDataParameter parFIELD_VALIDATOR_MESSAGE = Sql.CreateParameter(cmd, "@FIELD_VALIDATOR_MESSAGE", "string", 150);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_LstChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_LstChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_LstChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_LstChange";
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
							IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
							IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_LstChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_LstChange
		/// </summary>
		public void spEDITVIEWS_FIELDS_LstChange(string sEDIT_NAME, Int32 nFIELD_INDEX, string sDATA_LABEL, string sDATA_FIELD, bool bDATA_REQUIRED, Int32 nFORMAT_TAB_INDEX, string sDISPLAY_FIELD, string sONCLICK_SCRIPT, Int32 nCOLSPAN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_LstChange";
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parDATA_LABEL       = Sql.AddParameter(cmd, "@DATA_LABEL"      , sDATA_LABEL        , 150);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_REQUIRED    = Sql.AddParameter(cmd, "@DATA_REQUIRED"   , bDATA_REQUIRED     );
				IDbDataParameter parFORMAT_TAB_INDEX = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX", nFORMAT_TAB_INDEX  );
				IDbDataParameter parDISPLAY_FIELD    = Sql.AddParameter(cmd, "@DISPLAY_FIELD"   , sDISPLAY_FIELD     , 100);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				IDbDataParameter parCOLSPAN          = Sql.AddParameter(cmd, "@COLSPAN"         , nCOLSPAN           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_LstChange
		/// <summary>
		/// spEDITVIEWS_FIELDS_LstChange
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_LstChange(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_LstChange";
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parDATA_LABEL       = Sql.CreateParameter(cmd, "@DATA_LABEL"      , "string", 150);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_REQUIRED    = Sql.CreateParameter(cmd, "@DATA_REQUIRED"   , "bool",   1);
			IDbDataParameter parFORMAT_TAB_INDEX = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX", "Int32",   4);
			IDbDataParameter parDISPLAY_FIELD    = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"   , "string", 100);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			IDbDataParameter parCOLSPAN          = Sql.CreateParameter(cmd, "@COLSPAN"         , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_MergeView
		/// <summary>
		/// spEDITVIEWS_FIELDS_MergeView
		/// </summary>
		public void spEDITVIEWS_FIELDS_MergeView(string sEDIT_NAME, string sMERGE_NAME, string sDATA_LABEL1, string sDATA_LABEL2)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_MergeView";
							IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
							IDbDataParameter parMERGE_NAME  = Sql.AddParameter(cmd, "@MERGE_NAME" , sMERGE_NAME   ,  50);
							IDbDataParameter parDATA_LABEL1 = Sql.AddParameter(cmd, "@DATA_LABEL1", sDATA_LABEL1  , 150);
							IDbDataParameter parDATA_LABEL2 = Sql.AddParameter(cmd, "@DATA_LABEL2", sDATA_LABEL2  , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_MergeView
		/// <summary>
		/// spEDITVIEWS_FIELDS_MergeView
		/// </summary>
		public void spEDITVIEWS_FIELDS_MergeView(string sEDIT_NAME, string sMERGE_NAME, string sDATA_LABEL1, string sDATA_LABEL2, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_MergeView";
				IDbDataParameter parEDIT_NAME   = Sql.AddParameter(cmd, "@EDIT_NAME"  , sEDIT_NAME    ,  50);
				IDbDataParameter parMERGE_NAME  = Sql.AddParameter(cmd, "@MERGE_NAME" , sMERGE_NAME   ,  50);
				IDbDataParameter parDATA_LABEL1 = Sql.AddParameter(cmd, "@DATA_LABEL1", sDATA_LABEL1  , 150);
				IDbDataParameter parDATA_LABEL2 = Sql.AddParameter(cmd, "@DATA_LABEL2", sDATA_LABEL2  , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_MergeView
		/// <summary>
		/// spEDITVIEWS_FIELDS_MergeView
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_MergeView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_MergeView";
			IDbDataParameter parEDIT_NAME   = Sql.CreateParameter(cmd, "@EDIT_NAME"  , "string",  50);
			IDbDataParameter parMERGE_NAME  = Sql.CreateParameter(cmd, "@MERGE_NAME" , "string",  50);
			IDbDataParameter parDATA_LABEL1 = Sql.CreateParameter(cmd, "@DATA_LABEL1", "string", 150);
			IDbDataParameter parDATA_LABEL2 = Sql.CreateParameter(cmd, "@DATA_LABEL2", "string", 150);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_Update
		/// <summary>
		/// spEDITVIEWS_FIELDS_Update
		/// </summary>
		public void spEDITVIEWS_FIELDS_Update(ref Guid gID, string sEDIT_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDISPLAY_FIELD, string sCACHE_NAME, bool bDATA_REQUIRED, bool bUI_REQUIRED, string sONCLICK_SCRIPT, string sFORMAT_SCRIPT, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN, Int32 nROWSPAN, string sMODULE_TYPE, string sTOOL_TIP, Guid gFIELD_VALIDATOR_ID, string sFIELD_VALIDATOR_MESSAGE, string sDATA_FORMAT, string sRELATED_SOURCE_MODULE_NAME, string sRELATED_SOURCE_VIEW_NAME, string sRELATED_SOURCE_ID_FIELD, string sRELATED_SOURCE_NAME_FIELD, string sRELATED_VIEW_NAME, string sRELATED_ID_FIELD, string sRELATED_NAME_FIELD, string sRELATED_JOIN_FIELD, string sPARENT_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_Update";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parEDIT_NAME                  = Sql.AddParameter(cmd, "@EDIT_NAME"                 , sEDIT_NAME                   ,  50);
							IDbDataParameter parFIELD_INDEX                = Sql.AddParameter(cmd, "@FIELD_INDEX"               , nFIELD_INDEX                 );
							IDbDataParameter parFIELD_TYPE                 = Sql.AddParameter(cmd, "@FIELD_TYPE"                , sFIELD_TYPE                  ,  25);
							IDbDataParameter parDATA_LABEL                 = Sql.AddParameter(cmd, "@DATA_LABEL"                , sDATA_LABEL                  , 150);
							IDbDataParameter parDATA_FIELD                 = Sql.AddParameter(cmd, "@DATA_FIELD"                , sDATA_FIELD                  , 100);
							IDbDataParameter parDISPLAY_FIELD              = Sql.AddParameter(cmd, "@DISPLAY_FIELD"             , sDISPLAY_FIELD               , 100);
							IDbDataParameter parCACHE_NAME                 = Sql.AddParameter(cmd, "@CACHE_NAME"                , sCACHE_NAME                  ,  50);
							IDbDataParameter parDATA_REQUIRED              = Sql.AddParameter(cmd, "@DATA_REQUIRED"             , bDATA_REQUIRED               );
							IDbDataParameter parUI_REQUIRED                = Sql.AddParameter(cmd, "@UI_REQUIRED"               , bUI_REQUIRED                 );
							IDbDataParameter parONCLICK_SCRIPT             = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"            , sONCLICK_SCRIPT              );
							IDbDataParameter parFORMAT_SCRIPT              = Sql.AddParameter(cmd, "@FORMAT_SCRIPT"             , sFORMAT_SCRIPT               , 255);
							IDbDataParameter parFORMAT_TAB_INDEX           = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX"          , nFORMAT_TAB_INDEX            );
							IDbDataParameter parFORMAT_MAX_LENGTH          = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH"         , nFORMAT_MAX_LENGTH           );
							IDbDataParameter parFORMAT_SIZE                = Sql.AddParameter(cmd, "@FORMAT_SIZE"               , nFORMAT_SIZE                 );
							IDbDataParameter parFORMAT_ROWS                = Sql.AddParameter(cmd, "@FORMAT_ROWS"               , nFORMAT_ROWS                 );
							IDbDataParameter parFORMAT_COLUMNS             = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"            , nFORMAT_COLUMNS              );
							IDbDataParameter parCOLSPAN                    = Sql.AddParameter(cmd, "@COLSPAN"                   , nCOLSPAN                     );
							IDbDataParameter parROWSPAN                    = Sql.AddParameter(cmd, "@ROWSPAN"                   , nROWSPAN                     );
							IDbDataParameter parMODULE_TYPE                = Sql.AddParameter(cmd, "@MODULE_TYPE"               , sMODULE_TYPE                 ,  25);
							IDbDataParameter parTOOL_TIP                   = Sql.AddParameter(cmd, "@TOOL_TIP"                  , sTOOL_TIP                    , 150);
							IDbDataParameter parFIELD_VALIDATOR_ID         = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_ID"        , gFIELD_VALIDATOR_ID          );
							IDbDataParameter parFIELD_VALIDATOR_MESSAGE    = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_MESSAGE"   , sFIELD_VALIDATOR_MESSAGE     , 150);
							IDbDataParameter parDATA_FORMAT                = Sql.AddParameter(cmd, "@DATA_FORMAT"               , sDATA_FORMAT                 , 100);
							IDbDataParameter parRELATED_SOURCE_MODULE_NAME = Sql.AddParameter(cmd, "@RELATED_SOURCE_MODULE_NAME", sRELATED_SOURCE_MODULE_NAME  ,  50);
							IDbDataParameter parRELATED_SOURCE_VIEW_NAME   = Sql.AddParameter(cmd, "@RELATED_SOURCE_VIEW_NAME"  , sRELATED_SOURCE_VIEW_NAME    ,  50);
							IDbDataParameter parRELATED_SOURCE_ID_FIELD    = Sql.AddParameter(cmd, "@RELATED_SOURCE_ID_FIELD"   , sRELATED_SOURCE_ID_FIELD     ,  30);
							IDbDataParameter parRELATED_SOURCE_NAME_FIELD  = Sql.AddParameter(cmd, "@RELATED_SOURCE_NAME_FIELD" , sRELATED_SOURCE_NAME_FIELD   , 100);
							IDbDataParameter parRELATED_VIEW_NAME          = Sql.AddParameter(cmd, "@RELATED_VIEW_NAME"         , sRELATED_VIEW_NAME           ,  50);
							IDbDataParameter parRELATED_ID_FIELD           = Sql.AddParameter(cmd, "@RELATED_ID_FIELD"          , sRELATED_ID_FIELD            ,  30);
							IDbDataParameter parRELATED_NAME_FIELD         = Sql.AddParameter(cmd, "@RELATED_NAME_FIELD"        , sRELATED_NAME_FIELD          , 100);
							IDbDataParameter parRELATED_JOIN_FIELD         = Sql.AddParameter(cmd, "@RELATED_JOIN_FIELD"        , sRELATED_JOIN_FIELD          ,  30);
							IDbDataParameter parPARENT_FIELD               = Sql.AddParameter(cmd, "@PARENT_FIELD"              , sPARENT_FIELD                ,  30);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_Update
		/// <summary>
		/// spEDITVIEWS_FIELDS_Update
		/// </summary>
		public void spEDITVIEWS_FIELDS_Update(ref Guid gID, string sEDIT_NAME, Int32 nFIELD_INDEX, string sFIELD_TYPE, string sDATA_LABEL, string sDATA_FIELD, string sDISPLAY_FIELD, string sCACHE_NAME, bool bDATA_REQUIRED, bool bUI_REQUIRED, string sONCLICK_SCRIPT, string sFORMAT_SCRIPT, Int32 nFORMAT_TAB_INDEX, Int32 nFORMAT_MAX_LENGTH, Int32 nFORMAT_SIZE, Int32 nFORMAT_ROWS, Int32 nFORMAT_COLUMNS, Int32 nCOLSPAN, Int32 nROWSPAN, string sMODULE_TYPE, string sTOOL_TIP, Guid gFIELD_VALIDATOR_ID, string sFIELD_VALIDATOR_MESSAGE, string sDATA_FORMAT, string sRELATED_SOURCE_MODULE_NAME, string sRELATED_SOURCE_VIEW_NAME, string sRELATED_SOURCE_ID_FIELD, string sRELATED_SOURCE_NAME_FIELD, string sRELATED_VIEW_NAME, string sRELATED_ID_FIELD, string sRELATED_NAME_FIELD, string sRELATED_JOIN_FIELD, string sPARENT_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_Update";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parEDIT_NAME                  = Sql.AddParameter(cmd, "@EDIT_NAME"                 , sEDIT_NAME                   ,  50);
				IDbDataParameter parFIELD_INDEX                = Sql.AddParameter(cmd, "@FIELD_INDEX"               , nFIELD_INDEX                 );
				IDbDataParameter parFIELD_TYPE                 = Sql.AddParameter(cmd, "@FIELD_TYPE"                , sFIELD_TYPE                  ,  25);
				IDbDataParameter parDATA_LABEL                 = Sql.AddParameter(cmd, "@DATA_LABEL"                , sDATA_LABEL                  , 150);
				IDbDataParameter parDATA_FIELD                 = Sql.AddParameter(cmd, "@DATA_FIELD"                , sDATA_FIELD                  , 100);
				IDbDataParameter parDISPLAY_FIELD              = Sql.AddParameter(cmd, "@DISPLAY_FIELD"             , sDISPLAY_FIELD               , 100);
				IDbDataParameter parCACHE_NAME                 = Sql.AddParameter(cmd, "@CACHE_NAME"                , sCACHE_NAME                  ,  50);
				IDbDataParameter parDATA_REQUIRED              = Sql.AddParameter(cmd, "@DATA_REQUIRED"             , bDATA_REQUIRED               );
				IDbDataParameter parUI_REQUIRED                = Sql.AddParameter(cmd, "@UI_REQUIRED"               , bUI_REQUIRED                 );
				IDbDataParameter parONCLICK_SCRIPT             = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"            , sONCLICK_SCRIPT              );
				IDbDataParameter parFORMAT_SCRIPT              = Sql.AddParameter(cmd, "@FORMAT_SCRIPT"             , sFORMAT_SCRIPT               , 255);
				IDbDataParameter parFORMAT_TAB_INDEX           = Sql.AddParameter(cmd, "@FORMAT_TAB_INDEX"          , nFORMAT_TAB_INDEX            );
				IDbDataParameter parFORMAT_MAX_LENGTH          = Sql.AddParameter(cmd, "@FORMAT_MAX_LENGTH"         , nFORMAT_MAX_LENGTH           );
				IDbDataParameter parFORMAT_SIZE                = Sql.AddParameter(cmd, "@FORMAT_SIZE"               , nFORMAT_SIZE                 );
				IDbDataParameter parFORMAT_ROWS                = Sql.AddParameter(cmd, "@FORMAT_ROWS"               , nFORMAT_ROWS                 );
				IDbDataParameter parFORMAT_COLUMNS             = Sql.AddParameter(cmd, "@FORMAT_COLUMNS"            , nFORMAT_COLUMNS              );
				IDbDataParameter parCOLSPAN                    = Sql.AddParameter(cmd, "@COLSPAN"                   , nCOLSPAN                     );
				IDbDataParameter parROWSPAN                    = Sql.AddParameter(cmd, "@ROWSPAN"                   , nROWSPAN                     );
				IDbDataParameter parMODULE_TYPE                = Sql.AddParameter(cmd, "@MODULE_TYPE"               , sMODULE_TYPE                 ,  25);
				IDbDataParameter parTOOL_TIP                   = Sql.AddParameter(cmd, "@TOOL_TIP"                  , sTOOL_TIP                    , 150);
				IDbDataParameter parFIELD_VALIDATOR_ID         = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_ID"        , gFIELD_VALIDATOR_ID          );
				IDbDataParameter parFIELD_VALIDATOR_MESSAGE    = Sql.AddParameter(cmd, "@FIELD_VALIDATOR_MESSAGE"   , sFIELD_VALIDATOR_MESSAGE     , 150);
				IDbDataParameter parDATA_FORMAT                = Sql.AddParameter(cmd, "@DATA_FORMAT"               , sDATA_FORMAT                 , 100);
				IDbDataParameter parRELATED_SOURCE_MODULE_NAME = Sql.AddParameter(cmd, "@RELATED_SOURCE_MODULE_NAME", sRELATED_SOURCE_MODULE_NAME  ,  50);
				IDbDataParameter parRELATED_SOURCE_VIEW_NAME   = Sql.AddParameter(cmd, "@RELATED_SOURCE_VIEW_NAME"  , sRELATED_SOURCE_VIEW_NAME    ,  50);
				IDbDataParameter parRELATED_SOURCE_ID_FIELD    = Sql.AddParameter(cmd, "@RELATED_SOURCE_ID_FIELD"   , sRELATED_SOURCE_ID_FIELD     ,  30);
				IDbDataParameter parRELATED_SOURCE_NAME_FIELD  = Sql.AddParameter(cmd, "@RELATED_SOURCE_NAME_FIELD" , sRELATED_SOURCE_NAME_FIELD   , 100);
				IDbDataParameter parRELATED_VIEW_NAME          = Sql.AddParameter(cmd, "@RELATED_VIEW_NAME"         , sRELATED_VIEW_NAME           ,  50);
				IDbDataParameter parRELATED_ID_FIELD           = Sql.AddParameter(cmd, "@RELATED_ID_FIELD"          , sRELATED_ID_FIELD            ,  30);
				IDbDataParameter parRELATED_NAME_FIELD         = Sql.AddParameter(cmd, "@RELATED_NAME_FIELD"        , sRELATED_NAME_FIELD          , 100);
				IDbDataParameter parRELATED_JOIN_FIELD         = Sql.AddParameter(cmd, "@RELATED_JOIN_FIELD"        , sRELATED_JOIN_FIELD          ,  30);
				IDbDataParameter parPARENT_FIELD               = Sql.AddParameter(cmd, "@PARENT_FIELD"              , sPARENT_FIELD                ,  30);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_Update
		/// <summary>
		/// spEDITVIEWS_FIELDS_Update
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_Update";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parEDIT_NAME                  = Sql.CreateParameter(cmd, "@EDIT_NAME"                 , "string",  50);
			IDbDataParameter parFIELD_INDEX                = Sql.CreateParameter(cmd, "@FIELD_INDEX"               , "Int32",   4);
			IDbDataParameter parFIELD_TYPE                 = Sql.CreateParameter(cmd, "@FIELD_TYPE"                , "string",  25);
			IDbDataParameter parDATA_LABEL                 = Sql.CreateParameter(cmd, "@DATA_LABEL"                , "string", 150);
			IDbDataParameter parDATA_FIELD                 = Sql.CreateParameter(cmd, "@DATA_FIELD"                , "string", 100);
			IDbDataParameter parDISPLAY_FIELD              = Sql.CreateParameter(cmd, "@DISPLAY_FIELD"             , "string", 100);
			IDbDataParameter parCACHE_NAME                 = Sql.CreateParameter(cmd, "@CACHE_NAME"                , "string",  50);
			IDbDataParameter parDATA_REQUIRED              = Sql.CreateParameter(cmd, "@DATA_REQUIRED"             , "bool",   1);
			IDbDataParameter parUI_REQUIRED                = Sql.CreateParameter(cmd, "@UI_REQUIRED"               , "bool",   1);
			IDbDataParameter parONCLICK_SCRIPT             = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"            , "string", 104857600);
			IDbDataParameter parFORMAT_SCRIPT              = Sql.CreateParameter(cmd, "@FORMAT_SCRIPT"             , "string", 255);
			IDbDataParameter parFORMAT_TAB_INDEX           = Sql.CreateParameter(cmd, "@FORMAT_TAB_INDEX"          , "Int32",   4);
			IDbDataParameter parFORMAT_MAX_LENGTH          = Sql.CreateParameter(cmd, "@FORMAT_MAX_LENGTH"         , "Int32",   4);
			IDbDataParameter parFORMAT_SIZE                = Sql.CreateParameter(cmd, "@FORMAT_SIZE"               , "Int32",   4);
			IDbDataParameter parFORMAT_ROWS                = Sql.CreateParameter(cmd, "@FORMAT_ROWS"               , "Int32",   4);
			IDbDataParameter parFORMAT_COLUMNS             = Sql.CreateParameter(cmd, "@FORMAT_COLUMNS"            , "Int32",   4);
			IDbDataParameter parCOLSPAN                    = Sql.CreateParameter(cmd, "@COLSPAN"                   , "Int32",   4);
			IDbDataParameter parROWSPAN                    = Sql.CreateParameter(cmd, "@ROWSPAN"                   , "Int32",   4);
			IDbDataParameter parMODULE_TYPE                = Sql.CreateParameter(cmd, "@MODULE_TYPE"               , "string",  25);
			IDbDataParameter parTOOL_TIP                   = Sql.CreateParameter(cmd, "@TOOL_TIP"                  , "string", 150);
			IDbDataParameter parFIELD_VALIDATOR_ID         = Sql.CreateParameter(cmd, "@FIELD_VALIDATOR_ID"        , "Guid",  16);
			IDbDataParameter parFIELD_VALIDATOR_MESSAGE    = Sql.CreateParameter(cmd, "@FIELD_VALIDATOR_MESSAGE"   , "string", 150);
			IDbDataParameter parDATA_FORMAT                = Sql.CreateParameter(cmd, "@DATA_FORMAT"               , "string", 100);
			IDbDataParameter parRELATED_SOURCE_MODULE_NAME = Sql.CreateParameter(cmd, "@RELATED_SOURCE_MODULE_NAME", "string",  50);
			IDbDataParameter parRELATED_SOURCE_VIEW_NAME   = Sql.CreateParameter(cmd, "@RELATED_SOURCE_VIEW_NAME"  , "string",  50);
			IDbDataParameter parRELATED_SOURCE_ID_FIELD    = Sql.CreateParameter(cmd, "@RELATED_SOURCE_ID_FIELD"   , "string",  30);
			IDbDataParameter parRELATED_SOURCE_NAME_FIELD  = Sql.CreateParameter(cmd, "@RELATED_SOURCE_NAME_FIELD" , "string", 100);
			IDbDataParameter parRELATED_VIEW_NAME          = Sql.CreateParameter(cmd, "@RELATED_VIEW_NAME"         , "string",  50);
			IDbDataParameter parRELATED_ID_FIELD           = Sql.CreateParameter(cmd, "@RELATED_ID_FIELD"          , "string",  30);
			IDbDataParameter parRELATED_NAME_FIELD         = Sql.CreateParameter(cmd, "@RELATED_NAME_FIELD"        , "string", 100);
			IDbDataParameter parRELATED_JOIN_FIELD         = Sql.CreateParameter(cmd, "@RELATED_JOIN_FIELD"        , "string",  30);
			IDbDataParameter parPARENT_FIELD               = Sql.CreateParameter(cmd, "@PARENT_FIELD"              , "string",  30);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateDataFormat
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateDataFormat
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateDataFormat(string sEDIT_NAME, string sDATA_FIELD, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataF";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataFormat";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateDataFormat
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateDataFormat
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateDataFormat(string sEDIT_NAME, string sDATA_FIELD, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataF";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataFormat";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_UpdateDataFormat
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateDataFormat
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_UpdateDataFormat(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataF";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateDataFormat";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string", 100);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateOnClick
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateOnClick
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateOnClick(string sEDIT_NAME, string sDATA_FIELD, string sONCLICK_SCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnCli";
							else
								cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnClick";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
							IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateOnClick
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateOnClick
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateOnClick(string sEDIT_NAME, string sDATA_FIELD, string sONCLICK_SCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnCli";
				else
					cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnClick";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        , 100);
				IDbDataParameter parONCLICK_SCRIPT   = Sql.AddParameter(cmd, "@ONCLICK_SCRIPT"  , sONCLICK_SCRIPT    );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_UpdateOnClick
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateOnClick
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_UpdateOnClick(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnCli";
			else
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateOnClick";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string", 100);
			IDbDataParameter parONCLICK_SCRIPT   = Sql.CreateParameter(cmd, "@ONCLICK_SCRIPT"  , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateTip
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateTip(string sEDIT_NAME, Int32 nFIELD_INDEX, string sTOOL_TIP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateTip";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
							IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateTip
		/// </summary>
		public void spEDITVIEWS_FIELDS_UpdateTip(string sEDIT_NAME, Int32 nFIELD_INDEX, string sTOOL_TIP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateTip";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parFIELD_INDEX      = Sql.AddParameter(cmd, "@FIELD_INDEX"     , nFIELD_INDEX       );
				IDbDataParameter parTOOL_TIP         = Sql.AddParameter(cmd, "@TOOL_TIP"        , sTOOL_TIP          , 150);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_FIELDS_UpdateTip
		/// <summary>
		/// spEDITVIEWS_FIELDS_UpdateTip
		/// </summary>
		public IDbCommand cmdEDITVIEWS_FIELDS_UpdateTip(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_FIELDS_UpdateTip";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parFIELD_INDEX      = Sql.CreateParameter(cmd, "@FIELD_INDEX"     , "Int32",   4);
			IDbDataParameter parTOOL_TIP         = Sql.CreateParameter(cmd, "@TOOL_TIP"        , "string", 150);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_InsertOnly
		/// </summary>
		public void spEDITVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_InsertOnly";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
							IDbDataParameter parVIEW_NAME    = Sql.AddParameter(cmd, "@VIEW_NAME"   , sVIEW_NAME     ,  50);
							IDbDataParameter parLABEL_WIDTH  = Sql.AddParameter(cmd, "@LABEL_WIDTH" , sLABEL_WIDTH   ,  10);
							IDbDataParameter parFIELD_WIDTH  = Sql.AddParameter(cmd, "@FIELD_WIDTH" , sFIELD_WIDTH   ,  10);
							IDbDataParameter parDATA_COLUMNS = Sql.AddParameter(cmd, "@DATA_COLUMNS", nDATA_COLUMNS  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_InsertOnly
		/// </summary>
		public void spEDITVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_InsertOnly";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  50);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
				IDbDataParameter parVIEW_NAME    = Sql.AddParameter(cmd, "@VIEW_NAME"   , sVIEW_NAME     ,  50);
				IDbDataParameter parLABEL_WIDTH  = Sql.AddParameter(cmd, "@LABEL_WIDTH" , sLABEL_WIDTH   ,  10);
				IDbDataParameter parFIELD_WIDTH  = Sql.AddParameter(cmd, "@FIELD_WIDTH" , sFIELD_WIDTH   ,  10);
				IDbDataParameter parDATA_COLUMNS = Sql.AddParameter(cmd, "@DATA_COLUMNS", nDATA_COLUMNS  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_InsertOnly
		/// </summary>
		public IDbCommand cmdEDITVIEWS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_InsertOnly";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string",  50);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  25);
			IDbDataParameter parVIEW_NAME    = Sql.CreateParameter(cmd, "@VIEW_NAME"   , "string",  50);
			IDbDataParameter parLABEL_WIDTH  = Sql.CreateParameter(cmd, "@LABEL_WIDTH" , "string",  10);
			IDbDataParameter parFIELD_WIDTH  = Sql.CreateParameter(cmd, "@FIELD_WIDTH" , "string",  10);
			IDbDataParameter parDATA_COLUMNS = Sql.CreateParameter(cmd, "@DATA_COLUMNS", "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Dele";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Dele";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Delete
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Delete
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Dele";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Disable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disa";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Disable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disa";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Disable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Disable
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disa";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Disable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Down(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Down";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Down(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Down";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Down
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Down
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Down(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Down";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Enable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enab";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Enable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enab";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Enable
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Enable
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enab";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Enable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_InsertOnly(string sEDIT_NAME, string sMODULE_NAME, string sCONTROL_NAME, bool bRELATIONSHIP_ENABLED, Int32 nRELATIONSHIP_ORDER, bool bNEW_RECORD_ENABLED, bool bEXISTING_RECORD_ENABLED, string sTITLE, string sALTERNATE_VIEW)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Inse";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_InsertOnly";
							IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
							IDbDataParameter parMODULE_NAME             = Sql.AddParameter(cmd, "@MODULE_NAME"            , sMODULE_NAME              ,  50);
							IDbDataParameter parCONTROL_NAME            = Sql.AddParameter(cmd, "@CONTROL_NAME"           , sCONTROL_NAME             , 100);
							IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED"   , bRELATIONSHIP_ENABLED     );
							IDbDataParameter parRELATIONSHIP_ORDER      = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"     , nRELATIONSHIP_ORDER       );
							IDbDataParameter parNEW_RECORD_ENABLED      = Sql.AddParameter(cmd, "@NEW_RECORD_ENABLED"     , bNEW_RECORD_ENABLED       );
							IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.AddParameter(cmd, "@EXISTING_RECORD_ENABLED", bEXISTING_RECORD_ENABLED  );
							IDbDataParameter parTITLE                   = Sql.AddParameter(cmd, "@TITLE"                  , sTITLE                    , 100);
							IDbDataParameter parALTERNATE_VIEW          = Sql.AddParameter(cmd, "@ALTERNATE_VIEW"         , sALTERNATE_VIEW           ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_InsertOnly(string sEDIT_NAME, string sMODULE_NAME, string sCONTROL_NAME, bool bRELATIONSHIP_ENABLED, Int32 nRELATIONSHIP_ORDER, bool bNEW_RECORD_ENABLED, bool bEXISTING_RECORD_ENABLED, string sTITLE, string sALTERNATE_VIEW, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Inse";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_InsertOnly";
				IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
				IDbDataParameter parMODULE_NAME             = Sql.AddParameter(cmd, "@MODULE_NAME"            , sMODULE_NAME              ,  50);
				IDbDataParameter parCONTROL_NAME            = Sql.AddParameter(cmd, "@CONTROL_NAME"           , sCONTROL_NAME             , 100);
				IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED"   , bRELATIONSHIP_ENABLED     );
				IDbDataParameter parRELATIONSHIP_ORDER      = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"     , nRELATIONSHIP_ORDER       );
				IDbDataParameter parNEW_RECORD_ENABLED      = Sql.AddParameter(cmd, "@NEW_RECORD_ENABLED"     , bNEW_RECORD_ENABLED       );
				IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.AddParameter(cmd, "@EXISTING_RECORD_ENABLED", bEXISTING_RECORD_ENABLED  );
				IDbDataParameter parTITLE                   = Sql.AddParameter(cmd, "@TITLE"                  , sTITLE                    , 100);
				IDbDataParameter parALTERNATE_VIEW          = Sql.AddParameter(cmd, "@ALTERNATE_VIEW"         , sALTERNATE_VIEW           ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_InsertOnly
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Inse";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_InsertOnly";
			IDbDataParameter parEDIT_NAME               = Sql.CreateParameter(cmd, "@EDIT_NAME"              , "string",  50);
			IDbDataParameter parMODULE_NAME             = Sql.CreateParameter(cmd, "@MODULE_NAME"            , "string",  50);
			IDbDataParameter parCONTROL_NAME            = Sql.CreateParameter(cmd, "@CONTROL_NAME"           , "string", 100);
			IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.CreateParameter(cmd, "@RELATIONSHIP_ENABLED"   , "bool",   1);
			IDbDataParameter parRELATIONSHIP_ORDER      = Sql.CreateParameter(cmd, "@RELATIONSHIP_ORDER"     , "Int32",   4);
			IDbDataParameter parNEW_RECORD_ENABLED      = Sql.CreateParameter(cmd, "@NEW_RECORD_ENABLED"     , "bool",   1);
			IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.CreateParameter(cmd, "@EXISTING_RECORD_ENABLED", "bool",   1);
			IDbDataParameter parTITLE                   = Sql.CreateParameter(cmd, "@TITLE"                  , "string", 100);
			IDbDataParameter parALTERNATE_VIEW          = Sql.CreateParameter(cmd, "@ALTERNATE_VIEW"         , "string",  50);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Item(string sEDIT_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Item";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Item(string sEDIT_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Item";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parEDIT_NAME        = Sql.AddParameter(cmd, "@EDIT_NAME"       , sEDIT_NAME         ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Item
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Item
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Item(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Item";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parEDIT_NAME        = Sql.CreateParameter(cmd, "@EDIT_NAME"       , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Move";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Move";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_MoveUp
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_MoveUp
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Move";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Update(ref Guid gID, string sEDIT_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, bool bNEW_RECORD_ENABLED, bool bEXISTING_RECORD_ENABLED, string sTITLE, string sALTERNATE_VIEW, bool bRELATIONSHIP_ENABLED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Upda";
							else
								cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Update";
							IDbDataParameter parID                      = Sql.AddParameter(cmd, "@ID"                     , gID                       );
							IDbDataParameter parMODIFIED_USER_ID        = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"       ,  Security.USER_ID         );
							IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
							IDbDataParameter parMODULE_NAME             = Sql.AddParameter(cmd, "@MODULE_NAME"            , sMODULE_NAME              ,  50);
							IDbDataParameter parCONTROL_NAME            = Sql.AddParameter(cmd, "@CONTROL_NAME"           , sCONTROL_NAME             , 100);
							IDbDataParameter parRELATIONSHIP_ORDER      = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"     , nRELATIONSHIP_ORDER       );
							IDbDataParameter parNEW_RECORD_ENABLED      = Sql.AddParameter(cmd, "@NEW_RECORD_ENABLED"     , bNEW_RECORD_ENABLED       );
							IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.AddParameter(cmd, "@EXISTING_RECORD_ENABLED", bEXISTING_RECORD_ENABLED  );
							IDbDataParameter parTITLE                   = Sql.AddParameter(cmd, "@TITLE"                  , sTITLE                    , 100);
							IDbDataParameter parALTERNATE_VIEW          = Sql.AddParameter(cmd, "@ALTERNATE_VIEW"         , sALTERNATE_VIEW           ,  50);
							IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED"   , bRELATIONSHIP_ENABLED     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public void spEDITVIEWS_RELATIONSHIPS_Update(ref Guid gID, string sEDIT_NAME, string sMODULE_NAME, string sCONTROL_NAME, Int32 nRELATIONSHIP_ORDER, bool bNEW_RECORD_ENABLED, bool bEXISTING_RECORD_ENABLED, string sTITLE, string sALTERNATE_VIEW, bool bRELATIONSHIP_ENABLED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Upda";
				else
					cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Update";
				IDbDataParameter parID                      = Sql.AddParameter(cmd, "@ID"                     , gID                       );
				IDbDataParameter parMODIFIED_USER_ID        = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"       ,  Security.USER_ID         );
				IDbDataParameter parEDIT_NAME               = Sql.AddParameter(cmd, "@EDIT_NAME"              , sEDIT_NAME                ,  50);
				IDbDataParameter parMODULE_NAME             = Sql.AddParameter(cmd, "@MODULE_NAME"            , sMODULE_NAME              ,  50);
				IDbDataParameter parCONTROL_NAME            = Sql.AddParameter(cmd, "@CONTROL_NAME"           , sCONTROL_NAME             , 100);
				IDbDataParameter parRELATIONSHIP_ORDER      = Sql.AddParameter(cmd, "@RELATIONSHIP_ORDER"     , nRELATIONSHIP_ORDER       );
				IDbDataParameter parNEW_RECORD_ENABLED      = Sql.AddParameter(cmd, "@NEW_RECORD_ENABLED"     , bNEW_RECORD_ENABLED       );
				IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.AddParameter(cmd, "@EXISTING_RECORD_ENABLED", bEXISTING_RECORD_ENABLED  );
				IDbDataParameter parTITLE                   = Sql.AddParameter(cmd, "@TITLE"                  , sTITLE                    , 100);
				IDbDataParameter parALTERNATE_VIEW          = Sql.AddParameter(cmd, "@ALTERNATE_VIEW"         , sALTERNATE_VIEW           ,  50);
				IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.AddParameter(cmd, "@RELATIONSHIP_ENABLED"   , bRELATIONSHIP_ENABLED     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEDITVIEWS_RELATIONSHIPS_Update
		/// <summary>
		/// spEDITVIEWS_RELATIONSHIPS_Update
		/// </summary>
		public IDbCommand cmdEDITVIEWS_RELATIONSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Upda";
			else
				cmd.CommandText = "spEDITVIEWS_RELATIONSHIPS_Update";
			IDbDataParameter parID                      = Sql.CreateParameter(cmd, "@ID"                     , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID        = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"       , "Guid",  16);
			IDbDataParameter parEDIT_NAME               = Sql.CreateParameter(cmd, "@EDIT_NAME"              , "string",  50);
			IDbDataParameter parMODULE_NAME             = Sql.CreateParameter(cmd, "@MODULE_NAME"            , "string",  50);
			IDbDataParameter parCONTROL_NAME            = Sql.CreateParameter(cmd, "@CONTROL_NAME"           , "string", 100);
			IDbDataParameter parRELATIONSHIP_ORDER      = Sql.CreateParameter(cmd, "@RELATIONSHIP_ORDER"     , "Int32",   4);
			IDbDataParameter parNEW_RECORD_ENABLED      = Sql.CreateParameter(cmd, "@NEW_RECORD_ENABLED"     , "bool",   1);
			IDbDataParameter parEXISTING_RECORD_ENABLED = Sql.CreateParameter(cmd, "@EXISTING_RECORD_ENABLED", "bool",   1);
			IDbDataParameter parTITLE                   = Sql.CreateParameter(cmd, "@TITLE"                  , "string", 100);
			IDbDataParameter parALTERNATE_VIEW          = Sql.CreateParameter(cmd, "@ALTERNATE_VIEW"         , "string",  50);
			IDbDataParameter parRELATIONSHIP_ENABLED    = Sql.CreateParameter(cmd, "@RELATIONSHIP_ENABLED"   , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_Update
		/// <summary>
		/// spEDITVIEWS_Update
		/// </summary>
		public void spEDITVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, Guid gNEW_EVENT_ID, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, Guid gVALIDATION_EVENT_ID, Guid gPRE_SAVE_EVENT_ID, Guid gPOST_SAVE_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_Update";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
							IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
							IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  50);
							IDbDataParameter parLABEL_WIDTH         = Sql.AddParameter(cmd, "@LABEL_WIDTH"        , sLABEL_WIDTH          ,  10);
							IDbDataParameter parFIELD_WIDTH         = Sql.AddParameter(cmd, "@FIELD_WIDTH"        , sFIELD_WIDTH          ,  10);
							IDbDataParameter parDATA_COLUMNS        = Sql.AddParameter(cmd, "@DATA_COLUMNS"       , nDATA_COLUMNS         );
							IDbDataParameter parNEW_EVENT_ID        = Sql.AddParameter(cmd, "@NEW_EVENT_ID"       , gNEW_EVENT_ID         );
							IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID"  , gPRE_LOAD_EVENT_ID    );
							IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID" , gPOST_LOAD_EVENT_ID   );
							IDbDataParameter parVALIDATION_EVENT_ID = Sql.AddParameter(cmd, "@VALIDATION_EVENT_ID", gVALIDATION_EVENT_ID  );
							IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_SAVE_EVENT_ID"  , gPRE_SAVE_EVENT_ID    );
							IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.AddParameter(cmd, "@POST_SAVE_EVENT_ID" , gPOST_SAVE_EVENT_ID   );
							IDbDataParameter parSCRIPT              = Sql.AddParameter(cmd, "@SCRIPT"             , sSCRIPT               );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_Update
		/// <summary>
		/// spEDITVIEWS_Update
		/// </summary>
		public void spEDITVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sLABEL_WIDTH, string sFIELD_WIDTH, Int32 nDATA_COLUMNS, Guid gNEW_EVENT_ID, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, Guid gVALIDATION_EVENT_ID, Guid gPRE_SAVE_EVENT_ID, Guid gPOST_SAVE_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_Update";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
				IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
				IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  50);
				IDbDataParameter parLABEL_WIDTH         = Sql.AddParameter(cmd, "@LABEL_WIDTH"        , sLABEL_WIDTH          ,  10);
				IDbDataParameter parFIELD_WIDTH         = Sql.AddParameter(cmd, "@FIELD_WIDTH"        , sFIELD_WIDTH          ,  10);
				IDbDataParameter parDATA_COLUMNS        = Sql.AddParameter(cmd, "@DATA_COLUMNS"       , nDATA_COLUMNS         );
				IDbDataParameter parNEW_EVENT_ID        = Sql.AddParameter(cmd, "@NEW_EVENT_ID"       , gNEW_EVENT_ID         );
				IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID"  , gPRE_LOAD_EVENT_ID    );
				IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID" , gPOST_LOAD_EVENT_ID   );
				IDbDataParameter parVALIDATION_EVENT_ID = Sql.AddParameter(cmd, "@VALIDATION_EVENT_ID", gVALIDATION_EVENT_ID  );
				IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_SAVE_EVENT_ID"  , gPRE_SAVE_EVENT_ID    );
				IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.AddParameter(cmd, "@POST_SAVE_EVENT_ID" , gPOST_SAVE_EVENT_ID   );
				IDbDataParameter parSCRIPT              = Sql.AddParameter(cmd, "@SCRIPT"             , sSCRIPT               );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdEDITVIEWS_Update
		/// <summary>
		/// spEDITVIEWS_Update
		/// </summary>
		public IDbCommand cmdEDITVIEWS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_Update";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parNAME                = Sql.CreateParameter(cmd, "@NAME"               , "string",  50);
			IDbDataParameter parMODULE_NAME         = Sql.CreateParameter(cmd, "@MODULE_NAME"        , "string",  25);
			IDbDataParameter parVIEW_NAME           = Sql.CreateParameter(cmd, "@VIEW_NAME"          , "string",  50);
			IDbDataParameter parLABEL_WIDTH         = Sql.CreateParameter(cmd, "@LABEL_WIDTH"        , "string",  10);
			IDbDataParameter parFIELD_WIDTH         = Sql.CreateParameter(cmd, "@FIELD_WIDTH"        , "string",  10);
			IDbDataParameter parDATA_COLUMNS        = Sql.CreateParameter(cmd, "@DATA_COLUMNS"       , "Int32",   4);
			IDbDataParameter parNEW_EVENT_ID        = Sql.CreateParameter(cmd, "@NEW_EVENT_ID"       , "Guid",  16);
			IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID"  , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parVALIDATION_EVENT_ID = Sql.CreateParameter(cmd, "@VALIDATION_EVENT_ID", "Guid",  16);
			IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.CreateParameter(cmd, "@PRE_SAVE_EVENT_ID"  , "Guid",  16);
			IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.CreateParameter(cmd, "@POST_SAVE_EVENT_ID" , "Guid",  16);
			IDbDataParameter parSCRIPT              = Sql.CreateParameter(cmd, "@SCRIPT"             , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spEDITVIEWS_UpdateEvents
		/// <summary>
		/// spEDITVIEWS_UpdateEvents
		/// </summary>
		public void spEDITVIEWS_UpdateEvents(string sNAME, Guid gNEW_EVENT_ID, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, Guid gVALIDATION_EVENT_ID, Guid gPRE_SAVE_EVENT_ID, Guid gPOST_SAVE_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spEDITVIEWS_UpdateEvents";
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
							IDbDataParameter parNEW_EVENT_ID        = Sql.AddParameter(cmd, "@NEW_EVENT_ID"       , gNEW_EVENT_ID         );
							IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID"  , gPRE_LOAD_EVENT_ID    );
							IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID" , gPOST_LOAD_EVENT_ID   );
							IDbDataParameter parVALIDATION_EVENT_ID = Sql.AddParameter(cmd, "@VALIDATION_EVENT_ID", gVALIDATION_EVENT_ID  );
							IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_SAVE_EVENT_ID"  , gPRE_SAVE_EVENT_ID    );
							IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.AddParameter(cmd, "@POST_SAVE_EVENT_ID" , gPOST_SAVE_EVENT_ID   );
							IDbDataParameter parSCRIPT              = Sql.AddParameter(cmd, "@SCRIPT"             , sSCRIPT               );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spEDITVIEWS_UpdateEvents
		/// <summary>
		/// spEDITVIEWS_UpdateEvents
		/// </summary>
		public void spEDITVIEWS_UpdateEvents(string sNAME, Guid gNEW_EVENT_ID, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, Guid gVALIDATION_EVENT_ID, Guid gPRE_SAVE_EVENT_ID, Guid gPOST_SAVE_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spEDITVIEWS_UpdateEvents";
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parNAME                = Sql.AddParameter(cmd, "@NAME"               , sNAME                 ,  50);
				IDbDataParameter parNEW_EVENT_ID        = Sql.AddParameter(cmd, "@NEW_EVENT_ID"       , gNEW_EVENT_ID         );
				IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID"  , gPRE_LOAD_EVENT_ID    );
				IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID" , gPOST_LOAD_EVENT_ID   );
				IDbDataParameter parVALIDATION_EVENT_ID = Sql.AddParameter(cmd, "@VALIDATION_EVENT_ID", gVALIDATION_EVENT_ID  );
				IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.AddParameter(cmd, "@PRE_SAVE_EVENT_ID"  , gPRE_SAVE_EVENT_ID    );
				IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.AddParameter(cmd, "@POST_SAVE_EVENT_ID" , gPOST_SAVE_EVENT_ID   );
				IDbDataParameter parSCRIPT              = Sql.AddParameter(cmd, "@SCRIPT"             , sSCRIPT               );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdEDITVIEWS_UpdateEvents
		/// <summary>
		/// spEDITVIEWS_UpdateEvents
		/// </summary>
		public IDbCommand cmdEDITVIEWS_UpdateEvents(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spEDITVIEWS_UpdateEvents";
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parNAME                = Sql.CreateParameter(cmd, "@NAME"               , "string",  50);
			IDbDataParameter parNEW_EVENT_ID        = Sql.CreateParameter(cmd, "@NEW_EVENT_ID"       , "Guid",  16);
			IDbDataParameter parPRE_LOAD_EVENT_ID   = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID"  , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parVALIDATION_EVENT_ID = Sql.CreateParameter(cmd, "@VALIDATION_EVENT_ID", "Guid",  16);
			IDbDataParameter parPRE_SAVE_EVENT_ID   = Sql.CreateParameter(cmd, "@PRE_SAVE_EVENT_ID"  , "Guid",  16);
			IDbDataParameter parPOST_SAVE_EVENT_ID  = Sql.CreateParameter(cmd, "@POST_SAVE_EVENT_ID" , "Guid",  16);
			IDbDataParameter parSCRIPT              = Sql.CreateParameter(cmd, "@SCRIPT"             , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spFIELD_VALIDATORS_Delete
		/// <summary>
		/// spFIELD_VALIDATORS_Delete
		/// </summary>
		public void spFIELD_VALIDATORS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELD_VALIDATORS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELD_VALIDATORS_Delete
		/// <summary>
		/// spFIELD_VALIDATORS_Delete
		/// </summary>
		public void spFIELD_VALIDATORS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELD_VALIDATORS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELD_VALIDATORS_Delete
		/// <summary>
		/// spFIELD_VALIDATORS_Delete
		/// </summary>
		public IDbCommand cmdFIELD_VALIDATORS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELD_VALIDATORS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spFIELD_VALIDATORS_InsertRegEx
		/// <summary>
		/// spFIELD_VALIDATORS_InsertRegEx
		/// </summary>
		public void spFIELD_VALIDATORS_InsertRegEx(string sNAME, string sREGULAR_EXPRESSION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELD_VALIDATORS_InsertRegEx";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parREGULAR_EXPRESSION = Sql.AddParameter(cmd, "@REGULAR_EXPRESSION", sREGULAR_EXPRESSION  , 2000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELD_VALIDATORS_InsertRegEx
		/// <summary>
		/// spFIELD_VALIDATORS_InsertRegEx
		/// </summary>
		public void spFIELD_VALIDATORS_InsertRegEx(string sNAME, string sREGULAR_EXPRESSION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELD_VALIDATORS_InsertRegEx";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parREGULAR_EXPRESSION = Sql.AddParameter(cmd, "@REGULAR_EXPRESSION", sREGULAR_EXPRESSION  , 2000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELD_VALIDATORS_InsertRegEx
		/// <summary>
		/// spFIELD_VALIDATORS_InsertRegEx
		/// </summary>
		public IDbCommand cmdFIELD_VALIDATORS_InsertRegEx(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELD_VALIDATORS_InsertRegEx";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parREGULAR_EXPRESSION = Sql.CreateParameter(cmd, "@REGULAR_EXPRESSION", "string", 2000);
			return cmd;
		}
		#endregion

		#region spFIELD_VALIDATORS_Update
		/// <summary>
		/// spFIELD_VALIDATORS_Update
		/// </summary>
		public void spFIELD_VALIDATORS_Update(ref Guid gID, string sNAME, string sVALIDATION_TYPE, string sREGULAR_EXPRESSION, string sDATA_TYPE, string sMININUM_VALUE, string sMAXIMUM_VALUE, string sCOMPARE_OPERATOR)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELD_VALIDATORS_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parVALIDATION_TYPE    = Sql.AddParameter(cmd, "@VALIDATION_TYPE"   , sVALIDATION_TYPE     ,  50);
							IDbDataParameter parREGULAR_EXPRESSION = Sql.AddParameter(cmd, "@REGULAR_EXPRESSION", sREGULAR_EXPRESSION  , 2000);
							IDbDataParameter parDATA_TYPE          = Sql.AddParameter(cmd, "@DATA_TYPE"         , sDATA_TYPE           ,  25);
							IDbDataParameter parMININUM_VALUE      = Sql.AddParameter(cmd, "@MININUM_VALUE"     , sMININUM_VALUE       , 255);
							IDbDataParameter parMAXIMUM_VALUE      = Sql.AddParameter(cmd, "@MAXIMUM_VALUE"     , sMAXIMUM_VALUE       , 255);
							IDbDataParameter parCOMPARE_OPERATOR   = Sql.AddParameter(cmd, "@COMPARE_OPERATOR"  , sCOMPARE_OPERATOR    ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELD_VALIDATORS_Update
		/// <summary>
		/// spFIELD_VALIDATORS_Update
		/// </summary>
		public void spFIELD_VALIDATORS_Update(ref Guid gID, string sNAME, string sVALIDATION_TYPE, string sREGULAR_EXPRESSION, string sDATA_TYPE, string sMININUM_VALUE, string sMAXIMUM_VALUE, string sCOMPARE_OPERATOR, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELD_VALIDATORS_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parVALIDATION_TYPE    = Sql.AddParameter(cmd, "@VALIDATION_TYPE"   , sVALIDATION_TYPE     ,  50);
				IDbDataParameter parREGULAR_EXPRESSION = Sql.AddParameter(cmd, "@REGULAR_EXPRESSION", sREGULAR_EXPRESSION  , 2000);
				IDbDataParameter parDATA_TYPE          = Sql.AddParameter(cmd, "@DATA_TYPE"         , sDATA_TYPE           ,  25);
				IDbDataParameter parMININUM_VALUE      = Sql.AddParameter(cmd, "@MININUM_VALUE"     , sMININUM_VALUE       , 255);
				IDbDataParameter parMAXIMUM_VALUE      = Sql.AddParameter(cmd, "@MAXIMUM_VALUE"     , sMAXIMUM_VALUE       , 255);
				IDbDataParameter parCOMPARE_OPERATOR   = Sql.AddParameter(cmd, "@COMPARE_OPERATOR"  , sCOMPARE_OPERATOR    ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdFIELD_VALIDATORS_Update
		/// <summary>
		/// spFIELD_VALIDATORS_Update
		/// </summary>
		public IDbCommand cmdFIELD_VALIDATORS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELD_VALIDATORS_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parVALIDATION_TYPE    = Sql.CreateParameter(cmd, "@VALIDATION_TYPE"   , "string",  50);
			IDbDataParameter parREGULAR_EXPRESSION = Sql.CreateParameter(cmd, "@REGULAR_EXPRESSION", "string", 2000);
			IDbDataParameter parDATA_TYPE          = Sql.CreateParameter(cmd, "@DATA_TYPE"         , "string",  25);
			IDbDataParameter parMININUM_VALUE      = Sql.CreateParameter(cmd, "@MININUM_VALUE"     , "string", 255);
			IDbDataParameter parMAXIMUM_VALUE      = Sql.CreateParameter(cmd, "@MAXIMUM_VALUE"     , "string", 255);
			IDbDataParameter parCOMPARE_OPERATOR   = Sql.CreateParameter(cmd, "@COMPARE_OPERATOR"  , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spFIELDS_META_DATA_Delete
		/// <summary>
		/// spFIELDS_META_DATA_Delete
		/// </summary>
		public void spFIELDS_META_DATA_Delete(Guid gID, bool bDISABLE_RECOMPILE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELDS_META_DATA_Delete";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELDS_META_DATA_Delete
		/// <summary>
		/// spFIELDS_META_DATA_Delete
		/// </summary>
		public void spFIELDS_META_DATA_Delete(Guid gID, bool bDISABLE_RECOMPILE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELDS_META_DATA_Delete";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELDS_META_DATA_Delete
		/// <summary>
		/// spFIELDS_META_DATA_Delete
		/// </summary>
		public IDbCommand cmdFIELDS_META_DATA_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELDS_META_DATA_Delete";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parDISABLE_RECOMPILE = Sql.CreateParameter(cmd, "@DISABLE_RECOMPILE", "bool",   1);
			return cmd;
		}
		#endregion

		#region spFIELDS_META_DATA_DeleteByName
		/// <summary>
		/// spFIELDS_META_DATA_DeleteByName
		/// </summary>
		public void spFIELDS_META_DATA_DeleteByName(string sCUSTOM_MODULE, string sNAME, bool bDISABLE_RECOMPILE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spFIELDS_META_DATA_DeleteByNam";
							else
								cmd.CommandText = "spFIELDS_META_DATA_DeleteByName";
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parCUSTOM_MODULE     = Sql.AddParameter(cmd, "@CUSTOM_MODULE"    , sCUSTOM_MODULE      , 255);
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELDS_META_DATA_DeleteByName
		/// <summary>
		/// spFIELDS_META_DATA_DeleteByName
		/// </summary>
		public void spFIELDS_META_DATA_DeleteByName(string sCUSTOM_MODULE, string sNAME, bool bDISABLE_RECOMPILE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spFIELDS_META_DATA_DeleteByNam";
				else
					cmd.CommandText = "spFIELDS_META_DATA_DeleteByName";
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parCUSTOM_MODULE     = Sql.AddParameter(cmd, "@CUSTOM_MODULE"    , sCUSTOM_MODULE      , 255);
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELDS_META_DATA_DeleteByName
		/// <summary>
		/// spFIELDS_META_DATA_DeleteByName
		/// </summary>
		public IDbCommand cmdFIELDS_META_DATA_DeleteByName(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spFIELDS_META_DATA_DeleteByNam";
			else
				cmd.CommandText = "spFIELDS_META_DATA_DeleteByName";
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parCUSTOM_MODULE     = Sql.CreateParameter(cmd, "@CUSTOM_MODULE"    , "string", 255);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parDISABLE_RECOMPILE = Sql.CreateParameter(cmd, "@DISABLE_RECOMPILE", "bool",   1);
			return cmd;
		}
		#endregion

		#region spFIELDS_META_DATA_Insert
		/// <summary>
		/// spFIELDS_META_DATA_Insert
		/// </summary>
		public void spFIELDS_META_DATA_Insert(ref Guid gID, string sNAME, string sLABEL, string sLABEL_TERM, string sCUSTOM_MODULE, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, bool bAUDITED, string sDEFAULT_VALUE, string sDROPDOWN_LIST, bool bMASS_UPDATE, bool bDISABLE_RECOMPILE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELDS_META_DATA_Insert";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
							IDbDataParameter parLABEL             = Sql.AddParameter(cmd, "@LABEL"            , sLABEL              , 255);
							IDbDataParameter parLABEL_TERM        = Sql.AddParameter(cmd, "@LABEL_TERM"       , sLABEL_TERM         , 255);
							IDbDataParameter parCUSTOM_MODULE     = Sql.AddParameter(cmd, "@CUSTOM_MODULE"    , sCUSTOM_MODULE      , 255);
							IDbDataParameter parDATA_TYPE         = Sql.AddParameter(cmd, "@DATA_TYPE"        , sDATA_TYPE          , 255);
							IDbDataParameter parMAX_SIZE          = Sql.AddParameter(cmd, "@MAX_SIZE"         , nMAX_SIZE           );
							IDbDataParameter parREQUIRED          = Sql.AddParameter(cmd, "@REQUIRED"         , bREQUIRED           );
							IDbDataParameter parAUDITED           = Sql.AddParameter(cmd, "@AUDITED"          , bAUDITED            );
							IDbDataParameter parDEFAULT_VALUE     = Sql.AddParameter(cmd, "@DEFAULT_VALUE"    , sDEFAULT_VALUE      , 255);
							IDbDataParameter parDROPDOWN_LIST     = Sql.AddParameter(cmd, "@DROPDOWN_LIST"    , sDROPDOWN_LIST      ,  50);
							IDbDataParameter parMASS_UPDATE       = Sql.AddParameter(cmd, "@MASS_UPDATE"      , bMASS_UPDATE        );
							IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELDS_META_DATA_Insert
		/// <summary>
		/// spFIELDS_META_DATA_Insert
		/// </summary>
		public void spFIELDS_META_DATA_Insert(ref Guid gID, string sNAME, string sLABEL, string sLABEL_TERM, string sCUSTOM_MODULE, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, bool bAUDITED, string sDEFAULT_VALUE, string sDROPDOWN_LIST, bool bMASS_UPDATE, bool bDISABLE_RECOMPILE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELDS_META_DATA_Insert";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 255);
				IDbDataParameter parLABEL             = Sql.AddParameter(cmd, "@LABEL"            , sLABEL              , 255);
				IDbDataParameter parLABEL_TERM        = Sql.AddParameter(cmd, "@LABEL_TERM"       , sLABEL_TERM         , 255);
				IDbDataParameter parCUSTOM_MODULE     = Sql.AddParameter(cmd, "@CUSTOM_MODULE"    , sCUSTOM_MODULE      , 255);
				IDbDataParameter parDATA_TYPE         = Sql.AddParameter(cmd, "@DATA_TYPE"        , sDATA_TYPE          , 255);
				IDbDataParameter parMAX_SIZE          = Sql.AddParameter(cmd, "@MAX_SIZE"         , nMAX_SIZE           );
				IDbDataParameter parREQUIRED          = Sql.AddParameter(cmd, "@REQUIRED"         , bREQUIRED           );
				IDbDataParameter parAUDITED           = Sql.AddParameter(cmd, "@AUDITED"          , bAUDITED            );
				IDbDataParameter parDEFAULT_VALUE     = Sql.AddParameter(cmd, "@DEFAULT_VALUE"    , sDEFAULT_VALUE      , 255);
				IDbDataParameter parDROPDOWN_LIST     = Sql.AddParameter(cmd, "@DROPDOWN_LIST"    , sDROPDOWN_LIST      ,  50);
				IDbDataParameter parMASS_UPDATE       = Sql.AddParameter(cmd, "@MASS_UPDATE"      , bMASS_UPDATE        );
				IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdFIELDS_META_DATA_Insert
		/// <summary>
		/// spFIELDS_META_DATA_Insert
		/// </summary>
		public IDbCommand cmdFIELDS_META_DATA_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELDS_META_DATA_Insert";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 255);
			IDbDataParameter parLABEL             = Sql.CreateParameter(cmd, "@LABEL"            , "string", 255);
			IDbDataParameter parLABEL_TERM        = Sql.CreateParameter(cmd, "@LABEL_TERM"       , "string", 255);
			IDbDataParameter parCUSTOM_MODULE     = Sql.CreateParameter(cmd, "@CUSTOM_MODULE"    , "string", 255);
			IDbDataParameter parDATA_TYPE         = Sql.CreateParameter(cmd, "@DATA_TYPE"        , "string", 255);
			IDbDataParameter parMAX_SIZE          = Sql.CreateParameter(cmd, "@MAX_SIZE"         , "Int32",   4);
			IDbDataParameter parREQUIRED          = Sql.CreateParameter(cmd, "@REQUIRED"         , "bool",   1);
			IDbDataParameter parAUDITED           = Sql.CreateParameter(cmd, "@AUDITED"          , "bool",   1);
			IDbDataParameter parDEFAULT_VALUE     = Sql.CreateParameter(cmd, "@DEFAULT_VALUE"    , "string", 255);
			IDbDataParameter parDROPDOWN_LIST     = Sql.CreateParameter(cmd, "@DROPDOWN_LIST"    , "string",  50);
			IDbDataParameter parMASS_UPDATE       = Sql.CreateParameter(cmd, "@MASS_UPDATE"      , "bool",   1);
			IDbDataParameter parDISABLE_RECOMPILE = Sql.CreateParameter(cmd, "@DISABLE_RECOMPILE", "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spFIELDS_META_DATA_Update
		/// <summary>
		/// spFIELDS_META_DATA_Update
		/// </summary>
		public void spFIELDS_META_DATA_Update(Guid gID, Int32 nMAX_SIZE, bool bREQUIRED, bool bAUDITED, string sDEFAULT_VALUE, string sDROPDOWN_LIST, bool bMASS_UPDATE, bool bDISABLE_RECOMPILE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFIELDS_META_DATA_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parMAX_SIZE          = Sql.AddParameter(cmd, "@MAX_SIZE"         , nMAX_SIZE           );
							IDbDataParameter parREQUIRED          = Sql.AddParameter(cmd, "@REQUIRED"         , bREQUIRED           );
							IDbDataParameter parAUDITED           = Sql.AddParameter(cmd, "@AUDITED"          , bAUDITED            );
							IDbDataParameter parDEFAULT_VALUE     = Sql.AddParameter(cmd, "@DEFAULT_VALUE"    , sDEFAULT_VALUE      , 255);
							IDbDataParameter parDROPDOWN_LIST     = Sql.AddParameter(cmd, "@DROPDOWN_LIST"    , sDROPDOWN_LIST      ,  50);
							IDbDataParameter parMASS_UPDATE       = Sql.AddParameter(cmd, "@MASS_UPDATE"      , bMASS_UPDATE        );
							IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFIELDS_META_DATA_Update
		/// <summary>
		/// spFIELDS_META_DATA_Update
		/// </summary>
		public void spFIELDS_META_DATA_Update(Guid gID, Int32 nMAX_SIZE, bool bREQUIRED, bool bAUDITED, string sDEFAULT_VALUE, string sDROPDOWN_LIST, bool bMASS_UPDATE, bool bDISABLE_RECOMPILE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFIELDS_META_DATA_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parMAX_SIZE          = Sql.AddParameter(cmd, "@MAX_SIZE"         , nMAX_SIZE           );
				IDbDataParameter parREQUIRED          = Sql.AddParameter(cmd, "@REQUIRED"         , bREQUIRED           );
				IDbDataParameter parAUDITED           = Sql.AddParameter(cmd, "@AUDITED"          , bAUDITED            );
				IDbDataParameter parDEFAULT_VALUE     = Sql.AddParameter(cmd, "@DEFAULT_VALUE"    , sDEFAULT_VALUE      , 255);
				IDbDataParameter parDROPDOWN_LIST     = Sql.AddParameter(cmd, "@DROPDOWN_LIST"    , sDROPDOWN_LIST      ,  50);
				IDbDataParameter parMASS_UPDATE       = Sql.AddParameter(cmd, "@MASS_UPDATE"      , bMASS_UPDATE        );
				IDbDataParameter parDISABLE_RECOMPILE = Sql.AddParameter(cmd, "@DISABLE_RECOMPILE", bDISABLE_RECOMPILE  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFIELDS_META_DATA_Update
		/// <summary>
		/// spFIELDS_META_DATA_Update
		/// </summary>
		public IDbCommand cmdFIELDS_META_DATA_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFIELDS_META_DATA_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parMAX_SIZE          = Sql.CreateParameter(cmd, "@MAX_SIZE"         , "Int32",   4);
			IDbDataParameter parREQUIRED          = Sql.CreateParameter(cmd, "@REQUIRED"         , "bool",   1);
			IDbDataParameter parAUDITED           = Sql.CreateParameter(cmd, "@AUDITED"          , "bool",   1);
			IDbDataParameter parDEFAULT_VALUE     = Sql.CreateParameter(cmd, "@DEFAULT_VALUE"    , "string", 255);
			IDbDataParameter parDROPDOWN_LIST     = Sql.CreateParameter(cmd, "@DROPDOWN_LIST"    , "string",  50);
			IDbDataParameter parMASS_UPDATE       = Sql.CreateParameter(cmd, "@MASS_UPDATE"      , "bool",   1);
			IDbDataParameter parDISABLE_RECOMPILE = Sql.CreateParameter(cmd, "@DISABLE_RECOMPILE", "bool",   1);
			return cmd;
		}
		#endregion

		#region spFULLTEXT_ConfigCatalog
		/// <summary>
		/// spFULLTEXT_ConfigCatalog
		/// </summary>
		public void spFULLTEXT_ConfigCatalog(string sOPERATION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFULLTEXT_ConfigCatalog";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPERATION        = Sql.AddParameter(cmd, "@OPERATION"       , sOPERATION         ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFULLTEXT_ConfigCatalog
		/// <summary>
		/// spFULLTEXT_ConfigCatalog
		/// </summary>
		public void spFULLTEXT_ConfigCatalog(string sOPERATION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFULLTEXT_ConfigCatalog";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPERATION        = Sql.AddParameter(cmd, "@OPERATION"       , sOPERATION         ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFULLTEXT_ConfigCatalog
		/// <summary>
		/// spFULLTEXT_ConfigCatalog
		/// </summary>
		public IDbCommand cmdFULLTEXT_ConfigCatalog(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFULLTEXT_ConfigCatalog";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPERATION        = Sql.CreateParameter(cmd, "@OPERATION"       , "string",  25);
			return cmd;
		}
		#endregion

		#region spFULLTEXT_UpdateLayouts
		/// <summary>
		/// spFULLTEXT_UpdateLayouts
		/// </summary>
		public void spFULLTEXT_UpdateLayouts(string sOPERATION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spFULLTEXT_UpdateLayouts";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOPERATION        = Sql.AddParameter(cmd, "@OPERATION"       , sOPERATION         ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spFULLTEXT_UpdateLayouts
		/// <summary>
		/// spFULLTEXT_UpdateLayouts
		/// </summary>
		public void spFULLTEXT_UpdateLayouts(string sOPERATION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spFULLTEXT_UpdateLayouts";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOPERATION        = Sql.AddParameter(cmd, "@OPERATION"       , sOPERATION         ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdFULLTEXT_UpdateLayouts
		/// <summary>
		/// spFULLTEXT_UpdateLayouts
		/// </summary>
		public IDbCommand cmdFULLTEXT_UpdateLayouts(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spFULLTEXT_UpdateLayouts";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOPERATION        = Sql.CreateParameter(cmd, "@OPERATION"       , "string",  25);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_Delete
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Delete
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_Delete
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Delete
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_Delete
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Delete
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBound
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBound
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBound(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBound";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBound
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBound
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBound(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBound";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsBound
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBound
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsBound(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBound";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBoundDate
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundDate
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBoundDate(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDa";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDate";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parDATA_FORMAT     = Sql.AddParameter(cmd, "@DATA_FORMAT"    , sDATA_FORMAT      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBoundDate
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundDate
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBoundDate(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDa";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDate";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parDATA_FORMAT     = Sql.AddParameter(cmd, "@DATA_FORMAT"    , sDATA_FORMAT      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsBoundDate
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundDate
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsBoundDate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDa";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundDate";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parDATA_FORMAT     = Sql.CreateParameter(cmd, "@DATA_FORMAT"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBoundList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundList
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBoundList(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundLi";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundList";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parLIST_NAME       = Sql.AddParameter(cmd, "@LIST_NAME"      , sLIST_NAME        ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsBoundList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundList
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsBoundList(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundLi";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundList";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parLIST_NAME       = Sql.AddParameter(cmd, "@LIST_NAME"      , sLIST_NAME        ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsBoundList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsBoundList
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsBoundList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundLi";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsBoundList";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parLIST_NAME       = Sql.CreateParameter(cmd, "@LIST_NAME"      , "string",  50);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsDependList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsDependList
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsDependList(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sPARENT_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependL";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependList";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parPARENT_FIELD    = Sql.AddParameter(cmd, "@PARENT_FIELD"   , sPARENT_FIELD     ,  30);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsDependList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsDependList
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsDependList(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sPARENT_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependL";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependList";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parPARENT_FIELD    = Sql.AddParameter(cmd, "@PARENT_FIELD"   , sPARENT_FIELD     ,  30);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsDependList
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsDependList
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsDependList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependL";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsDependList";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parPARENT_FIELD    = Sql.CreateParameter(cmd, "@PARENT_FIELD"   , "string",  30);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsField
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsField
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsField(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsField";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsField
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsField
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsField(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsField";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parSORT_EXPRESSION = Sql.AddParameter(cmd, "@SORT_EXPRESSION", sSORT_EXPRESSION  ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsField
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsField
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsField(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsField";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parSORT_EXPRESSION = Sql.CreateParameter(cmd, "@SORT_EXPRESSION", "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHidden
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHidden
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHidden(string sGRID_NAME, string sDATA_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHidden";
							IDbDataParameter parGRID_NAME  = Sql.AddParameter(cmd, "@GRID_NAME" , sGRID_NAME   ,  50);
							IDbDataParameter parDATA_FIELD = Sql.AddParameter(cmd, "@DATA_FIELD", sDATA_FIELD  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHidden
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHidden
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHidden(string sGRID_NAME, string sDATA_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHidden";
				IDbDataParameter parGRID_NAME  = Sql.AddParameter(cmd, "@GRID_NAME" , sGRID_NAME   ,  50);
				IDbDataParameter parDATA_FIELD = Sql.AddParameter(cmd, "@DATA_FIELD", sDATA_FIELD  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsHidden
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHidden
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsHidden(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHidden";
			IDbDataParameter parGRID_NAME  = Sql.CreateParameter(cmd, "@GRID_NAME" , "string",  50);
			IDbDataParameter parDATA_FIELD = Sql.CreateParameter(cmd, "@DATA_FIELD", "string",  50);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHover
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHover
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHover(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHover";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
							IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
							IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHover
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHover
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHover(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHover";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
				IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
				IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsHover
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHover
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsHover(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHover";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parURL_FIELD       = Sql.CreateParameter(cmd, "@URL_FIELD"      , "string", 104857600);
			IDbDataParameter parURL_FORMAT      = Sql.CreateParameter(cmd, "@URL_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_TARGET      = Sql.CreateParameter(cmd, "@URL_TARGET"     , "string",  60);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHyperLink
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHyperLink
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHyperLink(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sURL_MODULE, string sURL_ASSIGNED_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLi";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLink";
							IDbDataParameter parGRID_NAME          = Sql.AddParameter(cmd, "@GRID_NAME"         , sGRID_NAME           ,  50);
							IDbDataParameter parCOLUMN_INDEX       = Sql.AddParameter(cmd, "@COLUMN_INDEX"      , nCOLUMN_INDEX        );
							IDbDataParameter parHEADER_TEXT        = Sql.AddParameter(cmd, "@HEADER_TEXT"       , sHEADER_TEXT         , 150);
							IDbDataParameter parDATA_FIELD         = Sql.AddParameter(cmd, "@DATA_FIELD"        , sDATA_FIELD          ,  50);
							IDbDataParameter parSORT_EXPRESSION    = Sql.AddParameter(cmd, "@SORT_EXPRESSION"   , sSORT_EXPRESSION     ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH    = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"   , sITEMSTYLE_WIDTH     ,  10);
							IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS", sITEMSTYLE_CSSCLASS  ,  50);
							IDbDataParameter parURL_FIELD          = Sql.AddParameter(cmd, "@URL_FIELD"         , sURL_FIELD           );
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          );
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  60);
							IDbDataParameter parURL_MODULE         = Sql.AddParameter(cmd, "@URL_MODULE"        , sURL_MODULE          ,  25);
							IDbDataParameter parURL_ASSIGNED_FIELD = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD", sURL_ASSIGNED_FIELD  ,  30);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsHyperLink
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHyperLink
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsHyperLink(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sURL_MODULE, string sURL_ASSIGNED_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLi";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLink";
				IDbDataParameter parGRID_NAME          = Sql.AddParameter(cmd, "@GRID_NAME"         , sGRID_NAME           ,  50);
				IDbDataParameter parCOLUMN_INDEX       = Sql.AddParameter(cmd, "@COLUMN_INDEX"      , nCOLUMN_INDEX        );
				IDbDataParameter parHEADER_TEXT        = Sql.AddParameter(cmd, "@HEADER_TEXT"       , sHEADER_TEXT         , 150);
				IDbDataParameter parDATA_FIELD         = Sql.AddParameter(cmd, "@DATA_FIELD"        , sDATA_FIELD          ,  50);
				IDbDataParameter parSORT_EXPRESSION    = Sql.AddParameter(cmd, "@SORT_EXPRESSION"   , sSORT_EXPRESSION     ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH    = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"   , sITEMSTYLE_WIDTH     ,  10);
				IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS", sITEMSTYLE_CSSCLASS  ,  50);
				IDbDataParameter parURL_FIELD          = Sql.AddParameter(cmd, "@URL_FIELD"         , sURL_FIELD           );
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          );
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  60);
				IDbDataParameter parURL_MODULE         = Sql.AddParameter(cmd, "@URL_MODULE"        , sURL_MODULE          ,  25);
				IDbDataParameter parURL_ASSIGNED_FIELD = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD", sURL_ASSIGNED_FIELD  ,  30);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsHyperLink
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsHyperLink
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsHyperLink(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLi";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsHyperLink";
			IDbDataParameter parGRID_NAME          = Sql.CreateParameter(cmd, "@GRID_NAME"         , "string",  50);
			IDbDataParameter parCOLUMN_INDEX       = Sql.CreateParameter(cmd, "@COLUMN_INDEX"      , "Int32",   4);
			IDbDataParameter parHEADER_TEXT        = Sql.CreateParameter(cmd, "@HEADER_TEXT"       , "string", 150);
			IDbDataParameter parDATA_FIELD         = Sql.CreateParameter(cmd, "@DATA_FIELD"        , "string",  50);
			IDbDataParameter parSORT_EXPRESSION    = Sql.CreateParameter(cmd, "@SORT_EXPRESSION"   , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH    = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH"   , "string",  10);
			IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.CreateParameter(cmd, "@ITEMSTYLE_CSSCLASS", "string",  50);
			IDbDataParameter parURL_FIELD          = Sql.CreateParameter(cmd, "@URL_FIELD"         , "string", 104857600);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 104857600);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  60);
			IDbDataParameter parURL_MODULE         = Sql.CreateParameter(cmd, "@URL_MODULE"        , "string",  25);
			IDbDataParameter parURL_ASSIGNED_FIELD = Sql.CreateParameter(cmd, "@URL_ASSIGNED_FIELD", "string",  30);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsImageButton
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsImageButton
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsImageButton(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageBu";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageButton";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
							IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
							IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsImageButton
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsImageButton
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsImageButton(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageBu";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageButton";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
				IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
				IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsImageButton
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsImageButton
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsImageButton(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageBu";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsImageButton";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parURL_FIELD       = Sql.CreateParameter(cmd, "@URL_FIELD"      , "string", 104857600);
			IDbDataParameter parURL_FORMAT      = Sql.CreateParameter(cmd, "@URL_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_TARGET      = Sql.CreateParameter(cmd, "@URL_TARGET"     , "string",  60);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsJavaImage
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaImage
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsJavaImage(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaIma";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaImage";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
							IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
							IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsJavaImage
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaImage
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsJavaImage(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaIma";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaImage";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
				IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
				IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsJavaImage
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaImage
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsJavaImage(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaIma";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaImage";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parURL_FIELD       = Sql.CreateParameter(cmd, "@URL_FIELD"      , "string", 104857600);
			IDbDataParameter parURL_FORMAT      = Sql.CreateParameter(cmd, "@URL_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_TARGET      = Sql.CreateParameter(cmd, "@URL_TARGET"     , "string",  60);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsJavaScript
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaScript
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsJavaScript(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScr";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScript";
							IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
							IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
							IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
							IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
							IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
							IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
							IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsJavaScript
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaScript
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsJavaScript(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sITEMSTYLE_WIDTH, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScr";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScript";
				IDbDataParameter parGRID_NAME       = Sql.AddParameter(cmd, "@GRID_NAME"      , sGRID_NAME        ,  50);
				IDbDataParameter parCOLUMN_INDEX    = Sql.AddParameter(cmd, "@COLUMN_INDEX"   , nCOLUMN_INDEX     );
				IDbDataParameter parHEADER_TEXT     = Sql.AddParameter(cmd, "@HEADER_TEXT"    , sHEADER_TEXT      , 150);
				IDbDataParameter parDATA_FIELD      = Sql.AddParameter(cmd, "@DATA_FIELD"     , sDATA_FIELD       ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH", sITEMSTYLE_WIDTH  ,  10);
				IDbDataParameter parURL_FIELD       = Sql.AddParameter(cmd, "@URL_FIELD"      , sURL_FIELD        );
				IDbDataParameter parURL_FORMAT      = Sql.AddParameter(cmd, "@URL_FORMAT"     , sURL_FORMAT       );
				IDbDataParameter parURL_TARGET      = Sql.AddParameter(cmd, "@URL_TARGET"     , sURL_TARGET       ,  60);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsJavaScript
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsJavaScript
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsJavaScript(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScr";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsJavaScript";
			IDbDataParameter parGRID_NAME       = Sql.CreateParameter(cmd, "@GRID_NAME"      , "string",  50);
			IDbDataParameter parCOLUMN_INDEX    = Sql.CreateParameter(cmd, "@COLUMN_INDEX"   , "Int32",   4);
			IDbDataParameter parHEADER_TEXT     = Sql.CreateParameter(cmd, "@HEADER_TEXT"    , "string", 150);
			IDbDataParameter parDATA_FIELD      = Sql.CreateParameter(cmd, "@DATA_FIELD"     , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH", "string",  10);
			IDbDataParameter parURL_FIELD       = Sql.CreateParameter(cmd, "@URL_FIELD"      , "string", 104857600);
			IDbDataParameter parURL_FORMAT      = Sql.CreateParameter(cmd, "@URL_FORMAT"     , "string", 104857600);
			IDbDataParameter parURL_TARGET      = Sql.CreateParameter(cmd, "@URL_TARGET"     , "string",  60);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsModule
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsModule
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsModule(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sURL_MODULE, string sURL_ASSIGNED_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsModule";
							IDbDataParameter parGRID_NAME          = Sql.AddParameter(cmd, "@GRID_NAME"         , sGRID_NAME           ,  50);
							IDbDataParameter parCOLUMN_INDEX       = Sql.AddParameter(cmd, "@COLUMN_INDEX"      , nCOLUMN_INDEX        );
							IDbDataParameter parHEADER_TEXT        = Sql.AddParameter(cmd, "@HEADER_TEXT"       , sHEADER_TEXT         , 150);
							IDbDataParameter parDATA_FIELD         = Sql.AddParameter(cmd, "@DATA_FIELD"        , sDATA_FIELD          ,  50);
							IDbDataParameter parSORT_EXPRESSION    = Sql.AddParameter(cmd, "@SORT_EXPRESSION"   , sSORT_EXPRESSION     ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH    = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"   , sITEMSTYLE_WIDTH     ,  10);
							IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS", sITEMSTYLE_CSSCLASS  ,  50);
							IDbDataParameter parURL_FIELD          = Sql.AddParameter(cmd, "@URL_FIELD"         , sURL_FIELD           );
							IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          );
							IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  60);
							IDbDataParameter parURL_MODULE         = Sql.AddParameter(cmd, "@URL_MODULE"        , sURL_MODULE          ,  25);
							IDbDataParameter parURL_ASSIGNED_FIELD = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD", sURL_ASSIGNED_FIELD  ,  30);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_InsModule
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsModule
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_InsModule(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sHEADER_TEXT, string sDATA_FIELD, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sURL_MODULE, string sURL_ASSIGNED_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsModule";
				IDbDataParameter parGRID_NAME          = Sql.AddParameter(cmd, "@GRID_NAME"         , sGRID_NAME           ,  50);
				IDbDataParameter parCOLUMN_INDEX       = Sql.AddParameter(cmd, "@COLUMN_INDEX"      , nCOLUMN_INDEX        );
				IDbDataParameter parHEADER_TEXT        = Sql.AddParameter(cmd, "@HEADER_TEXT"       , sHEADER_TEXT         , 150);
				IDbDataParameter parDATA_FIELD         = Sql.AddParameter(cmd, "@DATA_FIELD"        , sDATA_FIELD          ,  50);
				IDbDataParameter parSORT_EXPRESSION    = Sql.AddParameter(cmd, "@SORT_EXPRESSION"   , sSORT_EXPRESSION     ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH    = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"   , sITEMSTYLE_WIDTH     ,  10);
				IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS", sITEMSTYLE_CSSCLASS  ,  50);
				IDbDataParameter parURL_FIELD          = Sql.AddParameter(cmd, "@URL_FIELD"         , sURL_FIELD           );
				IDbDataParameter parURL_FORMAT         = Sql.AddParameter(cmd, "@URL_FORMAT"        , sURL_FORMAT          );
				IDbDataParameter parURL_TARGET         = Sql.AddParameter(cmd, "@URL_TARGET"        , sURL_TARGET          ,  60);
				IDbDataParameter parURL_MODULE         = Sql.AddParameter(cmd, "@URL_MODULE"        , sURL_MODULE          ,  25);
				IDbDataParameter parURL_ASSIGNED_FIELD = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD", sURL_ASSIGNED_FIELD  ,  30);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_InsModule
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_InsModule
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_InsModule(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_InsModule";
			IDbDataParameter parGRID_NAME          = Sql.CreateParameter(cmd, "@GRID_NAME"         , "string",  50);
			IDbDataParameter parCOLUMN_INDEX       = Sql.CreateParameter(cmd, "@COLUMN_INDEX"      , "Int32",   4);
			IDbDataParameter parHEADER_TEXT        = Sql.CreateParameter(cmd, "@HEADER_TEXT"       , "string", 150);
			IDbDataParameter parDATA_FIELD         = Sql.CreateParameter(cmd, "@DATA_FIELD"        , "string",  50);
			IDbDataParameter parSORT_EXPRESSION    = Sql.CreateParameter(cmd, "@SORT_EXPRESSION"   , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH    = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH"   , "string",  10);
			IDbDataParameter parITEMSTYLE_CSSCLASS = Sql.CreateParameter(cmd, "@ITEMSTYLE_CSSCLASS", "string",  50);
			IDbDataParameter parURL_FIELD          = Sql.CreateParameter(cmd, "@URL_FIELD"         , "string", 104857600);
			IDbDataParameter parURL_FORMAT         = Sql.CreateParameter(cmd, "@URL_FORMAT"        , "string", 104857600);
			IDbDataParameter parURL_TARGET         = Sql.CreateParameter(cmd, "@URL_TARGET"        , "string",  60);
			IDbDataParameter parURL_MODULE         = Sql.CreateParameter(cmd, "@URL_MODULE"        , "string",  25);
			IDbDataParameter parURL_ASSIGNED_FIELD = Sql.CreateParameter(cmd, "@URL_ASSIGNED_FIELD", "string",  30);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_ReserveIndex
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_ReserveIndex
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_ReserveIndex(string sGRID_NAME, Int32 nRESERVE_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveInd";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveIndex";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parGRID_NAME        = Sql.AddParameter(cmd, "@GRID_NAME"       , sGRID_NAME         ,  50);
							IDbDataParameter parRESERVE_INDEX    = Sql.AddParameter(cmd, "@RESERVE_INDEX"   , nRESERVE_INDEX     );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_ReserveIndex
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_ReserveIndex
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_ReserveIndex(string sGRID_NAME, Int32 nRESERVE_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveInd";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveIndex";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parGRID_NAME        = Sql.AddParameter(cmd, "@GRID_NAME"       , sGRID_NAME         ,  50);
				IDbDataParameter parRESERVE_INDEX    = Sql.AddParameter(cmd, "@RESERVE_INDEX"   , nRESERVE_INDEX     );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_ReserveIndex
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_ReserveIndex
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_ReserveIndex(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveInd";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_ReserveIndex";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parGRID_NAME        = Sql.CreateParameter(cmd, "@GRID_NAME"       , "string",  50);
			IDbDataParameter parRESERVE_INDEX    = Sql.CreateParameter(cmd, "@RESERVE_INDEX"   , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_Update
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Update
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_Update(ref Guid gID, string sGRID_NAME, Int32 nCOLUMN_INDEX, string sCOLUMN_TYPE, string sHEADER_TEXT, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sITEMSTYLE_HORIZONTAL_ALIGN, string sITEMSTYLE_VERTICAL_ALIGN, bool bITEMSTYLE_WRAP, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, string sURL_MODULE, string sURL_ASSIGNED_FIELD, string sMODULE_TYPE, string sPARENT_FIELD)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_COLUMNS_Update";
							IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parGRID_NAME                  = Sql.AddParameter(cmd, "@GRID_NAME"                 , sGRID_NAME                   ,  50);
							IDbDataParameter parCOLUMN_INDEX               = Sql.AddParameter(cmd, "@COLUMN_INDEX"              , nCOLUMN_INDEX                );
							IDbDataParameter parCOLUMN_TYPE                = Sql.AddParameter(cmd, "@COLUMN_TYPE"               , sCOLUMN_TYPE                 ,  25);
							IDbDataParameter parHEADER_TEXT                = Sql.AddParameter(cmd, "@HEADER_TEXT"               , sHEADER_TEXT                 , 150);
							IDbDataParameter parSORT_EXPRESSION            = Sql.AddParameter(cmd, "@SORT_EXPRESSION"           , sSORT_EXPRESSION             ,  50);
							IDbDataParameter parITEMSTYLE_WIDTH            = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"           , sITEMSTYLE_WIDTH             ,  10);
							IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , sITEMSTYLE_CSSCLASS          ,  50);
							IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.AddParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", sITEMSTYLE_HORIZONTAL_ALIGN  ,  10);
							IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.AddParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , sITEMSTYLE_VERTICAL_ALIGN    ,  10);
							IDbDataParameter parITEMSTYLE_WRAP             = Sql.AddParameter(cmd, "@ITEMSTYLE_WRAP"            , bITEMSTYLE_WRAP              );
							IDbDataParameter parDATA_FIELD                 = Sql.AddParameter(cmd, "@DATA_FIELD"                , sDATA_FIELD                  ,  50);
							IDbDataParameter parDATA_FORMAT                = Sql.AddParameter(cmd, "@DATA_FORMAT"               , sDATA_FORMAT                 ,  25);
							IDbDataParameter parURL_FIELD                  = Sql.AddParameter(cmd, "@URL_FIELD"                 , sURL_FIELD                   );
							IDbDataParameter parURL_FORMAT                 = Sql.AddParameter(cmd, "@URL_FORMAT"                , sURL_FORMAT                  );
							IDbDataParameter parURL_TARGET                 = Sql.AddParameter(cmd, "@URL_TARGET"                , sURL_TARGET                  ,  60);
							IDbDataParameter parLIST_NAME                  = Sql.AddParameter(cmd, "@LIST_NAME"                 , sLIST_NAME                   ,  50);
							IDbDataParameter parURL_MODULE                 = Sql.AddParameter(cmd, "@URL_MODULE"                , sURL_MODULE                  ,  25);
							IDbDataParameter parURL_ASSIGNED_FIELD         = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD"        , sURL_ASSIGNED_FIELD          ,  30);
							IDbDataParameter parMODULE_TYPE                = Sql.AddParameter(cmd, "@MODULE_TYPE"               , sMODULE_TYPE                 ,  25);
							IDbDataParameter parPARENT_FIELD               = Sql.AddParameter(cmd, "@PARENT_FIELD"              , sPARENT_FIELD                ,  30);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_Update
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Update
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_Update(ref Guid gID, string sGRID_NAME, Int32 nCOLUMN_INDEX, string sCOLUMN_TYPE, string sHEADER_TEXT, string sSORT_EXPRESSION, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sITEMSTYLE_HORIZONTAL_ALIGN, string sITEMSTYLE_VERTICAL_ALIGN, bool bITEMSTYLE_WRAP, string sDATA_FIELD, string sDATA_FORMAT, string sURL_FIELD, string sURL_FORMAT, string sURL_TARGET, string sLIST_NAME, string sURL_MODULE, string sURL_ASSIGNED_FIELD, string sMODULE_TYPE, string sPARENT_FIELD, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_Update";
				IDbDataParameter parID                         = Sql.AddParameter(cmd, "@ID"                        , gID                          );
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parGRID_NAME                  = Sql.AddParameter(cmd, "@GRID_NAME"                 , sGRID_NAME                   ,  50);
				IDbDataParameter parCOLUMN_INDEX               = Sql.AddParameter(cmd, "@COLUMN_INDEX"              , nCOLUMN_INDEX                );
				IDbDataParameter parCOLUMN_TYPE                = Sql.AddParameter(cmd, "@COLUMN_TYPE"               , sCOLUMN_TYPE                 ,  25);
				IDbDataParameter parHEADER_TEXT                = Sql.AddParameter(cmd, "@HEADER_TEXT"               , sHEADER_TEXT                 , 150);
				IDbDataParameter parSORT_EXPRESSION            = Sql.AddParameter(cmd, "@SORT_EXPRESSION"           , sSORT_EXPRESSION             ,  50);
				IDbDataParameter parITEMSTYLE_WIDTH            = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"           , sITEMSTYLE_WIDTH             ,  10);
				IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , sITEMSTYLE_CSSCLASS          ,  50);
				IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.AddParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", sITEMSTYLE_HORIZONTAL_ALIGN  ,  10);
				IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.AddParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , sITEMSTYLE_VERTICAL_ALIGN    ,  10);
				IDbDataParameter parITEMSTYLE_WRAP             = Sql.AddParameter(cmd, "@ITEMSTYLE_WRAP"            , bITEMSTYLE_WRAP              );
				IDbDataParameter parDATA_FIELD                 = Sql.AddParameter(cmd, "@DATA_FIELD"                , sDATA_FIELD                  ,  50);
				IDbDataParameter parDATA_FORMAT                = Sql.AddParameter(cmd, "@DATA_FORMAT"               , sDATA_FORMAT                 ,  25);
				IDbDataParameter parURL_FIELD                  = Sql.AddParameter(cmd, "@URL_FIELD"                 , sURL_FIELD                   );
				IDbDataParameter parURL_FORMAT                 = Sql.AddParameter(cmd, "@URL_FORMAT"                , sURL_FORMAT                  );
				IDbDataParameter parURL_TARGET                 = Sql.AddParameter(cmd, "@URL_TARGET"                , sURL_TARGET                  ,  60);
				IDbDataParameter parLIST_NAME                  = Sql.AddParameter(cmd, "@LIST_NAME"                 , sLIST_NAME                   ,  50);
				IDbDataParameter parURL_MODULE                 = Sql.AddParameter(cmd, "@URL_MODULE"                , sURL_MODULE                  ,  25);
				IDbDataParameter parURL_ASSIGNED_FIELD         = Sql.AddParameter(cmd, "@URL_ASSIGNED_FIELD"        , sURL_ASSIGNED_FIELD          ,  30);
				IDbDataParameter parMODULE_TYPE                = Sql.AddParameter(cmd, "@MODULE_TYPE"               , sMODULE_TYPE                 ,  25);
				IDbDataParameter parPARENT_FIELD               = Sql.AddParameter(cmd, "@PARENT_FIELD"              , sPARENT_FIELD                ,  30);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_Update
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_Update
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_COLUMNS_Update";
			IDbDataParameter parID                         = Sql.CreateParameter(cmd, "@ID"                        , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parGRID_NAME                  = Sql.CreateParameter(cmd, "@GRID_NAME"                 , "string",  50);
			IDbDataParameter parCOLUMN_INDEX               = Sql.CreateParameter(cmd, "@COLUMN_INDEX"              , "Int32",   4);
			IDbDataParameter parCOLUMN_TYPE                = Sql.CreateParameter(cmd, "@COLUMN_TYPE"               , "string",  25);
			IDbDataParameter parHEADER_TEXT                = Sql.CreateParameter(cmd, "@HEADER_TEXT"               , "string", 150);
			IDbDataParameter parSORT_EXPRESSION            = Sql.CreateParameter(cmd, "@SORT_EXPRESSION"           , "string",  50);
			IDbDataParameter parITEMSTYLE_WIDTH            = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH"           , "string",  10);
			IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.CreateParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , "string",  50);
			IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.CreateParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", "string",  10);
			IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.CreateParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , "string",  10);
			IDbDataParameter parITEMSTYLE_WRAP             = Sql.CreateParameter(cmd, "@ITEMSTYLE_WRAP"            , "bool",   1);
			IDbDataParameter parDATA_FIELD                 = Sql.CreateParameter(cmd, "@DATA_FIELD"                , "string",  50);
			IDbDataParameter parDATA_FORMAT                = Sql.CreateParameter(cmd, "@DATA_FORMAT"               , "string",  25);
			IDbDataParameter parURL_FIELD                  = Sql.CreateParameter(cmd, "@URL_FIELD"                 , "string", 104857600);
			IDbDataParameter parURL_FORMAT                 = Sql.CreateParameter(cmd, "@URL_FORMAT"                , "string", 104857600);
			IDbDataParameter parURL_TARGET                 = Sql.CreateParameter(cmd, "@URL_TARGET"                , "string",  60);
			IDbDataParameter parLIST_NAME                  = Sql.CreateParameter(cmd, "@LIST_NAME"                 , "string",  50);
			IDbDataParameter parURL_MODULE                 = Sql.CreateParameter(cmd, "@URL_MODULE"                , "string",  25);
			IDbDataParameter parURL_ASSIGNED_FIELD         = Sql.CreateParameter(cmd, "@URL_ASSIGNED_FIELD"        , "string",  30);
			IDbDataParameter parMODULE_TYPE                = Sql.CreateParameter(cmd, "@MODULE_TYPE"               , "string",  25);
			IDbDataParameter parPARENT_FIELD               = Sql.CreateParameter(cmd, "@PARENT_FIELD"              , "string",  30);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_UpdateFormat
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateFormat
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_UpdateFormat(string sGRID_NAME, string sDATA_FIELD, string sDATA_FORMAT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateForm";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateFormat";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parGRID_NAME        = Sql.AddParameter(cmd, "@GRID_NAME"       , sGRID_NAME         ,  50);
							IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        ,  50);
							IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_UpdateFormat
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateFormat
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_UpdateFormat(string sGRID_NAME, string sDATA_FIELD, string sDATA_FORMAT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateForm";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateFormat";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parGRID_NAME        = Sql.AddParameter(cmd, "@GRID_NAME"       , sGRID_NAME         ,  50);
				IDbDataParameter parDATA_FIELD       = Sql.AddParameter(cmd, "@DATA_FIELD"      , sDATA_FIELD        ,  50);
				IDbDataParameter parDATA_FORMAT      = Sql.AddParameter(cmd, "@DATA_FORMAT"     , sDATA_FORMAT       ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_UpdateFormat
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateFormat
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_UpdateFormat(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateForm";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateFormat";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parGRID_NAME        = Sql.CreateParameter(cmd, "@GRID_NAME"       , "string",  50);
			IDbDataParameter parDATA_FIELD       = Sql.CreateParameter(cmd, "@DATA_FIELD"      , "string",  50);
			IDbDataParameter parDATA_FORMAT      = Sql.CreateParameter(cmd, "@DATA_FORMAT"     , "string",  25);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_UpdateStyle
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateStyle
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_UpdateStyle(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sITEMSTYLE_HORIZONTAL_ALIGN, string sITEMSTYLE_VERTICAL_ALIGN, bool bITEMSTYLE_WRAP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyl";
							else
								cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyle";
							IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
							IDbDataParameter parGRID_NAME                  = Sql.AddParameter(cmd, "@GRID_NAME"                 , sGRID_NAME                   ,  50);
							IDbDataParameter parCOLUMN_INDEX               = Sql.AddParameter(cmd, "@COLUMN_INDEX"              , nCOLUMN_INDEX                );
							IDbDataParameter parITEMSTYLE_WIDTH            = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"           , sITEMSTYLE_WIDTH             ,  10);
							IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , sITEMSTYLE_CSSCLASS          ,  50);
							IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.AddParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", sITEMSTYLE_HORIZONTAL_ALIGN  ,  10);
							IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.AddParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , sITEMSTYLE_VERTICAL_ALIGN    ,  10);
							IDbDataParameter parITEMSTYLE_WRAP             = Sql.AddParameter(cmd, "@ITEMSTYLE_WRAP"            , bITEMSTYLE_WRAP              );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_COLUMNS_UpdateStyle
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateStyle
		/// </summary>
		public void spGRIDVIEWS_COLUMNS_UpdateStyle(string sGRID_NAME, Int32 nCOLUMN_INDEX, string sITEMSTYLE_WIDTH, string sITEMSTYLE_CSSCLASS, string sITEMSTYLE_HORIZONTAL_ALIGN, string sITEMSTYLE_VERTICAL_ALIGN, bool bITEMSTYLE_WRAP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyl";
				else
					cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyle";
				IDbDataParameter parMODIFIED_USER_ID           = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"          ,  Security.USER_ID            );
				IDbDataParameter parGRID_NAME                  = Sql.AddParameter(cmd, "@GRID_NAME"                 , sGRID_NAME                   ,  50);
				IDbDataParameter parCOLUMN_INDEX               = Sql.AddParameter(cmd, "@COLUMN_INDEX"              , nCOLUMN_INDEX                );
				IDbDataParameter parITEMSTYLE_WIDTH            = Sql.AddParameter(cmd, "@ITEMSTYLE_WIDTH"           , sITEMSTYLE_WIDTH             ,  10);
				IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.AddParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , sITEMSTYLE_CSSCLASS          ,  50);
				IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.AddParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", sITEMSTYLE_HORIZONTAL_ALIGN  ,  10);
				IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.AddParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , sITEMSTYLE_VERTICAL_ALIGN    ,  10);
				IDbDataParameter parITEMSTYLE_WRAP             = Sql.AddParameter(cmd, "@ITEMSTYLE_WRAP"            , bITEMSTYLE_WRAP              );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_COLUMNS_UpdateStyle
		/// <summary>
		/// spGRIDVIEWS_COLUMNS_UpdateStyle
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_COLUMNS_UpdateStyle(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyl";
			else
				cmd.CommandText = "spGRIDVIEWS_COLUMNS_UpdateStyle";
			IDbDataParameter parMODIFIED_USER_ID           = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"          , "Guid",  16);
			IDbDataParameter parGRID_NAME                  = Sql.CreateParameter(cmd, "@GRID_NAME"                 , "string",  50);
			IDbDataParameter parCOLUMN_INDEX               = Sql.CreateParameter(cmd, "@COLUMN_INDEX"              , "Int32",   4);
			IDbDataParameter parITEMSTYLE_WIDTH            = Sql.CreateParameter(cmd, "@ITEMSTYLE_WIDTH"           , "string",  10);
			IDbDataParameter parITEMSTYLE_CSSCLASS         = Sql.CreateParameter(cmd, "@ITEMSTYLE_CSSCLASS"        , "string",  50);
			IDbDataParameter parITEMSTYLE_HORIZONTAL_ALIGN = Sql.CreateParameter(cmd, "@ITEMSTYLE_HORIZONTAL_ALIGN", "string",  10);
			IDbDataParameter parITEMSTYLE_VERTICAL_ALIGN   = Sql.CreateParameter(cmd, "@ITEMSTYLE_VERTICAL_ALIGN"  , "string",  10);
			IDbDataParameter parITEMSTYLE_WRAP             = Sql.CreateParameter(cmd, "@ITEMSTYLE_WRAP"            , "bool",   1);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_Delete
		/// <summary>
		/// spGRIDVIEWS_Delete
		/// </summary>
		public void spGRIDVIEWS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_Delete
		/// <summary>
		/// spGRIDVIEWS_Delete
		/// </summary>
		public void spGRIDVIEWS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_Delete
		/// <summary>
		/// spGRIDVIEWS_Delete
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_InsertOnly
		/// <summary>
		/// spGRIDVIEWS_InsertOnly
		/// </summary>
		public void spGRIDVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sSORT_FIELD, string sSORT_DIRECTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_InsertOnly";
							IDbDataParameter parNAME           = Sql.AddParameter(cmd, "@NAME"          , sNAME            ,  50);
							IDbDataParameter parMODULE_NAME    = Sql.AddParameter(cmd, "@MODULE_NAME"   , sMODULE_NAME     ,  25);
							IDbDataParameter parVIEW_NAME      = Sql.AddParameter(cmd, "@VIEW_NAME"     , sVIEW_NAME       ,  50);
							IDbDataParameter parSORT_FIELD     = Sql.AddParameter(cmd, "@SORT_FIELD"    , sSORT_FIELD      ,  50);
							IDbDataParameter parSORT_DIRECTION = Sql.AddParameter(cmd, "@SORT_DIRECTION", sSORT_DIRECTION  ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_InsertOnly
		/// <summary>
		/// spGRIDVIEWS_InsertOnly
		/// </summary>
		public void spGRIDVIEWS_InsertOnly(string sNAME, string sMODULE_NAME, string sVIEW_NAME, string sSORT_FIELD, string sSORT_DIRECTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_InsertOnly";
				IDbDataParameter parNAME           = Sql.AddParameter(cmd, "@NAME"          , sNAME            ,  50);
				IDbDataParameter parMODULE_NAME    = Sql.AddParameter(cmd, "@MODULE_NAME"   , sMODULE_NAME     ,  25);
				IDbDataParameter parVIEW_NAME      = Sql.AddParameter(cmd, "@VIEW_NAME"     , sVIEW_NAME       ,  50);
				IDbDataParameter parSORT_FIELD     = Sql.AddParameter(cmd, "@SORT_FIELD"    , sSORT_FIELD      ,  50);
				IDbDataParameter parSORT_DIRECTION = Sql.AddParameter(cmd, "@SORT_DIRECTION", sSORT_DIRECTION  ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_InsertOnly
		/// <summary>
		/// spGRIDVIEWS_InsertOnly
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_InsertOnly";
			IDbDataParameter parNAME           = Sql.CreateParameter(cmd, "@NAME"          , "string",  50);
			IDbDataParameter parMODULE_NAME    = Sql.CreateParameter(cmd, "@MODULE_NAME"   , "string",  25);
			IDbDataParameter parVIEW_NAME      = Sql.CreateParameter(cmd, "@VIEW_NAME"     , "string",  50);
			IDbDataParameter parSORT_FIELD     = Sql.CreateParameter(cmd, "@SORT_FIELD"    , "string",  50);
			IDbDataParameter parSORT_DIRECTION = Sql.CreateParameter(cmd, "@SORT_DIRECTION", "string",  10);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_Update
		/// <summary>
		/// spGRIDVIEWS_Update
		/// </summary>
		public void spGRIDVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, string sSORT_FIELD, string sSORT_DIRECTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_Update";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
							IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
							IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
							IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
							IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
							IDbDataParameter parSORT_FIELD         = Sql.AddParameter(cmd, "@SORT_FIELD"        , sSORT_FIELD          ,  50);
							IDbDataParameter parSORT_DIRECTION     = Sql.AddParameter(cmd, "@SORT_DIRECTION"    , sSORT_DIRECTION      ,  10);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_Update
		/// <summary>
		/// spGRIDVIEWS_Update
		/// </summary>
		public void spGRIDVIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sVIEW_NAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, string sSORT_FIELD, string sSORT_DIRECTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_Update";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parMODULE_NAME        = Sql.AddParameter(cmd, "@MODULE_NAME"       , sMODULE_NAME         ,  25);
				IDbDataParameter parVIEW_NAME          = Sql.AddParameter(cmd, "@VIEW_NAME"         , sVIEW_NAME           ,  50);
				IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
				IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
				IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
				IDbDataParameter parSORT_FIELD         = Sql.AddParameter(cmd, "@SORT_FIELD"        , sSORT_FIELD          ,  50);
				IDbDataParameter parSORT_DIRECTION     = Sql.AddParameter(cmd, "@SORT_DIRECTION"    , sSORT_DIRECTION      ,  10);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdGRIDVIEWS_Update
		/// <summary>
		/// spGRIDVIEWS_Update
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_Update";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parMODULE_NAME        = Sql.CreateParameter(cmd, "@MODULE_NAME"       , "string",  25);
			IDbDataParameter parVIEW_NAME          = Sql.CreateParameter(cmd, "@VIEW_NAME"         , "string",  50);
			IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID", "Guid",  16);
			IDbDataParameter parSCRIPT             = Sql.CreateParameter(cmd, "@SCRIPT"            , "string", 104857600);
			IDbDataParameter parSORT_FIELD         = Sql.CreateParameter(cmd, "@SORT_FIELD"        , "string",  50);
			IDbDataParameter parSORT_DIRECTION     = Sql.CreateParameter(cmd, "@SORT_DIRECTION"    , "string",  10);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_UpdateEvents
		/// <summary>
		/// spGRIDVIEWS_UpdateEvents
		/// </summary>
		public void spGRIDVIEWS_UpdateEvents(string sNAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_UpdateEvents";
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
							IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
							IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
							IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_UpdateEvents
		/// <summary>
		/// spGRIDVIEWS_UpdateEvents
		/// </summary>
		public void spGRIDVIEWS_UpdateEvents(string sNAME, Guid gPRE_LOAD_EVENT_ID, Guid gPOST_LOAD_EVENT_ID, string sSCRIPT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_UpdateEvents";
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parNAME               = Sql.AddParameter(cmd, "@NAME"              , sNAME                ,  50);
				IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.AddParameter(cmd, "@PRE_LOAD_EVENT_ID" , gPRE_LOAD_EVENT_ID   );
				IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.AddParameter(cmd, "@POST_LOAD_EVENT_ID", gPOST_LOAD_EVENT_ID  );
				IDbDataParameter parSCRIPT             = Sql.AddParameter(cmd, "@SCRIPT"            , sSCRIPT              );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_UpdateEvents
		/// <summary>
		/// spGRIDVIEWS_UpdateEvents
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_UpdateEvents(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_UpdateEvents";
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parNAME               = Sql.CreateParameter(cmd, "@NAME"              , "string",  50);
			IDbDataParameter parPRE_LOAD_EVENT_ID  = Sql.CreateParameter(cmd, "@PRE_LOAD_EVENT_ID" , "Guid",  16);
			IDbDataParameter parPOST_LOAD_EVENT_ID = Sql.CreateParameter(cmd, "@POST_LOAD_EVENT_ID", "Guid",  16);
			IDbDataParameter parSCRIPT             = Sql.CreateParameter(cmd, "@SCRIPT"            , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spGRIDVIEWS_UpdateSort
		/// <summary>
		/// spGRIDVIEWS_UpdateSort
		/// </summary>
		public void spGRIDVIEWS_UpdateSort(string sNAME, string sSORT_FIELD, string sSORT_DIRECTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spGRIDVIEWS_UpdateSort";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
							IDbDataParameter parSORT_FIELD       = Sql.AddParameter(cmd, "@SORT_FIELD"      , sSORT_FIELD        ,  50);
							IDbDataParameter parSORT_DIRECTION   = Sql.AddParameter(cmd, "@SORT_DIRECTION"  , sSORT_DIRECTION    ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spGRIDVIEWS_UpdateSort
		/// <summary>
		/// spGRIDVIEWS_UpdateSort
		/// </summary>
		public void spGRIDVIEWS_UpdateSort(string sNAME, string sSORT_FIELD, string sSORT_DIRECTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spGRIDVIEWS_UpdateSort";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
				IDbDataParameter parSORT_FIELD       = Sql.AddParameter(cmd, "@SORT_FIELD"      , sSORT_FIELD        ,  50);
				IDbDataParameter parSORT_DIRECTION   = Sql.AddParameter(cmd, "@SORT_DIRECTION"  , sSORT_DIRECTION    ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdGRIDVIEWS_UpdateSort
		/// <summary>
		/// spGRIDVIEWS_UpdateSort
		/// </summary>
		public IDbCommand cmdGRIDVIEWS_UpdateSort(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spGRIDVIEWS_UpdateSort";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  50);
			IDbDataParameter parSORT_FIELD       = Sql.CreateParameter(cmd, "@SORT_FIELD"      , "string",  50);
			IDbDataParameter parSORT_DIRECTION   = Sql.CreateParameter(cmd, "@SORT_DIRECTION"  , "string",  10);
			return cmd;
		}
		#endregion

		#region spIMAGE_InitPointer
		/// <summary>
		/// spIMAGE_InitPointer
		/// </summary>
		public void spIMAGE_InitPointer(Guid gID, ref byte[] binFILE_POINTER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGE_InitPointer";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							parFILE_POINTER.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGE_InitPointer
		/// <summary>
		/// spIMAGE_InitPointer
		/// </summary>
		public void spIMAGE_InitPointer(Guid gID, ref byte[] binFILE_POINTER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGE_InitPointer";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				parFILE_POINTER.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
			}
		}
		#endregion

		#region cmdIMAGE_InitPointer
		/// <summary>
		/// spIMAGE_InitPointer
		/// </summary>
		public IDbCommand cmdIMAGE_InitPointer(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGE_InitPointer";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			parFILE_POINTER.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spIMAGE_ReadOffset
		/// <summary>
		/// spIMAGE_ReadOffset
		/// </summary>
		public void spIMAGE_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGE_ReadOffset";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
							IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
							IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
							parBYTES.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binBYTES = Sql.ToBinary(parBYTES.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGE_ReadOffset
		/// <summary>
		/// spIMAGE_ReadOffset
		/// </summary>
		public void spIMAGE_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGE_ReadOffset";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
				IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
				IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
				parBYTES.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binBYTES = Sql.ToBinary(parBYTES.Value);
			}
		}
		#endregion

		#region cmdIMAGE_ReadOffset
		/// <summary>
		/// spIMAGE_ReadOffset
		/// </summary>
		public IDbCommand cmdIMAGE_ReadOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGE_ReadOffset";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parFILE_OFFSET = Sql.CreateParameter(cmd, "@FILE_OFFSET", "Int32",   4);
			IDbDataParameter parREAD_SIZE   = Sql.CreateParameter(cmd, "@READ_SIZE"  , "Int32",   4);
			IDbDataParameter parBYTES       = Sql.CreateParameter(cmd, "@BYTES"      , "byte[]", 104857600);
			parBYTES.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spIMAGE_WriteOffset
		/// <summary>
		/// spIMAGE_WriteOffset
		/// </summary>
		public void spIMAGE_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGE_WriteOffset";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
							IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGE_WriteOffset
		/// <summary>
		/// spIMAGE_WriteOffset
		/// </summary>
		public void spIMAGE_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGE_WriteOffset";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
				IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIMAGE_WriteOffset
		/// <summary>
		/// spIMAGE_WriteOffset
		/// </summary>
		public IDbCommand cmdIMAGE_WriteOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGE_WriteOffset";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_OFFSET      = Sql.CreateParameter(cmd, "@FILE_OFFSET"     , "Int32",   4);
			IDbDataParameter parBYTES            = Sql.CreateParameter(cmd, "@BYTES"           , "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spIMAGES_CONTENT_Update
		/// <summary>
		/// spIMAGES_CONTENT_Update
		/// </summary>
		public void spIMAGES_CONTENT_Update(Guid gID, byte[] binCONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGES_CONTENT_Update";
							IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
							IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGES_CONTENT_Update
		/// <summary>
		/// spIMAGES_CONTENT_Update
		/// </summary>
		public void spIMAGES_CONTENT_Update(Guid gID, byte[] binCONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGES_CONTENT_Update";
				IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
				IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIMAGES_CONTENT_Update
		/// <summary>
		/// spIMAGES_CONTENT_Update
		/// </summary>
		public IDbCommand cmdIMAGES_CONTENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGES_CONTENT_Update";
			IDbDataParameter parID      = Sql.CreateParameter(cmd, "@ID"     , "Guid",  16);
			IDbDataParameter parCONTENT = Sql.CreateParameter(cmd, "@CONTENT", "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spIMAGES_Delete
		/// <summary>
		/// spIMAGES_Delete
		/// </summary>
		public void spIMAGES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGES_Delete
		/// <summary>
		/// spIMAGES_Delete
		/// </summary>
		public void spIMAGES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIMAGES_Delete
		/// <summary>
		/// spIMAGES_Delete
		/// </summary>
		public IDbCommand cmdIMAGES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spIMAGES_Insert
		/// <summary>
		/// spIMAGES_Insert
		/// </summary>
		public void spIMAGES_Insert(ref Guid gID, Guid gPARENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMAGES_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
							IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
							IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
							IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMAGES_Insert
		/// <summary>
		/// spIMAGES_Insert
		/// </summary>
		public void spIMAGES_Insert(ref Guid gID, Guid gPARENT_ID, string sFILENAME, string sFILE_EXT, string sFILE_MIME_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMAGES_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPARENT_ID        = Sql.AddParameter(cmd, "@PARENT_ID"       , gPARENT_ID         );
				IDbDataParameter parFILENAME         = Sql.AddParameter(cmd, "@FILENAME"        , sFILENAME          , 255);
				IDbDataParameter parFILE_EXT         = Sql.AddParameter(cmd, "@FILE_EXT"        , sFILE_EXT          ,  25);
				IDbDataParameter parFILE_MIME_TYPE   = Sql.AddParameter(cmd, "@FILE_MIME_TYPE"  , sFILE_MIME_TYPE    , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdIMAGES_Insert
		/// <summary>
		/// spIMAGES_Insert
		/// </summary>
		public IDbCommand cmdIMAGES_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMAGES_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPARENT_ID        = Sql.CreateParameter(cmd, "@PARENT_ID"       , "Guid",  16);
			IDbDataParameter parFILENAME         = Sql.CreateParameter(cmd, "@FILENAME"        , "string", 255);
			IDbDataParameter parFILE_EXT         = Sql.CreateParameter(cmd, "@FILE_EXT"        , "string",  25);
			IDbDataParameter parFILE_MIME_TYPE   = Sql.CreateParameter(cmd, "@FILE_MIME_TYPE"  , "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spIMPORT_MAPS_Delete
		/// <summary>
		/// spIMPORT_MAPS_Delete
		/// </summary>
		public void spIMPORT_MAPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMPORT_MAPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMPORT_MAPS_Delete
		/// <summary>
		/// spIMPORT_MAPS_Delete
		/// </summary>
		public void spIMPORT_MAPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMPORT_MAPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdIMPORT_MAPS_Delete
		/// <summary>
		/// spIMPORT_MAPS_Delete
		/// </summary>
		public IDbCommand cmdIMPORT_MAPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMPORT_MAPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spIMPORT_MAPS_InsertOnly
		/// <summary>
		/// spIMPORT_MAPS_InsertOnly
		/// </summary>
		public void spIMPORT_MAPS_InsertOnly(ref Guid gID, string sNAME, string sSOURCE, string sMODULE, bool bHAS_HEADER, bool bIS_PUBLISHED, string sCONTENT, string sRULES_XML)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMPORT_MAPS_InsertOnly";
							IDbDataParameter parID           = Sql.AddParameter(cmd, "@ID"          , gID            );
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
							IDbDataParameter parSOURCE       = Sql.AddParameter(cmd, "@SOURCE"      , sSOURCE        ,  25);
							IDbDataParameter parMODULE       = Sql.AddParameter(cmd, "@MODULE"      , sMODULE        ,  25);
							IDbDataParameter parHAS_HEADER   = Sql.AddParameter(cmd, "@HAS_HEADER"  , bHAS_HEADER    );
							IDbDataParameter parIS_PUBLISHED = Sql.AddParameter(cmd, "@IS_PUBLISHED", bIS_PUBLISHED  );
							IDbDataParameter parCONTENT      = Sql.AddParameter(cmd, "@CONTENT"     , sCONTENT       );
							IDbDataParameter parRULES_XML    = Sql.AddParameter(cmd, "@RULES_XML"   , sRULES_XML     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMPORT_MAPS_InsertOnly
		/// <summary>
		/// spIMPORT_MAPS_InsertOnly
		/// </summary>
		public void spIMPORT_MAPS_InsertOnly(ref Guid gID, string sNAME, string sSOURCE, string sMODULE, bool bHAS_HEADER, bool bIS_PUBLISHED, string sCONTENT, string sRULES_XML, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMPORT_MAPS_InsertOnly";
				IDbDataParameter parID           = Sql.AddParameter(cmd, "@ID"          , gID            );
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
				IDbDataParameter parSOURCE       = Sql.AddParameter(cmd, "@SOURCE"      , sSOURCE        ,  25);
				IDbDataParameter parMODULE       = Sql.AddParameter(cmd, "@MODULE"      , sMODULE        ,  25);
				IDbDataParameter parHAS_HEADER   = Sql.AddParameter(cmd, "@HAS_HEADER"  , bHAS_HEADER    );
				IDbDataParameter parIS_PUBLISHED = Sql.AddParameter(cmd, "@IS_PUBLISHED", bIS_PUBLISHED  );
				IDbDataParameter parCONTENT      = Sql.AddParameter(cmd, "@CONTENT"     , sCONTENT       );
				IDbDataParameter parRULES_XML    = Sql.AddParameter(cmd, "@RULES_XML"   , sRULES_XML     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdIMPORT_MAPS_InsertOnly
		/// <summary>
		/// spIMPORT_MAPS_InsertOnly
		/// </summary>
		public IDbCommand cmdIMPORT_MAPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMPORT_MAPS_InsertOnly";
			IDbDataParameter parID           = Sql.CreateParameter(cmd, "@ID"          , "Guid",  16);
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string", 150);
			IDbDataParameter parSOURCE       = Sql.CreateParameter(cmd, "@SOURCE"      , "string",  25);
			IDbDataParameter parMODULE       = Sql.CreateParameter(cmd, "@MODULE"      , "string",  25);
			IDbDataParameter parHAS_HEADER   = Sql.CreateParameter(cmd, "@HAS_HEADER"  , "bool",   1);
			IDbDataParameter parIS_PUBLISHED = Sql.CreateParameter(cmd, "@IS_PUBLISHED", "bool",   1);
			IDbDataParameter parCONTENT      = Sql.CreateParameter(cmd, "@CONTENT"     , "string", 104857600);
			IDbDataParameter parRULES_XML    = Sql.CreateParameter(cmd, "@RULES_XML"   , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spIMPORT_MAPS_Update
		/// <summary>
		/// spIMPORT_MAPS_Update
		/// </summary>
		public void spIMPORT_MAPS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSOURCE, string sMODULE, bool bHAS_HEADER, bool bIS_PUBLISHED, string sCONTENT, string sRULES_XML)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spIMPORT_MAPS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parSOURCE           = Sql.AddParameter(cmd, "@SOURCE"          , sSOURCE            ,  25);
							IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            ,  25);
							IDbDataParameter parHAS_HEADER       = Sql.AddParameter(cmd, "@HAS_HEADER"      , bHAS_HEADER        );
							IDbDataParameter parIS_PUBLISHED     = Sql.AddParameter(cmd, "@IS_PUBLISHED"    , bIS_PUBLISHED      );
							IDbDataParameter parCONTENT          = Sql.AddParameter(cmd, "@CONTENT"         , sCONTENT           );
							IDbDataParameter parRULES_XML        = Sql.AddParameter(cmd, "@RULES_XML"       , sRULES_XML         );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spIMPORT_MAPS_Update
		/// <summary>
		/// spIMPORT_MAPS_Update
		/// </summary>
		public void spIMPORT_MAPS_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSOURCE, string sMODULE, bool bHAS_HEADER, bool bIS_PUBLISHED, string sCONTENT, string sRULES_XML, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spIMPORT_MAPS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parSOURCE           = Sql.AddParameter(cmd, "@SOURCE"          , sSOURCE            ,  25);
				IDbDataParameter parMODULE           = Sql.AddParameter(cmd, "@MODULE"          , sMODULE            ,  25);
				IDbDataParameter parHAS_HEADER       = Sql.AddParameter(cmd, "@HAS_HEADER"      , bHAS_HEADER        );
				IDbDataParameter parIS_PUBLISHED     = Sql.AddParameter(cmd, "@IS_PUBLISHED"    , bIS_PUBLISHED      );
				IDbDataParameter parCONTENT          = Sql.AddParameter(cmd, "@CONTENT"         , sCONTENT           );
				IDbDataParameter parRULES_XML        = Sql.AddParameter(cmd, "@RULES_XML"       , sRULES_XML         );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdIMPORT_MAPS_Update
		/// <summary>
		/// spIMPORT_MAPS_Update
		/// </summary>
		public IDbCommand cmdIMPORT_MAPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spIMPORT_MAPS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parSOURCE           = Sql.CreateParameter(cmd, "@SOURCE"          , "string",  25);
			IDbDataParameter parMODULE           = Sql.CreateParameter(cmd, "@MODULE"          , "string",  25);
			IDbDataParameter parHAS_HEADER       = Sql.CreateParameter(cmd, "@HAS_HEADER"      , "bool",   1);
			IDbDataParameter parIS_PUBLISHED     = Sql.CreateParameter(cmd, "@IS_PUBLISHED"    , "bool",   1);
			IDbDataParameter parCONTENT          = Sql.CreateParameter(cmd, "@CONTENT"         , "string", 104857600);
			IDbDataParameter parRULES_XML        = Sql.CreateParameter(cmd, "@RULES_XML"       , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spLANGUAGES_Delete
		/// <summary>
		/// spLANGUAGES_Delete
		/// </summary>
		public void spLANGUAGES_Delete(string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_Delete
		/// <summary>
		/// spLANGUAGES_Delete
		/// </summary>
		public void spLANGUAGES_Delete(string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLANGUAGES_Delete
		/// <summary>
		/// spLANGUAGES_Delete
		/// </summary>
		public IDbCommand cmdLANGUAGES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  10);
			return cmd;
		}
		#endregion

		#region spLANGUAGES_Disable
		/// <summary>
		/// spLANGUAGES_Disable
		/// </summary>
		public void spLANGUAGES_Disable(string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_Disable";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_Disable
		/// <summary>
		/// spLANGUAGES_Disable
		/// </summary>
		public void spLANGUAGES_Disable(string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_Disable";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLANGUAGES_Disable
		/// <summary>
		/// spLANGUAGES_Disable
		/// </summary>
		public IDbCommand cmdLANGUAGES_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_Disable";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  10);
			return cmd;
		}
		#endregion

		#region spLANGUAGES_Enable
		/// <summary>
		/// spLANGUAGES_Enable
		/// </summary>
		public void spLANGUAGES_Enable(string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_Enable";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_Enable
		/// <summary>
		/// spLANGUAGES_Enable
		/// </summary>
		public void spLANGUAGES_Enable(string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_Enable";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLANGUAGES_Enable
		/// <summary>
		/// spLANGUAGES_Enable
		/// </summary>
		public IDbCommand cmdLANGUAGES_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_Enable";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  10);
			return cmd;
		}
		#endregion

		#region spLANGUAGES_InsertOnly
		/// <summary>
		/// spLANGUAGES_InsertOnly
		/// </summary>
		public void spLANGUAGES_InsertOnly(string sNAME, Int32 nLCID, bool bACTIVE, string sNATIVE_NAME, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_InsertOnly";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  10);
							IDbDataParameter parLCID         = Sql.AddParameter(cmd, "@LCID"        , nLCID          );
							IDbDataParameter parACTIVE       = Sql.AddParameter(cmd, "@ACTIVE"      , bACTIVE        );
							IDbDataParameter parNATIVE_NAME  = Sql.AddParameter(cmd, "@NATIVE_NAME" , sNATIVE_NAME   ,  80);
							IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_InsertOnly
		/// <summary>
		/// spLANGUAGES_InsertOnly
		/// </summary>
		public void spLANGUAGES_InsertOnly(string sNAME, Int32 nLCID, bool bACTIVE, string sNATIVE_NAME, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_InsertOnly";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          ,  10);
				IDbDataParameter parLCID         = Sql.AddParameter(cmd, "@LCID"        , nLCID          );
				IDbDataParameter parACTIVE       = Sql.AddParameter(cmd, "@ACTIVE"      , bACTIVE        );
				IDbDataParameter parNATIVE_NAME  = Sql.AddParameter(cmd, "@NATIVE_NAME" , sNATIVE_NAME   ,  80);
				IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdLANGUAGES_InsertOnly
		/// <summary>
		/// spLANGUAGES_InsertOnly
		/// </summary>
		public IDbCommand cmdLANGUAGES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_InsertOnly";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string",  10);
			IDbDataParameter parLCID         = Sql.CreateParameter(cmd, "@LCID"        , "Int32",   4);
			IDbDataParameter parACTIVE       = Sql.CreateParameter(cmd, "@ACTIVE"      , "bool",   1);
			IDbDataParameter parNATIVE_NAME  = Sql.CreateParameter(cmd, "@NATIVE_NAME" , "string",  80);
			IDbDataParameter parDISPLAY_NAME = Sql.CreateParameter(cmd, "@DISPLAY_NAME", "string",  80);
			return cmd;
		}
		#endregion

		#region spLANGUAGES_Update
		/// <summary>
		/// spLANGUAGES_Update
		/// </summary>
		public void spLANGUAGES_Update(ref Guid gID, string sNAME, Int32 nLCID, bool bACTIVE, string sNATIVE_NAME, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spLANGUAGES_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
							IDbDataParameter parLCID             = Sql.AddParameter(cmd, "@LCID"            , nLCID              );
							IDbDataParameter parACTIVE           = Sql.AddParameter(cmd, "@ACTIVE"          , bACTIVE            );
							IDbDataParameter parNATIVE_NAME      = Sql.AddParameter(cmd, "@NATIVE_NAME"     , sNATIVE_NAME       ,  80);
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      ,  80);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spLANGUAGES_Update
		/// <summary>
		/// spLANGUAGES_Update
		/// </summary>
		public void spLANGUAGES_Update(ref Guid gID, string sNAME, Int32 nLCID, bool bACTIVE, string sNATIVE_NAME, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spLANGUAGES_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  10);
				IDbDataParameter parLCID             = Sql.AddParameter(cmd, "@LCID"            , nLCID              );
				IDbDataParameter parACTIVE           = Sql.AddParameter(cmd, "@ACTIVE"          , bACTIVE            );
				IDbDataParameter parNATIVE_NAME      = Sql.AddParameter(cmd, "@NATIVE_NAME"     , sNATIVE_NAME       ,  80);
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      ,  80);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdLANGUAGES_Update
		/// <summary>
		/// spLANGUAGES_Update
		/// </summary>
		public IDbCommand cmdLANGUAGES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spLANGUAGES_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  10);
			IDbDataParameter parLCID             = Sql.CreateParameter(cmd, "@LCID"            , "Int32",   4);
			IDbDataParameter parACTIVE           = Sql.CreateParameter(cmd, "@ACTIVE"          , "bool",   1);
			IDbDataParameter parNATIVE_NAME      = Sql.CreateParameter(cmd, "@NATIVE_NAME"     , "string",  80);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string",  80);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spMODULES_Delete
		/// <summary>
		/// spMODULES_Delete
		/// </summary>
		public void spMODULES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Delete
		/// <summary>
		/// spMODULES_Delete
		/// </summary>
		public void spMODULES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_Delete
		/// <summary>
		/// spMODULES_Delete
		/// </summary>
		public IDbCommand cmdMODULES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_Disable
		/// <summary>
		/// spMODULES_Disable
		/// </summary>
		public void spMODULES_Disable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Disable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Disable
		/// <summary>
		/// spMODULES_Disable
		/// </summary>
		public void spMODULES_Disable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Disable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_Disable
		/// <summary>
		/// spMODULES_Disable
		/// </summary>
		public IDbCommand cmdMODULES_Disable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Disable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_Enable
		/// <summary>
		/// spMODULES_Enable
		/// </summary>
		public void spMODULES_Enable(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Enable";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Enable
		/// <summary>
		/// spMODULES_Enable
		/// </summary>
		public void spMODULES_Enable(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Enable";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_Enable
		/// <summary>
		/// spMODULES_Enable
		/// </summary>
		public IDbCommand cmdMODULES_Enable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Enable";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_GlobalCustomPaging
		/// <summary>
		/// spMODULES_GlobalCustomPaging
		/// </summary>
		public void spMODULES_GlobalCustomPaging()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_GlobalCustomPaging";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_GlobalCustomPaging
		/// <summary>
		/// spMODULES_GlobalCustomPaging
		/// </summary>
		public void spMODULES_GlobalCustomPaging(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_GlobalCustomPaging";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_GlobalCustomPaging
		/// <summary>
		/// spMODULES_GlobalCustomPaging
		/// </summary>
		public IDbCommand cmdMODULES_GlobalCustomPaging(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_GlobalCustomPaging";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_InsertOnly
		/// <summary>
		/// spMODULES_InsertOnly
		/// </summary>
		public void spMODULES_InsertOnly(string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, bool bMODULE_ENABLED, bool bTAB_ENABLED, Int32 nTAB_ORDER, bool bPORTAL_ENABLED, bool bCUSTOM_ENABLED, bool bREPORT_ENABLED, bool bIMPORT_ENABLED, bool bIS_ADMIN, string sTABLE_NAME, bool bMOBILE_ENABLED, bool bMASS_UPDATE_ENABLED, bool bEXCHANGE_SYNC, bool bEXCHANGE_FOLDERS, bool bEXCHANGE_CREATE_PARENT, bool bREST_ENABLED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID       = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"      ,  Security.USER_ID        );
							IDbDataParameter parMODULE_NAME            = Sql.AddParameter(cmd, "@MODULE_NAME"           , sMODULE_NAME             ,  25);
							IDbDataParameter parDISPLAY_NAME           = Sql.AddParameter(cmd, "@DISPLAY_NAME"          , sDISPLAY_NAME            ,  50);
							IDbDataParameter parRELATIVE_PATH          = Sql.AddParameter(cmd, "@RELATIVE_PATH"         , sRELATIVE_PATH           ,  50);
							IDbDataParameter parMODULE_ENABLED         = Sql.AddParameter(cmd, "@MODULE_ENABLED"        , bMODULE_ENABLED          );
							IDbDataParameter parTAB_ENABLED            = Sql.AddParameter(cmd, "@TAB_ENABLED"           , bTAB_ENABLED             );
							IDbDataParameter parTAB_ORDER              = Sql.AddParameter(cmd, "@TAB_ORDER"             , nTAB_ORDER               );
							IDbDataParameter parPORTAL_ENABLED         = Sql.AddParameter(cmd, "@PORTAL_ENABLED"        , bPORTAL_ENABLED          );
							IDbDataParameter parCUSTOM_ENABLED         = Sql.AddParameter(cmd, "@CUSTOM_ENABLED"        , bCUSTOM_ENABLED          );
							IDbDataParameter parREPORT_ENABLED         = Sql.AddParameter(cmd, "@REPORT_ENABLED"        , bREPORT_ENABLED          );
							IDbDataParameter parIMPORT_ENABLED         = Sql.AddParameter(cmd, "@IMPORT_ENABLED"        , bIMPORT_ENABLED          );
							IDbDataParameter parIS_ADMIN               = Sql.AddParameter(cmd, "@IS_ADMIN"              , bIS_ADMIN                );
							IDbDataParameter parTABLE_NAME             = Sql.AddParameter(cmd, "@TABLE_NAME"            , sTABLE_NAME              ,  30);
							IDbDataParameter parMOBILE_ENABLED         = Sql.AddParameter(cmd, "@MOBILE_ENABLED"        , bMOBILE_ENABLED          );
							IDbDataParameter parMASS_UPDATE_ENABLED    = Sql.AddParameter(cmd, "@MASS_UPDATE_ENABLED"   , bMASS_UPDATE_ENABLED     );
							IDbDataParameter parEXCHANGE_SYNC          = Sql.AddParameter(cmd, "@EXCHANGE_SYNC"         , bEXCHANGE_SYNC           );
							IDbDataParameter parEXCHANGE_FOLDERS       = Sql.AddParameter(cmd, "@EXCHANGE_FOLDERS"      , bEXCHANGE_FOLDERS        );
							IDbDataParameter parEXCHANGE_CREATE_PARENT = Sql.AddParameter(cmd, "@EXCHANGE_CREATE_PARENT", bEXCHANGE_CREATE_PARENT  );
							IDbDataParameter parREST_ENABLED           = Sql.AddParameter(cmd, "@REST_ENABLED"          , bREST_ENABLED            );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_InsertOnly
		/// <summary>
		/// spMODULES_InsertOnly
		/// </summary>
		public void spMODULES_InsertOnly(string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, bool bMODULE_ENABLED, bool bTAB_ENABLED, Int32 nTAB_ORDER, bool bPORTAL_ENABLED, bool bCUSTOM_ENABLED, bool bREPORT_ENABLED, bool bIMPORT_ENABLED, bool bIS_ADMIN, string sTABLE_NAME, bool bMOBILE_ENABLED, bool bMASS_UPDATE_ENABLED, bool bEXCHANGE_SYNC, bool bEXCHANGE_FOLDERS, bool bEXCHANGE_CREATE_PARENT, bool bREST_ENABLED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID       = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"      ,  Security.USER_ID        );
				IDbDataParameter parMODULE_NAME            = Sql.AddParameter(cmd, "@MODULE_NAME"           , sMODULE_NAME             ,  25);
				IDbDataParameter parDISPLAY_NAME           = Sql.AddParameter(cmd, "@DISPLAY_NAME"          , sDISPLAY_NAME            ,  50);
				IDbDataParameter parRELATIVE_PATH          = Sql.AddParameter(cmd, "@RELATIVE_PATH"         , sRELATIVE_PATH           ,  50);
				IDbDataParameter parMODULE_ENABLED         = Sql.AddParameter(cmd, "@MODULE_ENABLED"        , bMODULE_ENABLED          );
				IDbDataParameter parTAB_ENABLED            = Sql.AddParameter(cmd, "@TAB_ENABLED"           , bTAB_ENABLED             );
				IDbDataParameter parTAB_ORDER              = Sql.AddParameter(cmd, "@TAB_ORDER"             , nTAB_ORDER               );
				IDbDataParameter parPORTAL_ENABLED         = Sql.AddParameter(cmd, "@PORTAL_ENABLED"        , bPORTAL_ENABLED          );
				IDbDataParameter parCUSTOM_ENABLED         = Sql.AddParameter(cmd, "@CUSTOM_ENABLED"        , bCUSTOM_ENABLED          );
				IDbDataParameter parREPORT_ENABLED         = Sql.AddParameter(cmd, "@REPORT_ENABLED"        , bREPORT_ENABLED          );
				IDbDataParameter parIMPORT_ENABLED         = Sql.AddParameter(cmd, "@IMPORT_ENABLED"        , bIMPORT_ENABLED          );
				IDbDataParameter parIS_ADMIN               = Sql.AddParameter(cmd, "@IS_ADMIN"              , bIS_ADMIN                );
				IDbDataParameter parTABLE_NAME             = Sql.AddParameter(cmd, "@TABLE_NAME"            , sTABLE_NAME              ,  30);
				IDbDataParameter parMOBILE_ENABLED         = Sql.AddParameter(cmd, "@MOBILE_ENABLED"        , bMOBILE_ENABLED          );
				IDbDataParameter parMASS_UPDATE_ENABLED    = Sql.AddParameter(cmd, "@MASS_UPDATE_ENABLED"   , bMASS_UPDATE_ENABLED     );
				IDbDataParameter parEXCHANGE_SYNC          = Sql.AddParameter(cmd, "@EXCHANGE_SYNC"         , bEXCHANGE_SYNC           );
				IDbDataParameter parEXCHANGE_FOLDERS       = Sql.AddParameter(cmd, "@EXCHANGE_FOLDERS"      , bEXCHANGE_FOLDERS        );
				IDbDataParameter parEXCHANGE_CREATE_PARENT = Sql.AddParameter(cmd, "@EXCHANGE_CREATE_PARENT", bEXCHANGE_CREATE_PARENT  );
				IDbDataParameter parREST_ENABLED           = Sql.AddParameter(cmd, "@REST_ENABLED"          , bREST_ENABLED            );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_InsertOnly
		/// <summary>
		/// spMODULES_InsertOnly
		/// </summary>
		public IDbCommand cmdMODULES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID       = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"      , "Guid",  16);
			IDbDataParameter parMODULE_NAME            = Sql.CreateParameter(cmd, "@MODULE_NAME"           , "string",  25);
			IDbDataParameter parDISPLAY_NAME           = Sql.CreateParameter(cmd, "@DISPLAY_NAME"          , "string",  50);
			IDbDataParameter parRELATIVE_PATH          = Sql.CreateParameter(cmd, "@RELATIVE_PATH"         , "string",  50);
			IDbDataParameter parMODULE_ENABLED         = Sql.CreateParameter(cmd, "@MODULE_ENABLED"        , "bool",   1);
			IDbDataParameter parTAB_ENABLED            = Sql.CreateParameter(cmd, "@TAB_ENABLED"           , "bool",   1);
			IDbDataParameter parTAB_ORDER              = Sql.CreateParameter(cmd, "@TAB_ORDER"             , "Int32",   4);
			IDbDataParameter parPORTAL_ENABLED         = Sql.CreateParameter(cmd, "@PORTAL_ENABLED"        , "bool",   1);
			IDbDataParameter parCUSTOM_ENABLED         = Sql.CreateParameter(cmd, "@CUSTOM_ENABLED"        , "bool",   1);
			IDbDataParameter parREPORT_ENABLED         = Sql.CreateParameter(cmd, "@REPORT_ENABLED"        , "bool",   1);
			IDbDataParameter parIMPORT_ENABLED         = Sql.CreateParameter(cmd, "@IMPORT_ENABLED"        , "bool",   1);
			IDbDataParameter parIS_ADMIN               = Sql.CreateParameter(cmd, "@IS_ADMIN"              , "bool",   1);
			IDbDataParameter parTABLE_NAME             = Sql.CreateParameter(cmd, "@TABLE_NAME"            , "string",  30);
			IDbDataParameter parMOBILE_ENABLED         = Sql.CreateParameter(cmd, "@MOBILE_ENABLED"        , "bool",   1);
			IDbDataParameter parMASS_UPDATE_ENABLED    = Sql.CreateParameter(cmd, "@MASS_UPDATE_ENABLED"   , "bool",   1);
			IDbDataParameter parEXCHANGE_SYNC          = Sql.CreateParameter(cmd, "@EXCHANGE_SYNC"         , "bool",   1);
			IDbDataParameter parEXCHANGE_FOLDERS       = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDERS"      , "bool",   1);
			IDbDataParameter parEXCHANGE_CREATE_PARENT = Sql.CreateParameter(cmd, "@EXCHANGE_CREATE_PARENT", "bool",   1);
			IDbDataParameter parREST_ENABLED           = Sql.CreateParameter(cmd, "@REST_ENABLED"          , "bool",   1);
			return cmd;
		}
		#endregion

		#region spMODULES_Reorder
		/// <summary>
		/// spMODULES_Reorder
		/// </summary>
		public void spMODULES_Reorder()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Reorder";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Reorder
		/// <summary>
		/// spMODULES_Reorder
		/// </summary>
		public void spMODULES_Reorder(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Reorder";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_Reorder
		/// <summary>
		/// spMODULES_Reorder
		/// </summary>
		public IDbCommand cmdMODULES_Reorder(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Reorder";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_Hide
		/// <summary>
		/// spMODULES_TAB_Hide
		/// </summary>
		public void spMODULES_TAB_Hide(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_Hide";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_Hide
		/// <summary>
		/// spMODULES_TAB_Hide
		/// </summary>
		public void spMODULES_TAB_Hide(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_Hide";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_Hide
		/// <summary>
		/// spMODULES_TAB_Hide
		/// </summary>
		public IDbCommand cmdMODULES_TAB_Hide(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_Hide";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_HideMobile
		/// <summary>
		/// spMODULES_TAB_HideMobile
		/// </summary>
		public void spMODULES_TAB_HideMobile(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_HideMobile";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_HideMobile
		/// <summary>
		/// spMODULES_TAB_HideMobile
		/// </summary>
		public void spMODULES_TAB_HideMobile(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_HideMobile";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_HideMobile
		/// <summary>
		/// spMODULES_TAB_HideMobile
		/// </summary>
		public IDbCommand cmdMODULES_TAB_HideMobile(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_HideMobile";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveDown
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveDown
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ORDER_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveDown
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveDown
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ORDER_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ORDER_MoveDown
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveDown
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ORDER_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ORDER_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveItem
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveItem
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveItem(Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ORDER_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveItem
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveItem
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveItem(Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ORDER_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ORDER_MoveItem
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveItem
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ORDER_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ORDER_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveUp
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveUp
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ORDER_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ORDER_MoveUp
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveUp
		/// </summary>
		public void spMODULES_TAB_ORDER_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ORDER_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ORDER_MoveUp
		/// <summary>
		/// spMODULES_TAB_ORDER_MoveUp
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ORDER_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ORDER_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ORDER_Reorder
		/// <summary>
		/// spMODULES_TAB_ORDER_Reorder
		/// </summary>
		public void spMODULES_TAB_ORDER_Reorder()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ORDER_Reorder";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ORDER_Reorder
		/// <summary>
		/// spMODULES_TAB_ORDER_Reorder
		/// </summary>
		public void spMODULES_TAB_ORDER_Reorder(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ORDER_Reorder";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ORDER_Reorder
		/// <summary>
		/// spMODULES_TAB_ORDER_Reorder
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ORDER_Reorder(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ORDER_Reorder";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_Rename
		/// <summary>
		/// spMODULES_TAB_Rename
		/// </summary>
		public void spMODULES_TAB_Rename(Guid gID, string sNAME, string sLANG, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_Rename";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 2000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_Rename
		/// <summary>
		/// spMODULES_TAB_Rename
		/// </summary>
		public void spMODULES_TAB_Rename(Guid gID, string sNAME, string sLANG, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_Rename";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 2000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_Rename
		/// <summary>
		/// spMODULES_TAB_Rename
		/// </summary>
		public IDbCommand cmdMODULES_TAB_Rename(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_Rename";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  50);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string", 2000);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_Show
		/// <summary>
		/// spMODULES_TAB_Show
		/// </summary>
		public void spMODULES_TAB_Show(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_Show";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_Show
		/// <summary>
		/// spMODULES_TAB_Show
		/// </summary>
		public void spMODULES_TAB_Show(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_Show";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_Show
		/// <summary>
		/// spMODULES_TAB_Show
		/// </summary>
		public IDbCommand cmdMODULES_TAB_Show(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_Show";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_TAB_ShowMobile
		/// <summary>
		/// spMODULES_TAB_ShowMobile
		/// </summary>
		public void spMODULES_TAB_ShowMobile(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_TAB_ShowMobile";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_TAB_ShowMobile
		/// <summary>
		/// spMODULES_TAB_ShowMobile
		/// </summary>
		public void spMODULES_TAB_ShowMobile(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_TAB_ShowMobile";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_TAB_ShowMobile
		/// <summary>
		/// spMODULES_TAB_ShowMobile
		/// </summary>
		public IDbCommand cmdMODULES_TAB_ShowMobile(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_TAB_ShowMobile";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spMODULES_Update
		/// <summary>
		/// spMODULES_Update
		/// </summary>
		public void spMODULES_Update(ref Guid gID, string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, bool bMODULE_ENABLED, bool bTAB_ENABLED, bool bMOBILE_ENABLED, Int32 nTAB_ORDER, bool bPORTAL_ENABLED, bool bCUSTOM_ENABLED, bool bREPORT_ENABLED, bool bIMPORT_ENABLED, bool bSYNC_ENABLED, bool bIS_ADMIN, bool bCUSTOM_PAGING, string sTABLE_NAME, bool bMASS_UPDATE_ENABLED, bool bDEFAULT_SEARCH_ENABLED, bool bEXCHANGE_SYNC, bool bEXCHANGE_FOLDERS, bool bEXCHANGE_CREATE_PARENT, bool bREST_ENABLED, bool bDUPLICATE_CHECHING_ENABLED, bool bRECORD_LEVEL_SECURITY_ENABLED)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_Update";
							IDbDataParameter parID                            = Sql.AddParameter(cmd, "@ID"                           , gID                             );
							IDbDataParameter parMODIFIED_USER_ID              = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"             ,  Security.USER_ID               );
							IDbDataParameter parMODULE_NAME                   = Sql.AddParameter(cmd, "@MODULE_NAME"                  , sMODULE_NAME                    ,  25);
							IDbDataParameter parDISPLAY_NAME                  = Sql.AddParameter(cmd, "@DISPLAY_NAME"                 , sDISPLAY_NAME                   ,  50);
							IDbDataParameter parRELATIVE_PATH                 = Sql.AddParameter(cmd, "@RELATIVE_PATH"                , sRELATIVE_PATH                  ,  50);
							IDbDataParameter parMODULE_ENABLED                = Sql.AddParameter(cmd, "@MODULE_ENABLED"               , bMODULE_ENABLED                 );
							IDbDataParameter parTAB_ENABLED                   = Sql.AddParameter(cmd, "@TAB_ENABLED"                  , bTAB_ENABLED                    );
							IDbDataParameter parMOBILE_ENABLED                = Sql.AddParameter(cmd, "@MOBILE_ENABLED"               , bMOBILE_ENABLED                 );
							IDbDataParameter parTAB_ORDER                     = Sql.AddParameter(cmd, "@TAB_ORDER"                    , nTAB_ORDER                      );
							IDbDataParameter parPORTAL_ENABLED                = Sql.AddParameter(cmd, "@PORTAL_ENABLED"               , bPORTAL_ENABLED                 );
							IDbDataParameter parCUSTOM_ENABLED                = Sql.AddParameter(cmd, "@CUSTOM_ENABLED"               , bCUSTOM_ENABLED                 );
							IDbDataParameter parREPORT_ENABLED                = Sql.AddParameter(cmd, "@REPORT_ENABLED"               , bREPORT_ENABLED                 );
							IDbDataParameter parIMPORT_ENABLED                = Sql.AddParameter(cmd, "@IMPORT_ENABLED"               , bIMPORT_ENABLED                 );
							IDbDataParameter parSYNC_ENABLED                  = Sql.AddParameter(cmd, "@SYNC_ENABLED"                 , bSYNC_ENABLED                   );
							IDbDataParameter parIS_ADMIN                      = Sql.AddParameter(cmd, "@IS_ADMIN"                     , bIS_ADMIN                       );
							IDbDataParameter parCUSTOM_PAGING                 = Sql.AddParameter(cmd, "@CUSTOM_PAGING"                , bCUSTOM_PAGING                  );
							IDbDataParameter parTABLE_NAME                    = Sql.AddParameter(cmd, "@TABLE_NAME"                   , sTABLE_NAME                     ,  30);
							IDbDataParameter parMASS_UPDATE_ENABLED           = Sql.AddParameter(cmd, "@MASS_UPDATE_ENABLED"          , bMASS_UPDATE_ENABLED            );
							IDbDataParameter parDEFAULT_SEARCH_ENABLED        = Sql.AddParameter(cmd, "@DEFAULT_SEARCH_ENABLED"       , bDEFAULT_SEARCH_ENABLED         );
							IDbDataParameter parEXCHANGE_SYNC                 = Sql.AddParameter(cmd, "@EXCHANGE_SYNC"                , bEXCHANGE_SYNC                  );
							IDbDataParameter parEXCHANGE_FOLDERS              = Sql.AddParameter(cmd, "@EXCHANGE_FOLDERS"             , bEXCHANGE_FOLDERS               );
							IDbDataParameter parEXCHANGE_CREATE_PARENT        = Sql.AddParameter(cmd, "@EXCHANGE_CREATE_PARENT"       , bEXCHANGE_CREATE_PARENT         );
							IDbDataParameter parREST_ENABLED                  = Sql.AddParameter(cmd, "@REST_ENABLED"                 , bREST_ENABLED                   );
							IDbDataParameter parDUPLICATE_CHECHING_ENABLED    = Sql.AddParameter(cmd, "@DUPLICATE_CHECHING_ENABLED"   , bDUPLICATE_CHECHING_ENABLED     );
							IDbDataParameter parRECORD_LEVEL_SECURITY_ENABLED = Sql.AddParameter(cmd, "@RECORD_LEVEL_SECURITY_ENABLED", bRECORD_LEVEL_SECURITY_ENABLED  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_Update
		/// <summary>
		/// spMODULES_Update
		/// </summary>
		public void spMODULES_Update(ref Guid gID, string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, bool bMODULE_ENABLED, bool bTAB_ENABLED, bool bMOBILE_ENABLED, Int32 nTAB_ORDER, bool bPORTAL_ENABLED, bool bCUSTOM_ENABLED, bool bREPORT_ENABLED, bool bIMPORT_ENABLED, bool bSYNC_ENABLED, bool bIS_ADMIN, bool bCUSTOM_PAGING, string sTABLE_NAME, bool bMASS_UPDATE_ENABLED, bool bDEFAULT_SEARCH_ENABLED, bool bEXCHANGE_SYNC, bool bEXCHANGE_FOLDERS, bool bEXCHANGE_CREATE_PARENT, bool bREST_ENABLED, bool bDUPLICATE_CHECHING_ENABLED, bool bRECORD_LEVEL_SECURITY_ENABLED, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_Update";
				IDbDataParameter parID                            = Sql.AddParameter(cmd, "@ID"                           , gID                             );
				IDbDataParameter parMODIFIED_USER_ID              = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"             ,  Security.USER_ID               );
				IDbDataParameter parMODULE_NAME                   = Sql.AddParameter(cmd, "@MODULE_NAME"                  , sMODULE_NAME                    ,  25);
				IDbDataParameter parDISPLAY_NAME                  = Sql.AddParameter(cmd, "@DISPLAY_NAME"                 , sDISPLAY_NAME                   ,  50);
				IDbDataParameter parRELATIVE_PATH                 = Sql.AddParameter(cmd, "@RELATIVE_PATH"                , sRELATIVE_PATH                  ,  50);
				IDbDataParameter parMODULE_ENABLED                = Sql.AddParameter(cmd, "@MODULE_ENABLED"               , bMODULE_ENABLED                 );
				IDbDataParameter parTAB_ENABLED                   = Sql.AddParameter(cmd, "@TAB_ENABLED"                  , bTAB_ENABLED                    );
				IDbDataParameter parMOBILE_ENABLED                = Sql.AddParameter(cmd, "@MOBILE_ENABLED"               , bMOBILE_ENABLED                 );
				IDbDataParameter parTAB_ORDER                     = Sql.AddParameter(cmd, "@TAB_ORDER"                    , nTAB_ORDER                      );
				IDbDataParameter parPORTAL_ENABLED                = Sql.AddParameter(cmd, "@PORTAL_ENABLED"               , bPORTAL_ENABLED                 );
				IDbDataParameter parCUSTOM_ENABLED                = Sql.AddParameter(cmd, "@CUSTOM_ENABLED"               , bCUSTOM_ENABLED                 );
				IDbDataParameter parREPORT_ENABLED                = Sql.AddParameter(cmd, "@REPORT_ENABLED"               , bREPORT_ENABLED                 );
				IDbDataParameter parIMPORT_ENABLED                = Sql.AddParameter(cmd, "@IMPORT_ENABLED"               , bIMPORT_ENABLED                 );
				IDbDataParameter parSYNC_ENABLED                  = Sql.AddParameter(cmd, "@SYNC_ENABLED"                 , bSYNC_ENABLED                   );
				IDbDataParameter parIS_ADMIN                      = Sql.AddParameter(cmd, "@IS_ADMIN"                     , bIS_ADMIN                       );
				IDbDataParameter parCUSTOM_PAGING                 = Sql.AddParameter(cmd, "@CUSTOM_PAGING"                , bCUSTOM_PAGING                  );
				IDbDataParameter parTABLE_NAME                    = Sql.AddParameter(cmd, "@TABLE_NAME"                   , sTABLE_NAME                     ,  30);
				IDbDataParameter parMASS_UPDATE_ENABLED           = Sql.AddParameter(cmd, "@MASS_UPDATE_ENABLED"          , bMASS_UPDATE_ENABLED            );
				IDbDataParameter parDEFAULT_SEARCH_ENABLED        = Sql.AddParameter(cmd, "@DEFAULT_SEARCH_ENABLED"       , bDEFAULT_SEARCH_ENABLED         );
				IDbDataParameter parEXCHANGE_SYNC                 = Sql.AddParameter(cmd, "@EXCHANGE_SYNC"                , bEXCHANGE_SYNC                  );
				IDbDataParameter parEXCHANGE_FOLDERS              = Sql.AddParameter(cmd, "@EXCHANGE_FOLDERS"             , bEXCHANGE_FOLDERS               );
				IDbDataParameter parEXCHANGE_CREATE_PARENT        = Sql.AddParameter(cmd, "@EXCHANGE_CREATE_PARENT"       , bEXCHANGE_CREATE_PARENT         );
				IDbDataParameter parREST_ENABLED                  = Sql.AddParameter(cmd, "@REST_ENABLED"                 , bREST_ENABLED                   );
				IDbDataParameter parDUPLICATE_CHECHING_ENABLED    = Sql.AddParameter(cmd, "@DUPLICATE_CHECHING_ENABLED"   , bDUPLICATE_CHECHING_ENABLED     );
				IDbDataParameter parRECORD_LEVEL_SECURITY_ENABLED = Sql.AddParameter(cmd, "@RECORD_LEVEL_SECURITY_ENABLED", bRECORD_LEVEL_SECURITY_ENABLED  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdMODULES_Update
		/// <summary>
		/// spMODULES_Update
		/// </summary>
		public IDbCommand cmdMODULES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_Update";
			IDbDataParameter parID                            = Sql.CreateParameter(cmd, "@ID"                           , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID              = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"             , "Guid",  16);
			IDbDataParameter parMODULE_NAME                   = Sql.CreateParameter(cmd, "@MODULE_NAME"                  , "string",  25);
			IDbDataParameter parDISPLAY_NAME                  = Sql.CreateParameter(cmd, "@DISPLAY_NAME"                 , "string",  50);
			IDbDataParameter parRELATIVE_PATH                 = Sql.CreateParameter(cmd, "@RELATIVE_PATH"                , "string",  50);
			IDbDataParameter parMODULE_ENABLED                = Sql.CreateParameter(cmd, "@MODULE_ENABLED"               , "bool",   1);
			IDbDataParameter parTAB_ENABLED                   = Sql.CreateParameter(cmd, "@TAB_ENABLED"                  , "bool",   1);
			IDbDataParameter parMOBILE_ENABLED                = Sql.CreateParameter(cmd, "@MOBILE_ENABLED"               , "bool",   1);
			IDbDataParameter parTAB_ORDER                     = Sql.CreateParameter(cmd, "@TAB_ORDER"                    , "Int32",   4);
			IDbDataParameter parPORTAL_ENABLED                = Sql.CreateParameter(cmd, "@PORTAL_ENABLED"               , "bool",   1);
			IDbDataParameter parCUSTOM_ENABLED                = Sql.CreateParameter(cmd, "@CUSTOM_ENABLED"               , "bool",   1);
			IDbDataParameter parREPORT_ENABLED                = Sql.CreateParameter(cmd, "@REPORT_ENABLED"               , "bool",   1);
			IDbDataParameter parIMPORT_ENABLED                = Sql.CreateParameter(cmd, "@IMPORT_ENABLED"               , "bool",   1);
			IDbDataParameter parSYNC_ENABLED                  = Sql.CreateParameter(cmd, "@SYNC_ENABLED"                 , "bool",   1);
			IDbDataParameter parIS_ADMIN                      = Sql.CreateParameter(cmd, "@IS_ADMIN"                     , "bool",   1);
			IDbDataParameter parCUSTOM_PAGING                 = Sql.CreateParameter(cmd, "@CUSTOM_PAGING"                , "bool",   1);
			IDbDataParameter parTABLE_NAME                    = Sql.CreateParameter(cmd, "@TABLE_NAME"                   , "string",  30);
			IDbDataParameter parMASS_UPDATE_ENABLED           = Sql.CreateParameter(cmd, "@MASS_UPDATE_ENABLED"          , "bool",   1);
			IDbDataParameter parDEFAULT_SEARCH_ENABLED        = Sql.CreateParameter(cmd, "@DEFAULT_SEARCH_ENABLED"       , "bool",   1);
			IDbDataParameter parEXCHANGE_SYNC                 = Sql.CreateParameter(cmd, "@EXCHANGE_SYNC"                , "bool",   1);
			IDbDataParameter parEXCHANGE_FOLDERS              = Sql.CreateParameter(cmd, "@EXCHANGE_FOLDERS"             , "bool",   1);
			IDbDataParameter parEXCHANGE_CREATE_PARENT        = Sql.CreateParameter(cmd, "@EXCHANGE_CREATE_PARENT"       , "bool",   1);
			IDbDataParameter parREST_ENABLED                  = Sql.CreateParameter(cmd, "@REST_ENABLED"                 , "bool",   1);
			IDbDataParameter parDUPLICATE_CHECHING_ENABLED    = Sql.CreateParameter(cmd, "@DUPLICATE_CHECHING_ENABLED"   , "bool",   1);
			IDbDataParameter parRECORD_LEVEL_SECURITY_ENABLED = Sql.CreateParameter(cmd, "@RECORD_LEVEL_SECURITY_ENABLED", "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spMODULES_UpdateRelativePath
		/// <summary>
		/// spMODULES_UpdateRelativePath
		/// </summary>
		public void spMODULES_UpdateRelativePath(string sMODULE_NAME, string sRELATIVE_PATH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spMODULES_UpdateRelativePath";
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spMODULES_UpdateRelativePath
		/// <summary>
		/// spMODULES_UpdateRelativePath
		/// </summary>
		public void spMODULES_UpdateRelativePath(string sMODULE_NAME, string sRELATIVE_PATH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spMODULES_UpdateRelativePath";
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdMODULES_UpdateRelativePath
		/// <summary>
		/// spMODULES_UpdateRelativePath
		/// </summary>
		public IDbCommand cmdMODULES_UpdateRelativePath(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spMODULES_UpdateRelativePath";
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string",  50);
			return cmd;
		}
		#endregion

		#region spOAUTH_TOKENS_Delete
		/// <summary>
		/// spOAUTH_TOKENS_Delete
		/// </summary>
		public void spOAUTH_TOKENS_Delete(Guid gASSIGNED_USER_ID, string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOAUTH_TOKENS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOAUTH_TOKENS_Delete
		/// <summary>
		/// spOAUTH_TOKENS_Delete
		/// </summary>
		public void spOAUTH_TOKENS_Delete(Guid gASSIGNED_USER_ID, string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOAUTH_TOKENS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOAUTH_TOKENS_Delete
		/// <summary>
		/// spOAUTH_TOKENS_Delete
		/// </summary>
		public IDbCommand cmdOAUTH_TOKENS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOAUTH_TOKENS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  25);
			return cmd;
		}
		#endregion

		#region spOAUTH_TOKENS_Update
		/// <summary>
		/// spOAUTH_TOKENS_Update
		/// </summary>
		public void spOAUTH_TOKENS_Update(Guid gASSIGNED_USER_ID, string sNAME, string sTOKEN, string sSECRET, DateTime dtTOKEN_EXPIRES_AT, string sREFRESH_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOAUTH_TOKENS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
							IDbDataParameter parTOKEN            = Sql.AddParameter(cmd, "@TOKEN"           , sTOKEN             , 4000);
							IDbDataParameter parSECRET           = Sql.AddParameter(cmd, "@SECRET"          , sSECRET            ,  50);
							IDbDataParameter parTOKEN_EXPIRES_AT = Sql.AddParameter(cmd, "@TOKEN_EXPIRES_AT", dtTOKEN_EXPIRES_AT );
							IDbDataParameter parREFRESH_TOKEN    = Sql.AddParameter(cmd, "@REFRESH_TOKEN"   , sREFRESH_TOKEN     , 4000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOAUTH_TOKENS_Update
		/// <summary>
		/// spOAUTH_TOKENS_Update
		/// </summary>
		public void spOAUTH_TOKENS_Update(Guid gASSIGNED_USER_ID, string sNAME, string sTOKEN, string sSECRET, DateTime dtTOKEN_EXPIRES_AT, string sREFRESH_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOAUTH_TOKENS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  50);
				IDbDataParameter parTOKEN            = Sql.AddParameter(cmd, "@TOKEN"           , sTOKEN             , 4000);
				IDbDataParameter parSECRET           = Sql.AddParameter(cmd, "@SECRET"          , sSECRET            ,  50);
				IDbDataParameter parTOKEN_EXPIRES_AT = Sql.AddParameter(cmd, "@TOKEN_EXPIRES_AT", dtTOKEN_EXPIRES_AT );
				IDbDataParameter parREFRESH_TOKEN    = Sql.AddParameter(cmd, "@REFRESH_TOKEN"   , sREFRESH_TOKEN     , 4000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOAUTH_TOKENS_Update
		/// <summary>
		/// spOAUTH_TOKENS_Update
		/// </summary>
		public IDbCommand cmdOAUTH_TOKENS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOAUTH_TOKENS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  50);
			IDbDataParameter parTOKEN            = Sql.CreateParameter(cmd, "@TOKEN"           , "string", 4000);
			IDbDataParameter parSECRET           = Sql.CreateParameter(cmd, "@SECRET"          , "string",  50);
			IDbDataParameter parTOKEN_EXPIRES_AT = Sql.CreateParameter(cmd, "@TOKEN_EXPIRES_AT", "DateTime",   8);
			IDbDataParameter parREFRESH_TOKEN    = Sql.CreateParameter(cmd, "@REFRESH_TOKEN"   , "string", 4000);
			return cmd;
		}
		#endregion

		#region spOAUTHKEYS_Delete
		/// <summary>
		/// spOAUTHKEYS_Delete
		/// </summary>
		public void spOAUTHKEYS_Delete(Guid gASSIGNED_USER_ID, string sNAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOAUTHKEYS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOAUTHKEYS_Delete
		/// <summary>
		/// spOAUTHKEYS_Delete
		/// </summary>
		public void spOAUTHKEYS_Delete(Guid gASSIGNED_USER_ID, string sNAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOAUTHKEYS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOAUTHKEYS_Delete
		/// <summary>
		/// spOAUTHKEYS_Delete
		/// </summary>
		public IDbCommand cmdOAUTHKEYS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOAUTHKEYS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  25);
			return cmd;
		}
		#endregion

		#region spOAUTHKEYS_Update
		/// <summary>
		/// spOAUTHKEYS_Update
		/// </summary>
		public void spOAUTHKEYS_Update(Guid gASSIGNED_USER_ID, string sNAME, string sTOKEN, string sSECRET, string sVERIFIER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOAUTHKEYS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
							IDbDataParameter parTOKEN            = Sql.AddParameter(cmd, "@TOKEN"           , sTOKEN             , 200);
							IDbDataParameter parSECRET           = Sql.AddParameter(cmd, "@SECRET"          , sSECRET            ,  50);
							IDbDataParameter parVERIFIER         = Sql.AddParameter(cmd, "@VERIFIER"        , sVERIFIER          ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOAUTHKEYS_Update
		/// <summary>
		/// spOAUTHKEYS_Update
		/// </summary>
		public void spOAUTHKEYS_Update(Guid gASSIGNED_USER_ID, string sNAME, string sTOKEN, string sSECRET, string sVERIFIER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOAUTHKEYS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              ,  25);
				IDbDataParameter parTOKEN            = Sql.AddParameter(cmd, "@TOKEN"           , sTOKEN             , 200);
				IDbDataParameter parSECRET           = Sql.AddParameter(cmd, "@SECRET"          , sSECRET            ,  50);
				IDbDataParameter parVERIFIER         = Sql.AddParameter(cmd, "@VERIFIER"        , sVERIFIER          ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOAUTHKEYS_Update
		/// <summary>
		/// spOAUTHKEYS_Update
		/// </summary>
		public IDbCommand cmdOAUTHKEYS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOAUTHKEYS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string",  25);
			IDbDataParameter parTOKEN            = Sql.CreateParameter(cmd, "@TOKEN"           , "string", 200);
			IDbDataParameter parSECRET           = Sql.CreateParameter(cmd, "@SECRET"          , "string",  50);
			IDbDataParameter parVERIFIER         = Sql.CreateParameter(cmd, "@VERIFIER"        , "string",  50);
			return cmd;
		}
		#endregion

		#region spOUTBOUND_EMAILS_Delete
		/// <summary>
		/// spOUTBOUND_EMAILS_Delete
		/// </summary>
		public void spOUTBOUND_EMAILS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOUTBOUND_EMAILS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOUTBOUND_EMAILS_Delete
		/// <summary>
		/// spOUTBOUND_EMAILS_Delete
		/// </summary>
		public void spOUTBOUND_EMAILS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOUTBOUND_EMAILS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOUTBOUND_EMAILS_Delete
		/// <summary>
		/// spOUTBOUND_EMAILS_Delete
		/// </summary>
		public IDbCommand cmdOUTBOUND_EMAILS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOUTBOUND_EMAILS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spOUTBOUND_EMAILS_Update
		/// <summary>
		/// spOUTBOUND_EMAILS_Update
		/// </summary>
		public void spOUTBOUND_EMAILS_Update(ref Guid gID, string sNAME, string sTYPE, Guid gUSER_ID, string sMAIL_SENDTYPE, string sMAIL_SMTPTYPE, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sFROM_NAME, string sFROM_ADDR, Guid gTEAM_ID, string sTEAM_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOUTBOUND_EMAILS_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  15);
							IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
							IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
							IDbDataParameter parMAIL_SMTPTYPE     = Sql.AddParameter(cmd, "@MAIL_SMTPTYPE"    , sMAIL_SMTPTYPE      ,  20);
							IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
							IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
							IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
							IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
							IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
							IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , nMAIL_SMTPSSL       );
							IDbDataParameter parFROM_NAME         = Sql.AddParameter(cmd, "@FROM_NAME"        , sFROM_NAME          , 100);
							IDbDataParameter parFROM_ADDR         = Sql.AddParameter(cmd, "@FROM_ADDR"        , sFROM_ADDR          , 100);
							IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
							IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOUTBOUND_EMAILS_Update
		/// <summary>
		/// spOUTBOUND_EMAILS_Update
		/// </summary>
		public void spOUTBOUND_EMAILS_Update(ref Guid gID, string sNAME, string sTYPE, Guid gUSER_ID, string sMAIL_SENDTYPE, string sMAIL_SMTPTYPE, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sFROM_NAME, string sFROM_ADDR, Guid gTEAM_ID, string sTEAM_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOUTBOUND_EMAILS_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parTYPE              = Sql.AddParameter(cmd, "@TYPE"             , sTYPE               ,  15);
				IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
				IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
				IDbDataParameter parMAIL_SMTPTYPE     = Sql.AddParameter(cmd, "@MAIL_SMTPTYPE"    , sMAIL_SMTPTYPE      ,  20);
				IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
				IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
				IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
				IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
				IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
				IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , nMAIL_SMTPSSL       );
				IDbDataParameter parFROM_NAME         = Sql.AddParameter(cmd, "@FROM_NAME"        , sFROM_NAME          , 100);
				IDbDataParameter parFROM_ADDR         = Sql.AddParameter(cmd, "@FROM_ADDR"        , sFROM_ADDR          , 100);
				IDbDataParameter parTEAM_ID           = Sql.AddParameter(cmd, "@TEAM_ID"          , gTEAM_ID            );
				IDbDataParameter parTEAM_SET_LIST     = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"    , sTEAM_SET_LIST      , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdOUTBOUND_EMAILS_Update
		/// <summary>
		/// spOUTBOUND_EMAILS_Update
		/// </summary>
		public IDbCommand cmdOUTBOUND_EMAILS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOUTBOUND_EMAILS_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parTYPE              = Sql.CreateParameter(cmd, "@TYPE"             , "string",  15);
			IDbDataParameter parUSER_ID           = Sql.CreateParameter(cmd, "@USER_ID"          , "Guid",  16);
			IDbDataParameter parMAIL_SENDTYPE     = Sql.CreateParameter(cmd, "@MAIL_SENDTYPE"    , "string",  25);
			IDbDataParameter parMAIL_SMTPTYPE     = Sql.CreateParameter(cmd, "@MAIL_SMTPTYPE"    , "string",  20);
			IDbDataParameter parMAIL_SMTPSERVER   = Sql.CreateParameter(cmd, "@MAIL_SMTPSERVER"  , "string", 100);
			IDbDataParameter parMAIL_SMTPPORT     = Sql.CreateParameter(cmd, "@MAIL_SMTPPORT"    , "Int32",   4);
			IDbDataParameter parMAIL_SMTPUSER     = Sql.CreateParameter(cmd, "@MAIL_SMTPUSER"    , "string", 100);
			IDbDataParameter parMAIL_SMTPPASS     = Sql.CreateParameter(cmd, "@MAIL_SMTPPASS"    , "string", 100);
			IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.CreateParameter(cmd, "@MAIL_SMTPAUTH_REQ", "bool",   1);
			IDbDataParameter parMAIL_SMTPSSL      = Sql.CreateParameter(cmd, "@MAIL_SMTPSSL"     , "Int32",   4);
			IDbDataParameter parFROM_NAME         = Sql.CreateParameter(cmd, "@FROM_NAME"        , "string", 100);
			IDbDataParameter parFROM_ADDR         = Sql.CreateParameter(cmd, "@FROM_ADDR"        , "string", 100);
			IDbDataParameter parTEAM_ID           = Sql.CreateParameter(cmd, "@TEAM_ID"          , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST     = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"    , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spOUTBOUND_EMAILS_UpdateUser
		/// <summary>
		/// spOUTBOUND_EMAILS_UpdateUser
		/// </summary>
		public void spOUTBOUND_EMAILS_UpdateUser(Guid gUSER_ID, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sMAIL_SENDTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spOUTBOUND_EMAILS_UpdateUser";
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
							IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
							IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
							IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
							IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
							IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
							IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , nMAIL_SMTPSSL       );
							IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spOUTBOUND_EMAILS_UpdateUser
		/// <summary>
		/// spOUTBOUND_EMAILS_UpdateUser
		/// </summary>
		public void spOUTBOUND_EMAILS_UpdateUser(Guid gUSER_ID, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sMAIL_SENDTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spOUTBOUND_EMAILS_UpdateUser";
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parUSER_ID           = Sql.AddParameter(cmd, "@USER_ID"          , gUSER_ID            );
				IDbDataParameter parMAIL_SMTPUSER     = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"    , sMAIL_SMTPUSER      , 100);
				IDbDataParameter parMAIL_SMTPPASS     = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"    , sMAIL_SMTPPASS      , 100);
				IDbDataParameter parMAIL_SMTPSERVER   = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"  , sMAIL_SMTPSERVER    , 100);
				IDbDataParameter parMAIL_SMTPPORT     = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"    , nMAIL_SMTPPORT      );
				IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ", bMAIL_SMTPAUTH_REQ  );
				IDbDataParameter parMAIL_SMTPSSL      = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"     , nMAIL_SMTPSSL       );
				IDbDataParameter parMAIL_SENDTYPE     = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"    , sMAIL_SENDTYPE      ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdOUTBOUND_EMAILS_UpdateUser
		/// <summary>
		/// spOUTBOUND_EMAILS_UpdateUser
		/// </summary>
		public IDbCommand cmdOUTBOUND_EMAILS_UpdateUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spOUTBOUND_EMAILS_UpdateUser";
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parUSER_ID           = Sql.CreateParameter(cmd, "@USER_ID"          , "Guid",  16);
			IDbDataParameter parMAIL_SMTPUSER     = Sql.CreateParameter(cmd, "@MAIL_SMTPUSER"    , "string", 100);
			IDbDataParameter parMAIL_SMTPPASS     = Sql.CreateParameter(cmd, "@MAIL_SMTPPASS"    , "string", 100);
			IDbDataParameter parMAIL_SMTPSERVER   = Sql.CreateParameter(cmd, "@MAIL_SMTPSERVER"  , "string", 100);
			IDbDataParameter parMAIL_SMTPPORT     = Sql.CreateParameter(cmd, "@MAIL_SMTPPORT"    , "Int32",   4);
			IDbDataParameter parMAIL_SMTPAUTH_REQ = Sql.CreateParameter(cmd, "@MAIL_SMTPAUTH_REQ", "bool",   1);
			IDbDataParameter parMAIL_SMTPSSL      = Sql.CreateParameter(cmd, "@MAIL_SMTPSSL"     , "Int32",   4);
			IDbDataParameter parMAIL_SENDTYPE     = Sql.CreateParameter(cmd, "@MAIL_SENDTYPE"    , "string",  25);
			return cmd;
		}
		#endregion

		#region spPARENT_Delete
		/// <summary>
		/// spPARENT_Delete
		/// </summary>
		public void spPARENT_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPARENT_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPARENT_Delete
		/// <summary>
		/// spPARENT_Delete
		/// </summary>
		public void spPARENT_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPARENT_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPARENT_Delete
		/// <summary>
		/// spPARENT_Delete
		/// </summary>
		public IDbCommand cmdPARENT_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPARENT_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPARENT_Undelete
		/// <summary>
		/// spPARENT_Undelete
		/// </summary>
		public void spPARENT_Undelete(Guid gID, string sAUDIT_TOKEN, string sPARENT_TYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPARENT_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPARENT_Undelete
		/// <summary>
		/// spPARENT_Undelete
		/// </summary>
		public void spPARENT_Undelete(Guid gID, string sAUDIT_TOKEN, string sPARENT_TYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPARENT_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				IDbDataParameter parPARENT_TYPE      = Sql.AddParameter(cmd, "@PARENT_TYPE"     , sPARENT_TYPE       ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPARENT_Undelete
		/// <summary>
		/// spPARENT_Undelete
		/// </summary>
		public IDbCommand cmdPARENT_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPARENT_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			IDbDataParameter parPARENT_TYPE      = Sql.CreateParameter(cmd, "@PARENT_TYPE"     , "string",  25);
			return cmd;
		}
		#endregion

		#region spREACT_CUSTOM_VIEWS_Delete
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Delete
		/// </summary>
		public void spREACT_CUSTOM_VIEWS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spREACT_CUSTOM_VIEWS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spREACT_CUSTOM_VIEWS_Delete
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Delete
		/// </summary>
		public void spREACT_CUSTOM_VIEWS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spREACT_CUSTOM_VIEWS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdREACT_CUSTOM_VIEWS_Delete
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Delete
		/// </summary>
		public IDbCommand cmdREACT_CUSTOM_VIEWS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spREACT_CUSTOM_VIEWS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spREACT_CUSTOM_VIEWS_Update
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Update
		/// </summary>
		public void spREACT_CUSTOM_VIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sCATEGORY, string sCONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spREACT_CUSTOM_VIEWS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 100);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  25);
							IDbDataParameter parCONTENT          = Sql.AddParameter(cmd, "@CONTENT"         , sCONTENT           );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spREACT_CUSTOM_VIEWS_Update
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Update
		/// </summary>
		public void spREACT_CUSTOM_VIEWS_Update(ref Guid gID, string sNAME, string sMODULE_NAME, string sCATEGORY, string sCONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spREACT_CUSTOM_VIEWS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 100);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          ,  25);
				IDbDataParameter parCONTENT          = Sql.AddParameter(cmd, "@CONTENT"         , sCONTENT           );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdREACT_CUSTOM_VIEWS_Update
		/// <summary>
		/// spREACT_CUSTOM_VIEWS_Update
		/// </summary>
		public IDbCommand cmdREACT_CUSTOM_VIEWS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spREACT_CUSTOM_VIEWS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 100);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  50);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string",  25);
			IDbDataParameter parCONTENT          = Sql.CreateParameter(cmd, "@CONTENT"         , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spRELATIONSHIPS_Delete
		/// <summary>
		/// spRELATIONSHIPS_Delete
		/// </summary>
		public void spRELATIONSHIPS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELATIONSHIPS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELATIONSHIPS_Delete
		/// <summary>
		/// spRELATIONSHIPS_Delete
		/// </summary>
		public void spRELATIONSHIPS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELATIONSHIPS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdRELATIONSHIPS_Delete
		/// <summary>
		/// spRELATIONSHIPS_Delete
		/// </summary>
		public IDbCommand cmdRELATIONSHIPS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELATIONSHIPS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spRELATIONSHIPS_InsertOnly
		/// <summary>
		/// spRELATIONSHIPS_InsertOnly
		/// </summary>
		public void spRELATIONSHIPS_InsertOnly(string sRELATIONSHIP_NAME, string sLHS_MODULE, string sLHS_TABLE, string sLHS_KEY, string sRHS_MODULE, string sRHS_TABLE, string sRHS_KEY, string sJOIN_TABLE, string sJOIN_KEY_LHS, string sJOIN_KEY_RHS, string sRELATIONSHIP_TYPE, string sRELATIONSHIP_ROLE_COLUMN, string sRELATIONSHIP_ROLE_COL_VALUE, bool bREVERSE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELATIONSHIPS_InsertOnly";
							IDbDataParameter parRELATIONSHIP_NAME           = Sql.AddParameter(cmd, "@RELATIONSHIP_NAME"          , sRELATIONSHIP_NAME            , 150);
							IDbDataParameter parLHS_MODULE                  = Sql.AddParameter(cmd, "@LHS_MODULE"                 , sLHS_MODULE                   , 100);
							IDbDataParameter parLHS_TABLE                   = Sql.AddParameter(cmd, "@LHS_TABLE"                  , sLHS_TABLE                    ,  64);
							IDbDataParameter parLHS_KEY                     = Sql.AddParameter(cmd, "@LHS_KEY"                    , sLHS_KEY                      ,  64);
							IDbDataParameter parRHS_MODULE                  = Sql.AddParameter(cmd, "@RHS_MODULE"                 , sRHS_MODULE                   , 100);
							IDbDataParameter parRHS_TABLE                   = Sql.AddParameter(cmd, "@RHS_TABLE"                  , sRHS_TABLE                    ,  64);
							IDbDataParameter parRHS_KEY                     = Sql.AddParameter(cmd, "@RHS_KEY"                    , sRHS_KEY                      ,  64);
							IDbDataParameter parJOIN_TABLE                  = Sql.AddParameter(cmd, "@JOIN_TABLE"                 , sJOIN_TABLE                   ,  64);
							IDbDataParameter parJOIN_KEY_LHS                = Sql.AddParameter(cmd, "@JOIN_KEY_LHS"               , sJOIN_KEY_LHS                 ,  64);
							IDbDataParameter parJOIN_KEY_RHS                = Sql.AddParameter(cmd, "@JOIN_KEY_RHS"               , sJOIN_KEY_RHS                 ,  64);
							IDbDataParameter parRELATIONSHIP_TYPE           = Sql.AddParameter(cmd, "@RELATIONSHIP_TYPE"          , sRELATIONSHIP_TYPE            ,  64);
							IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , sRELATIONSHIP_ROLE_COLUMN     ,  64);
							IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", sRELATIONSHIP_ROLE_COL_VALUE  ,  50);
							IDbDataParameter parREVERSE                     = Sql.AddParameter(cmd, "@REVERSE"                    , bREVERSE                      );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELATIONSHIPS_InsertOnly
		/// <summary>
		/// spRELATIONSHIPS_InsertOnly
		/// </summary>
		public void spRELATIONSHIPS_InsertOnly(string sRELATIONSHIP_NAME, string sLHS_MODULE, string sLHS_TABLE, string sLHS_KEY, string sRHS_MODULE, string sRHS_TABLE, string sRHS_KEY, string sJOIN_TABLE, string sJOIN_KEY_LHS, string sJOIN_KEY_RHS, string sRELATIONSHIP_TYPE, string sRELATIONSHIP_ROLE_COLUMN, string sRELATIONSHIP_ROLE_COL_VALUE, bool bREVERSE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELATIONSHIPS_InsertOnly";
				IDbDataParameter parRELATIONSHIP_NAME           = Sql.AddParameter(cmd, "@RELATIONSHIP_NAME"          , sRELATIONSHIP_NAME            , 150);
				IDbDataParameter parLHS_MODULE                  = Sql.AddParameter(cmd, "@LHS_MODULE"                 , sLHS_MODULE                   , 100);
				IDbDataParameter parLHS_TABLE                   = Sql.AddParameter(cmd, "@LHS_TABLE"                  , sLHS_TABLE                    ,  64);
				IDbDataParameter parLHS_KEY                     = Sql.AddParameter(cmd, "@LHS_KEY"                    , sLHS_KEY                      ,  64);
				IDbDataParameter parRHS_MODULE                  = Sql.AddParameter(cmd, "@RHS_MODULE"                 , sRHS_MODULE                   , 100);
				IDbDataParameter parRHS_TABLE                   = Sql.AddParameter(cmd, "@RHS_TABLE"                  , sRHS_TABLE                    ,  64);
				IDbDataParameter parRHS_KEY                     = Sql.AddParameter(cmd, "@RHS_KEY"                    , sRHS_KEY                      ,  64);
				IDbDataParameter parJOIN_TABLE                  = Sql.AddParameter(cmd, "@JOIN_TABLE"                 , sJOIN_TABLE                   ,  64);
				IDbDataParameter parJOIN_KEY_LHS                = Sql.AddParameter(cmd, "@JOIN_KEY_LHS"               , sJOIN_KEY_LHS                 ,  64);
				IDbDataParameter parJOIN_KEY_RHS                = Sql.AddParameter(cmd, "@JOIN_KEY_RHS"               , sJOIN_KEY_RHS                 ,  64);
				IDbDataParameter parRELATIONSHIP_TYPE           = Sql.AddParameter(cmd, "@RELATIONSHIP_TYPE"          , sRELATIONSHIP_TYPE            ,  64);
				IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , sRELATIONSHIP_ROLE_COLUMN     ,  64);
				IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", sRELATIONSHIP_ROLE_COL_VALUE  ,  50);
				IDbDataParameter parREVERSE                     = Sql.AddParameter(cmd, "@REVERSE"                    , bREVERSE                      );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdRELATIONSHIPS_InsertOnly
		/// <summary>
		/// spRELATIONSHIPS_InsertOnly
		/// </summary>
		public IDbCommand cmdRELATIONSHIPS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELATIONSHIPS_InsertOnly";
			IDbDataParameter parRELATIONSHIP_NAME           = Sql.CreateParameter(cmd, "@RELATIONSHIP_NAME"          , "string", 150);
			IDbDataParameter parLHS_MODULE                  = Sql.CreateParameter(cmd, "@LHS_MODULE"                 , "string", 100);
			IDbDataParameter parLHS_TABLE                   = Sql.CreateParameter(cmd, "@LHS_TABLE"                  , "string",  64);
			IDbDataParameter parLHS_KEY                     = Sql.CreateParameter(cmd, "@LHS_KEY"                    , "string",  64);
			IDbDataParameter parRHS_MODULE                  = Sql.CreateParameter(cmd, "@RHS_MODULE"                 , "string", 100);
			IDbDataParameter parRHS_TABLE                   = Sql.CreateParameter(cmd, "@RHS_TABLE"                  , "string",  64);
			IDbDataParameter parRHS_KEY                     = Sql.CreateParameter(cmd, "@RHS_KEY"                    , "string",  64);
			IDbDataParameter parJOIN_TABLE                  = Sql.CreateParameter(cmd, "@JOIN_TABLE"                 , "string",  64);
			IDbDataParameter parJOIN_KEY_LHS                = Sql.CreateParameter(cmd, "@JOIN_KEY_LHS"               , "string",  64);
			IDbDataParameter parJOIN_KEY_RHS                = Sql.CreateParameter(cmd, "@JOIN_KEY_RHS"               , "string",  64);
			IDbDataParameter parRELATIONSHIP_TYPE           = Sql.CreateParameter(cmd, "@RELATIONSHIP_TYPE"          , "string",  64);
			IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.CreateParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , "string",  64);
			IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.CreateParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", "string",  50);
			IDbDataParameter parREVERSE                     = Sql.CreateParameter(cmd, "@REVERSE"                    , "bool",   1);
			return cmd;
		}
		#endregion

		#region spRELATIONSHIPS_Update
		/// <summary>
		/// spRELATIONSHIPS_Update
		/// </summary>
		public void spRELATIONSHIPS_Update(ref Guid gID, string sRELATIONSHIP_NAME, string sLHS_MODULE, string sLHS_TABLE, string sLHS_KEY, string sRHS_MODULE, string sRHS_TABLE, string sRHS_KEY, string sJOIN_TABLE, string sJOIN_KEY_LHS, string sJOIN_KEY_RHS, string sRELATIONSHIP_TYPE, string sRELATIONSHIP_ROLE_COLUMN, string sRELATIONSHIP_ROLE_COL_VALUE, bool bREVERSE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spRELATIONSHIPS_Update";
							IDbDataParameter parID                          = Sql.AddParameter(cmd, "@ID"                         , gID                           );
							IDbDataParameter parMODIFIED_USER_ID            = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"           ,  Security.USER_ID             );
							IDbDataParameter parRELATIONSHIP_NAME           = Sql.AddParameter(cmd, "@RELATIONSHIP_NAME"          , sRELATIONSHIP_NAME            , 150);
							IDbDataParameter parLHS_MODULE                  = Sql.AddParameter(cmd, "@LHS_MODULE"                 , sLHS_MODULE                   , 100);
							IDbDataParameter parLHS_TABLE                   = Sql.AddParameter(cmd, "@LHS_TABLE"                  , sLHS_TABLE                    ,  64);
							IDbDataParameter parLHS_KEY                     = Sql.AddParameter(cmd, "@LHS_KEY"                    , sLHS_KEY                      ,  64);
							IDbDataParameter parRHS_MODULE                  = Sql.AddParameter(cmd, "@RHS_MODULE"                 , sRHS_MODULE                   , 100);
							IDbDataParameter parRHS_TABLE                   = Sql.AddParameter(cmd, "@RHS_TABLE"                  , sRHS_TABLE                    ,  64);
							IDbDataParameter parRHS_KEY                     = Sql.AddParameter(cmd, "@RHS_KEY"                    , sRHS_KEY                      ,  64);
							IDbDataParameter parJOIN_TABLE                  = Sql.AddParameter(cmd, "@JOIN_TABLE"                 , sJOIN_TABLE                   ,  64);
							IDbDataParameter parJOIN_KEY_LHS                = Sql.AddParameter(cmd, "@JOIN_KEY_LHS"               , sJOIN_KEY_LHS                 ,  64);
							IDbDataParameter parJOIN_KEY_RHS                = Sql.AddParameter(cmd, "@JOIN_KEY_RHS"               , sJOIN_KEY_RHS                 ,  64);
							IDbDataParameter parRELATIONSHIP_TYPE           = Sql.AddParameter(cmd, "@RELATIONSHIP_TYPE"          , sRELATIONSHIP_TYPE            ,  64);
							IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , sRELATIONSHIP_ROLE_COLUMN     ,  64);
							IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", sRELATIONSHIP_ROLE_COL_VALUE  ,  50);
							IDbDataParameter parREVERSE                     = Sql.AddParameter(cmd, "@REVERSE"                    , bREVERSE                      );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spRELATIONSHIPS_Update
		/// <summary>
		/// spRELATIONSHIPS_Update
		/// </summary>
		public void spRELATIONSHIPS_Update(ref Guid gID, string sRELATIONSHIP_NAME, string sLHS_MODULE, string sLHS_TABLE, string sLHS_KEY, string sRHS_MODULE, string sRHS_TABLE, string sRHS_KEY, string sJOIN_TABLE, string sJOIN_KEY_LHS, string sJOIN_KEY_RHS, string sRELATIONSHIP_TYPE, string sRELATIONSHIP_ROLE_COLUMN, string sRELATIONSHIP_ROLE_COL_VALUE, bool bREVERSE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spRELATIONSHIPS_Update";
				IDbDataParameter parID                          = Sql.AddParameter(cmd, "@ID"                         , gID                           );
				IDbDataParameter parMODIFIED_USER_ID            = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"           ,  Security.USER_ID             );
				IDbDataParameter parRELATIONSHIP_NAME           = Sql.AddParameter(cmd, "@RELATIONSHIP_NAME"          , sRELATIONSHIP_NAME            , 150);
				IDbDataParameter parLHS_MODULE                  = Sql.AddParameter(cmd, "@LHS_MODULE"                 , sLHS_MODULE                   , 100);
				IDbDataParameter parLHS_TABLE                   = Sql.AddParameter(cmd, "@LHS_TABLE"                  , sLHS_TABLE                    ,  64);
				IDbDataParameter parLHS_KEY                     = Sql.AddParameter(cmd, "@LHS_KEY"                    , sLHS_KEY                      ,  64);
				IDbDataParameter parRHS_MODULE                  = Sql.AddParameter(cmd, "@RHS_MODULE"                 , sRHS_MODULE                   , 100);
				IDbDataParameter parRHS_TABLE                   = Sql.AddParameter(cmd, "@RHS_TABLE"                  , sRHS_TABLE                    ,  64);
				IDbDataParameter parRHS_KEY                     = Sql.AddParameter(cmd, "@RHS_KEY"                    , sRHS_KEY                      ,  64);
				IDbDataParameter parJOIN_TABLE                  = Sql.AddParameter(cmd, "@JOIN_TABLE"                 , sJOIN_TABLE                   ,  64);
				IDbDataParameter parJOIN_KEY_LHS                = Sql.AddParameter(cmd, "@JOIN_KEY_LHS"               , sJOIN_KEY_LHS                 ,  64);
				IDbDataParameter parJOIN_KEY_RHS                = Sql.AddParameter(cmd, "@JOIN_KEY_RHS"               , sJOIN_KEY_RHS                 ,  64);
				IDbDataParameter parRELATIONSHIP_TYPE           = Sql.AddParameter(cmd, "@RELATIONSHIP_TYPE"          , sRELATIONSHIP_TYPE            ,  64);
				IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , sRELATIONSHIP_ROLE_COLUMN     ,  64);
				IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.AddParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", sRELATIONSHIP_ROLE_COL_VALUE  ,  50);
				IDbDataParameter parREVERSE                     = Sql.AddParameter(cmd, "@REVERSE"                    , bREVERSE                      );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdRELATIONSHIPS_Update
		/// <summary>
		/// spRELATIONSHIPS_Update
		/// </summary>
		public IDbCommand cmdRELATIONSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spRELATIONSHIPS_Update";
			IDbDataParameter parID                          = Sql.CreateParameter(cmd, "@ID"                         , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID            = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"           , "Guid",  16);
			IDbDataParameter parRELATIONSHIP_NAME           = Sql.CreateParameter(cmd, "@RELATIONSHIP_NAME"          , "string", 150);
			IDbDataParameter parLHS_MODULE                  = Sql.CreateParameter(cmd, "@LHS_MODULE"                 , "string", 100);
			IDbDataParameter parLHS_TABLE                   = Sql.CreateParameter(cmd, "@LHS_TABLE"                  , "string",  64);
			IDbDataParameter parLHS_KEY                     = Sql.CreateParameter(cmd, "@LHS_KEY"                    , "string",  64);
			IDbDataParameter parRHS_MODULE                  = Sql.CreateParameter(cmd, "@RHS_MODULE"                 , "string", 100);
			IDbDataParameter parRHS_TABLE                   = Sql.CreateParameter(cmd, "@RHS_TABLE"                  , "string",  64);
			IDbDataParameter parRHS_KEY                     = Sql.CreateParameter(cmd, "@RHS_KEY"                    , "string",  64);
			IDbDataParameter parJOIN_TABLE                  = Sql.CreateParameter(cmd, "@JOIN_TABLE"                 , "string",  64);
			IDbDataParameter parJOIN_KEY_LHS                = Sql.CreateParameter(cmd, "@JOIN_KEY_LHS"               , "string",  64);
			IDbDataParameter parJOIN_KEY_RHS                = Sql.CreateParameter(cmd, "@JOIN_KEY_RHS"               , "string",  64);
			IDbDataParameter parRELATIONSHIP_TYPE           = Sql.CreateParameter(cmd, "@RELATIONSHIP_TYPE"          , "string",  64);
			IDbDataParameter parRELATIONSHIP_ROLE_COLUMN    = Sql.CreateParameter(cmd, "@RELATIONSHIP_ROLE_COLUMN"   , "string",  64);
			IDbDataParameter parRELATIONSHIP_ROLE_COL_VALUE = Sql.CreateParameter(cmd, "@RELATIONSHIP_ROLE_COL_VALUE", "string",  50);
			IDbDataParameter parREVERSE                     = Sql.CreateParameter(cmd, "@REVERSE"                    , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSAVED_SEARCH_Delete
		/// <summary>
		/// spSAVED_SEARCH_Delete
		/// </summary>
		public void spSAVED_SEARCH_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSAVED_SEARCH_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSAVED_SEARCH_Delete
		/// <summary>
		/// spSAVED_SEARCH_Delete
		/// </summary>
		public void spSAVED_SEARCH_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSAVED_SEARCH_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSAVED_SEARCH_Delete
		/// <summary>
		/// spSAVED_SEARCH_Delete
		/// </summary>
		public IDbCommand cmdSAVED_SEARCH_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSAVED_SEARCH_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSAVED_SEARCH_Update
		/// <summary>
		/// spSAVED_SEARCH_Update
		/// </summary>
		public void spSAVED_SEARCH_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSEARCH_MODULE, string sCONTENTS, string sDESCRIPTION, Guid gDEFAULT_SEARCH_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSAVED_SEARCH_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
							IDbDataParameter parSEARCH_MODULE     = Sql.AddParameter(cmd, "@SEARCH_MODULE"    , sSEARCH_MODULE      , 150);
							IDbDataParameter parCONTENTS          = Sql.AddParameter(cmd, "@CONTENTS"         , sCONTENTS           );
							IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
							IDbDataParameter parDEFAULT_SEARCH_ID = Sql.AddParameter(cmd, "@DEFAULT_SEARCH_ID", gDEFAULT_SEARCH_ID  );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSAVED_SEARCH_Update
		/// <summary>
		/// spSAVED_SEARCH_Update
		/// </summary>
		public void spSAVED_SEARCH_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sNAME, string sSEARCH_MODULE, string sCONTENTS, string sDESCRIPTION, Guid gDEFAULT_SEARCH_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSAVED_SEARCH_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parASSIGNED_USER_ID  = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID" , gASSIGNED_USER_ID   );
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               , 150);
				IDbDataParameter parSEARCH_MODULE     = Sql.AddParameter(cmd, "@SEARCH_MODULE"    , sSEARCH_MODULE      , 150);
				IDbDataParameter parCONTENTS          = Sql.AddParameter(cmd, "@CONTENTS"         , sCONTENTS           );
				IDbDataParameter parDESCRIPTION       = Sql.AddParameter(cmd, "@DESCRIPTION"      , sDESCRIPTION        );
				IDbDataParameter parDEFAULT_SEARCH_ID = Sql.AddParameter(cmd, "@DEFAULT_SEARCH_ID", gDEFAULT_SEARCH_ID  );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSAVED_SEARCH_Update
		/// <summary>
		/// spSAVED_SEARCH_Update
		/// </summary>
		public IDbCommand cmdSAVED_SEARCH_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSAVED_SEARCH_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID  = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID" , "Guid",  16);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string", 150);
			IDbDataParameter parSEARCH_MODULE     = Sql.CreateParameter(cmd, "@SEARCH_MODULE"    , "string", 150);
			IDbDataParameter parCONTENTS          = Sql.CreateParameter(cmd, "@CONTENTS"         , "string", 104857600);
			IDbDataParameter parDESCRIPTION       = Sql.CreateParameter(cmd, "@DESCRIPTION"      , "string", 104857600);
			IDbDataParameter parDEFAULT_SEARCH_ID = Sql.CreateParameter(cmd, "@DEFAULT_SEARCH_ID", "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_Delete
		/// <summary>
		/// spSCHEDULERS_Delete
		/// </summary>
		public void spSCHEDULERS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_Delete
		/// <summary>
		/// spSCHEDULERS_Delete
		/// </summary>
		public void spSCHEDULERS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSCHEDULERS_Delete
		/// <summary>
		/// spSCHEDULERS_Delete
		/// </summary>
		public IDbCommand cmdSCHEDULERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_InsertOnly
		/// <summary>
		/// spSCHEDULERS_InsertOnly
		/// </summary>
		public void spSCHEDULERS_InsertOnly(string sNAME, string sJOB, DateTime dtDATE_TIME_START, DateTime dtDATE_TIME_END, string sJOB_INTERVAL, DateTime dtTIME_FROM, DateTime dtTIME_TO, string sSTATUS, bool bCATCH_UP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
							IDbDataParameter parDATE_TIME_START  = Sql.AddParameter(cmd, "@DATE_TIME_START" , dtDATE_TIME_START  );
							IDbDataParameter parDATE_TIME_END    = Sql.AddParameter(cmd, "@DATE_TIME_END"   , dtDATE_TIME_END    );
							IDbDataParameter parJOB_INTERVAL     = Sql.AddParameter(cmd, "@JOB_INTERVAL"    , sJOB_INTERVAL      , 100);
							IDbDataParameter parTIME_FROM        = Sql.AddParameter(cmd, "@TIME_FROM"       , dtTIME_FROM        );
							IDbDataParameter parTIME_TO          = Sql.AddParameter(cmd, "@TIME_TO"         , dtTIME_TO          );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							IDbDataParameter parCATCH_UP         = Sql.AddParameter(cmd, "@CATCH_UP"        , bCATCH_UP          );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_InsertOnly
		/// <summary>
		/// spSCHEDULERS_InsertOnly
		/// </summary>
		public void spSCHEDULERS_InsertOnly(string sNAME, string sJOB, DateTime dtDATE_TIME_START, DateTime dtDATE_TIME_END, string sJOB_INTERVAL, DateTime dtTIME_FROM, DateTime dtTIME_TO, string sSTATUS, bool bCATCH_UP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
				IDbDataParameter parDATE_TIME_START  = Sql.AddParameter(cmd, "@DATE_TIME_START" , dtDATE_TIME_START  );
				IDbDataParameter parDATE_TIME_END    = Sql.AddParameter(cmd, "@DATE_TIME_END"   , dtDATE_TIME_END    );
				IDbDataParameter parJOB_INTERVAL     = Sql.AddParameter(cmd, "@JOB_INTERVAL"    , sJOB_INTERVAL      , 100);
				IDbDataParameter parTIME_FROM        = Sql.AddParameter(cmd, "@TIME_FROM"       , dtTIME_FROM        );
				IDbDataParameter parTIME_TO          = Sql.AddParameter(cmd, "@TIME_TO"         , dtTIME_TO          );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				IDbDataParameter parCATCH_UP         = Sql.AddParameter(cmd, "@CATCH_UP"        , bCATCH_UP          );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSCHEDULERS_InsertOnly
		/// <summary>
		/// spSCHEDULERS_InsertOnly
		/// </summary>
		public IDbCommand cmdSCHEDULERS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parJOB              = Sql.CreateParameter(cmd, "@JOB"             , "string", 255);
			IDbDataParameter parDATE_TIME_START  = Sql.CreateParameter(cmd, "@DATE_TIME_START" , "DateTime",   8);
			IDbDataParameter parDATE_TIME_END    = Sql.CreateParameter(cmd, "@DATE_TIME_END"   , "DateTime",   8);
			IDbDataParameter parJOB_INTERVAL     = Sql.CreateParameter(cmd, "@JOB_INTERVAL"    , "string", 100);
			IDbDataParameter parTIME_FROM        = Sql.CreateParameter(cmd, "@TIME_FROM"       , "DateTime",   8);
			IDbDataParameter parTIME_TO          = Sql.CreateParameter(cmd, "@TIME_TO"         , "DateTime",   8);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			IDbDataParameter parCATCH_UP         = Sql.CreateParameter(cmd, "@CATCH_UP"        , "bool",   1);
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_Update
		/// <summary>
		/// spSCHEDULERS_Update
		/// </summary>
		public void spSCHEDULERS_Update(ref Guid gID, string sNAME, string sJOB, DateTime dtDATE_TIME_START, DateTime dtDATE_TIME_END, string sJOB_INTERVAL, DateTime dtTIME_FROM, DateTime dtTIME_TO, string sSTATUS, bool bCATCH_UP)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
							IDbDataParameter parDATE_TIME_START  = Sql.AddParameter(cmd, "@DATE_TIME_START" , dtDATE_TIME_START  );
							IDbDataParameter parDATE_TIME_END    = Sql.AddParameter(cmd, "@DATE_TIME_END"   , dtDATE_TIME_END    );
							IDbDataParameter parJOB_INTERVAL     = Sql.AddParameter(cmd, "@JOB_INTERVAL"    , sJOB_INTERVAL      , 100);
							IDbDataParameter parTIME_FROM        = Sql.AddParameter(cmd, "@TIME_FROM"       , dtTIME_FROM        );
							IDbDataParameter parTIME_TO          = Sql.AddParameter(cmd, "@TIME_TO"         , dtTIME_TO          );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							IDbDataParameter parCATCH_UP         = Sql.AddParameter(cmd, "@CATCH_UP"        , bCATCH_UP          );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_Update
		/// <summary>
		/// spSCHEDULERS_Update
		/// </summary>
		public void spSCHEDULERS_Update(ref Guid gID, string sNAME, string sJOB, DateTime dtDATE_TIME_START, DateTime dtDATE_TIME_END, string sJOB_INTERVAL, DateTime dtTIME_FROM, DateTime dtTIME_TO, string sSTATUS, bool bCATCH_UP, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
				IDbDataParameter parDATE_TIME_START  = Sql.AddParameter(cmd, "@DATE_TIME_START" , dtDATE_TIME_START  );
				IDbDataParameter parDATE_TIME_END    = Sql.AddParameter(cmd, "@DATE_TIME_END"   , dtDATE_TIME_END    );
				IDbDataParameter parJOB_INTERVAL     = Sql.AddParameter(cmd, "@JOB_INTERVAL"    , sJOB_INTERVAL      , 100);
				IDbDataParameter parTIME_FROM        = Sql.AddParameter(cmd, "@TIME_FROM"       , dtTIME_FROM        );
				IDbDataParameter parTIME_TO          = Sql.AddParameter(cmd, "@TIME_TO"         , dtTIME_TO          );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				IDbDataParameter parCATCH_UP         = Sql.AddParameter(cmd, "@CATCH_UP"        , bCATCH_UP          );
				parID.Direction = ParameterDirection.InputOutput;
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSCHEDULERS_Update
		/// <summary>
		/// spSCHEDULERS_Update
		/// </summary>
		public IDbCommand cmdSCHEDULERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parJOB              = Sql.CreateParameter(cmd, "@JOB"             , "string", 255);
			IDbDataParameter parDATE_TIME_START  = Sql.CreateParameter(cmd, "@DATE_TIME_START" , "DateTime",   8);
			IDbDataParameter parDATE_TIME_END    = Sql.CreateParameter(cmd, "@DATE_TIME_END"   , "DateTime",   8);
			IDbDataParameter parJOB_INTERVAL     = Sql.CreateParameter(cmd, "@JOB_INTERVAL"    , "string", 100);
			IDbDataParameter parTIME_FROM        = Sql.CreateParameter(cmd, "@TIME_FROM"       , "DateTime",   8);
			IDbDataParameter parTIME_TO          = Sql.CreateParameter(cmd, "@TIME_TO"         , "DateTime",   8);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			IDbDataParameter parCATCH_UP         = Sql.CreateParameter(cmd, "@CATCH_UP"        , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_UpdateLastRun
		/// <summary>
		/// spSCHEDULERS_UpdateLastRun
		/// </summary>
		public void spSCHEDULERS_UpdateLastRun(Guid gID, DateTime dtLAST_RUN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_UpdateLastRun";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLAST_RUN         = Sql.AddParameter(cmd, "@LAST_RUN"        , dtLAST_RUN         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_UpdateLastRun
		/// <summary>
		/// spSCHEDULERS_UpdateLastRun
		/// </summary>
		public void spSCHEDULERS_UpdateLastRun(Guid gID, DateTime dtLAST_RUN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_UpdateLastRun";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLAST_RUN         = Sql.AddParameter(cmd, "@LAST_RUN"        , dtLAST_RUN         );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSCHEDULERS_UpdateLastRun
		/// <summary>
		/// spSCHEDULERS_UpdateLastRun
		/// </summary>
		public IDbCommand cmdSCHEDULERS_UpdateLastRun(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_UpdateLastRun";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLAST_RUN         = Sql.CreateParameter(cmd, "@LAST_RUN"        , "DateTime",   8);
			return cmd;
		}
		#endregion

		#region spSCHEDULERS_UpdateStatus
		/// <summary>
		/// spSCHEDULERS_UpdateStatus
		/// </summary>
		public void spSCHEDULERS_UpdateStatus(string sJOB, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSCHEDULERS_UpdateStatus";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSCHEDULERS_UpdateStatus
		/// <summary>
		/// spSCHEDULERS_UpdateStatus
		/// </summary>
		public void spSCHEDULERS_UpdateStatus(string sJOB, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSCHEDULERS_UpdateStatus";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parJOB              = Sql.AddParameter(cmd, "@JOB"             , sJOB               , 255);
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSCHEDULERS_UpdateStatus
		/// <summary>
		/// spSCHEDULERS_UpdateStatus
		/// </summary>
		public IDbCommand cmdSCHEDULERS_UpdateStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSCHEDULERS_UpdateStatus";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parJOB              = Sql.CreateParameter(cmd, "@JOB"             , "string", 255);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_Delete
		/// <summary>
		/// spSHORTCUTS_Delete
		/// </summary>
		public void spSHORTCUTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_Delete
		/// <summary>
		/// spSHORTCUTS_Delete
		/// </summary>
		public void spSHORTCUTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_Delete
		/// <summary>
		/// spSHORTCUTS_Delete
		/// </summary>
		public IDbCommand cmdSHORTCUTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_InsertOnly
		/// <summary>
		/// spSHORTCUTS_InsertOnly
		/// </summary>
		public void spSHORTCUTS_InsertOnly(string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, string sIMAGE_NAME, bool bSHORTCUT_ENABLED, Int32 nSHORTCUT_ORDER, string sSHORTCUT_MODULE, string sSHORTCUT_ACLTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 150);
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
							IDbDataParameter parIMAGE_NAME       = Sql.AddParameter(cmd, "@IMAGE_NAME"      , sIMAGE_NAME        ,  50);
							IDbDataParameter parSHORTCUT_ENABLED = Sql.AddParameter(cmd, "@SHORTCUT_ENABLED", bSHORTCUT_ENABLED  );
							IDbDataParameter parSHORTCUT_ORDER   = Sql.AddParameter(cmd, "@SHORTCUT_ORDER"  , nSHORTCUT_ORDER    );
							IDbDataParameter parSHORTCUT_MODULE  = Sql.AddParameter(cmd, "@SHORTCUT_MODULE" , sSHORTCUT_MODULE   ,  25);
							IDbDataParameter parSHORTCUT_ACLTYPE = Sql.AddParameter(cmd, "@SHORTCUT_ACLTYPE", sSHORTCUT_ACLTYPE  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_InsertOnly
		/// <summary>
		/// spSHORTCUTS_InsertOnly
		/// </summary>
		public void spSHORTCUTS_InsertOnly(string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, string sIMAGE_NAME, bool bSHORTCUT_ENABLED, Int32 nSHORTCUT_ORDER, string sSHORTCUT_MODULE, string sSHORTCUT_ACLTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 150);
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
				IDbDataParameter parIMAGE_NAME       = Sql.AddParameter(cmd, "@IMAGE_NAME"      , sIMAGE_NAME        ,  50);
				IDbDataParameter parSHORTCUT_ENABLED = Sql.AddParameter(cmd, "@SHORTCUT_ENABLED", bSHORTCUT_ENABLED  );
				IDbDataParameter parSHORTCUT_ORDER   = Sql.AddParameter(cmd, "@SHORTCUT_ORDER"  , nSHORTCUT_ORDER    );
				IDbDataParameter parSHORTCUT_MODULE  = Sql.AddParameter(cmd, "@SHORTCUT_MODULE" , sSHORTCUT_MODULE   ,  25);
				IDbDataParameter parSHORTCUT_ACLTYPE = Sql.AddParameter(cmd, "@SHORTCUT_ACLTYPE", sSHORTCUT_ACLTYPE  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_InsertOnly
		/// <summary>
		/// spSHORTCUTS_InsertOnly
		/// </summary>
		public IDbCommand cmdSHORTCUTS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string", 150);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string", 255);
			IDbDataParameter parIMAGE_NAME       = Sql.CreateParameter(cmd, "@IMAGE_NAME"      , "string",  50);
			IDbDataParameter parSHORTCUT_ENABLED = Sql.CreateParameter(cmd, "@SHORTCUT_ENABLED", "bool",   1);
			IDbDataParameter parSHORTCUT_ORDER   = Sql.CreateParameter(cmd, "@SHORTCUT_ORDER"  , "Int32",   4);
			IDbDataParameter parSHORTCUT_MODULE  = Sql.CreateParameter(cmd, "@SHORTCUT_MODULE" , "string",  25);
			IDbDataParameter parSHORTCUT_ACLTYPE = Sql.CreateParameter(cmd, "@SHORTCUT_ACLTYPE", "string", 100);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveDown
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveDown
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_ORDER_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveDown
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveDown
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_ORDER_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_ORDER_MoveDown
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveDown
		/// </summary>
		public IDbCommand cmdSHORTCUTS_ORDER_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_ORDER_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveItem
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveItem
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveItem(string sMODULE_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_ORDER_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveItem
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveItem
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveItem(string sMODULE_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_ORDER_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_ORDER_MoveItem
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveItem
		/// </summary>
		public IDbCommand cmdSHORTCUTS_ORDER_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_ORDER_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveUp
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveUp
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_ORDER_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_ORDER_MoveUp
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveUp
		/// </summary>
		public void spSHORTCUTS_ORDER_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_ORDER_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSHORTCUTS_ORDER_MoveUp
		/// <summary>
		/// spSHORTCUTS_ORDER_MoveUp
		/// </summary>
		public IDbCommand cmdSHORTCUTS_ORDER_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_ORDER_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSHORTCUTS_Update
		/// <summary>
		/// spSHORTCUTS_Update
		/// </summary>
		public void spSHORTCUTS_Update(ref Guid gID, string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, string sIMAGE_NAME, bool bSHORTCUT_ENABLED, Int32 nSHORTCUT_ORDER, string sSHORTCUT_MODULE, string sSHORTCUT_ACLTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSHORTCUTS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 150);
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
							IDbDataParameter parIMAGE_NAME       = Sql.AddParameter(cmd, "@IMAGE_NAME"      , sIMAGE_NAME        ,  50);
							IDbDataParameter parSHORTCUT_ENABLED = Sql.AddParameter(cmd, "@SHORTCUT_ENABLED", bSHORTCUT_ENABLED  );
							IDbDataParameter parSHORTCUT_ORDER   = Sql.AddParameter(cmd, "@SHORTCUT_ORDER"  , nSHORTCUT_ORDER    );
							IDbDataParameter parSHORTCUT_MODULE  = Sql.AddParameter(cmd, "@SHORTCUT_MODULE" , sSHORTCUT_MODULE   ,  25);
							IDbDataParameter parSHORTCUT_ACLTYPE = Sql.AddParameter(cmd, "@SHORTCUT_ACLTYPE", sSHORTCUT_ACLTYPE  , 100);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSHORTCUTS_Update
		/// <summary>
		/// spSHORTCUTS_Update
		/// </summary>
		public void spSHORTCUTS_Update(ref Guid gID, string sMODULE_NAME, string sDISPLAY_NAME, string sRELATIVE_PATH, string sIMAGE_NAME, bool bSHORTCUT_ENABLED, Int32 nSHORTCUT_ORDER, string sSHORTCUT_MODULE, string sSHORTCUT_ACLTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSHORTCUTS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      , 150);
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
				IDbDataParameter parIMAGE_NAME       = Sql.AddParameter(cmd, "@IMAGE_NAME"      , sIMAGE_NAME        ,  50);
				IDbDataParameter parSHORTCUT_ENABLED = Sql.AddParameter(cmd, "@SHORTCUT_ENABLED", bSHORTCUT_ENABLED  );
				IDbDataParameter parSHORTCUT_ORDER   = Sql.AddParameter(cmd, "@SHORTCUT_ORDER"  , nSHORTCUT_ORDER    );
				IDbDataParameter parSHORTCUT_MODULE  = Sql.AddParameter(cmd, "@SHORTCUT_MODULE" , sSHORTCUT_MODULE   ,  25);
				IDbDataParameter parSHORTCUT_ACLTYPE = Sql.AddParameter(cmd, "@SHORTCUT_ACLTYPE", sSHORTCUT_ACLTYPE  , 100);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSHORTCUTS_Update
		/// <summary>
		/// spSHORTCUTS_Update
		/// </summary>
		public IDbCommand cmdSHORTCUTS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSHORTCUTS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string", 150);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string", 255);
			IDbDataParameter parIMAGE_NAME       = Sql.CreateParameter(cmd, "@IMAGE_NAME"      , "string",  50);
			IDbDataParameter parSHORTCUT_ENABLED = Sql.CreateParameter(cmd, "@SHORTCUT_ENABLED", "bool",   1);
			IDbDataParameter parSHORTCUT_ORDER   = Sql.CreateParameter(cmd, "@SHORTCUT_ORDER"  , "Int32",   4);
			IDbDataParameter parSHORTCUT_MODULE  = Sql.CreateParameter(cmd, "@SHORTCUT_MODULE" , "string",  25);
			IDbDataParameter parSHORTCUT_ACLTYPE = Sql.CreateParameter(cmd, "@SHORTCUT_ACLTYPE", "string", 100);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlBackupDatabase
		/// <summary>
		/// spSqlBackupDatabase
		/// </summary>
		public void spSqlBackupDatabase(ref string sFILENAME, string sTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBackupDatabase";
							IDbDataParameter parFILENAME = Sql.AddParameter(cmd, "@FILENAME", sFILENAME  , 255);
							IDbDataParameter parTYPE     = Sql.AddParameter(cmd, "@TYPE"    , sTYPE      ,  20);
							parFILENAME.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							sFILENAME = Sql.ToString(parFILENAME.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBackupDatabase
		/// <summary>
		/// spSqlBackupDatabase
		/// </summary>
		public void spSqlBackupDatabase(ref string sFILENAME, string sTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBackupDatabase";
				IDbDataParameter parFILENAME = Sql.AddParameter(cmd, "@FILENAME", sFILENAME  , 255);
				IDbDataParameter parTYPE     = Sql.AddParameter(cmd, "@TYPE"    , sTYPE      ,  20);
				parFILENAME.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				sFILENAME = Sql.ToString(parFILENAME.Value);
			}
		}
		#endregion

		#region cmdSqlBackupDatabase
		/// <summary>
		/// spSqlBackupDatabase
		/// </summary>
		public IDbCommand cmdSqlBackupDatabase(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBackupDatabase";
			IDbDataParameter parFILENAME = Sql.CreateParameter(cmd, "@FILENAME", "string", 255);
			IDbDataParameter parTYPE     = Sql.CreateParameter(cmd, "@TYPE"    , "string",  20);
			parFILENAME.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlBuildAllAuditIndexes
		/// <summary>
		/// spSqlBuildAllAuditIndexes
		/// </summary>
		public void spSqlBuildAllAuditIndexes()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllAuditIndexes";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllAuditIndexes
		/// <summary>
		/// spSqlBuildAllAuditIndexes
		/// </summary>
		public void spSqlBuildAllAuditIndexes(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllAuditIndexes";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllAuditIndexes
		/// <summary>
		/// spSqlBuildAllAuditIndexes
		/// </summary>
		public IDbCommand cmdSqlBuildAllAuditIndexes(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllAuditIndexes";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllAuditTables
		/// <summary>
		/// spSqlBuildAllAuditTables
		/// </summary>
		public void spSqlBuildAllAuditTables()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllAuditTables";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllAuditTables
		/// <summary>
		/// spSqlBuildAllAuditTables
		/// </summary>
		public void spSqlBuildAllAuditTables(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllAuditTables";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllAuditTables
		/// <summary>
		/// spSqlBuildAllAuditTables
		/// </summary>
		public IDbCommand cmdSqlBuildAllAuditTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllAuditTables";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllAuditTriggers
		/// <summary>
		/// spSqlBuildAllAuditTriggers
		/// </summary>
		public void spSqlBuildAllAuditTriggers()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllAuditTriggers";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllAuditTriggers
		/// <summary>
		/// spSqlBuildAllAuditTriggers
		/// </summary>
		public void spSqlBuildAllAuditTriggers(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllAuditTriggers";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllAuditTriggers
		/// <summary>
		/// spSqlBuildAllAuditTriggers
		/// </summary>
		public IDbCommand cmdSqlBuildAllAuditTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllAuditTriggers";
			return cmd;
		}
		#endregion

		#region spSqlBuildAllAuditViews
		/// <summary>
		/// spSqlBuildAllAuditViews
		/// </summary>
		public void spSqlBuildAllAuditViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAllAuditViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAllAuditViews
		/// <summary>
		/// spSqlBuildAllAuditViews
		/// </summary>
		public void spSqlBuildAllAuditViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAllAuditViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAllAuditViews
		/// <summary>
		/// spSqlBuildAllAuditViews
		/// </summary>
		public IDbCommand cmdSqlBuildAllAuditViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAllAuditViews";
			return cmd;
		}
		#endregion

		#region spSqlBuildArchiveTable
		/// <summary>
		/// spSqlBuildArchiveTable
		/// </summary>
		public void spSqlBuildArchiveTable(string sTABLE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildArchiveTable";
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildArchiveTable
		/// <summary>
		/// spSqlBuildArchiveTable
		/// </summary>
		public void spSqlBuildArchiveTable(string sTABLE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildArchiveTable";
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildArchiveTable
		/// <summary>
		/// spSqlBuildArchiveTable
		/// </summary>
		public IDbCommand cmdSqlBuildArchiveTable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildArchiveTable";
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlBuildArchiveView
		/// <summary>
		/// spSqlBuildArchiveView
		/// </summary>
		public void spSqlBuildArchiveView(string sTABLE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildArchiveView";
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildArchiveView
		/// <summary>
		/// spSqlBuildArchiveView
		/// </summary>
		public void spSqlBuildArchiveView(string sTABLE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildArchiveView";
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildArchiveView
		/// <summary>
		/// spSqlBuildArchiveView
		/// </summary>
		public IDbCommand cmdSqlBuildArchiveView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildArchiveView";
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			return cmd;
		}
		#endregion

		#region spSqlBuildAuditIndex
		/// <summary>
		/// spSqlBuildAuditIndex
		/// </summary>
		public void spSqlBuildAuditIndex(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAuditIndex";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAuditIndex
		/// <summary>
		/// spSqlBuildAuditIndex
		/// </summary>
		public void spSqlBuildAuditIndex(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAuditIndex";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAuditIndex
		/// <summary>
		/// spSqlBuildAuditIndex
		/// </summary>
		public IDbCommand cmdSqlBuildAuditIndex(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAuditIndex";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildAuditTable
		/// <summary>
		/// spSqlBuildAuditTable
		/// </summary>
		public void spSqlBuildAuditTable(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAuditTable";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAuditTable
		/// <summary>
		/// spSqlBuildAuditTable
		/// </summary>
		public void spSqlBuildAuditTable(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAuditTable";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAuditTable
		/// <summary>
		/// spSqlBuildAuditTable
		/// </summary>
		public IDbCommand cmdSqlBuildAuditTable(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAuditTable";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildAuditTrigger
		/// <summary>
		/// spSqlBuildAuditTrigger
		/// </summary>
		public void spSqlBuildAuditTrigger(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAuditTrigger";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAuditTrigger
		/// <summary>
		/// spSqlBuildAuditTrigger
		/// </summary>
		public void spSqlBuildAuditTrigger(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAuditTrigger";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAuditTrigger
		/// <summary>
		/// spSqlBuildAuditTrigger
		/// </summary>
		public IDbCommand cmdSqlBuildAuditTrigger(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAuditTrigger";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildAuditView
		/// <summary>
		/// spSqlBuildAuditView
		/// </summary>
		public void spSqlBuildAuditView(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildAuditView";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildAuditView
		/// <summary>
		/// spSqlBuildAuditView
		/// </summary>
		public void spSqlBuildAuditView(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildAuditView";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildAuditView
		/// <summary>
		/// spSqlBuildAuditView
		/// </summary>
		public IDbCommand cmdSqlBuildAuditView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildAuditView";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamFunction
		/// <summary>
		/// spSqlBuildStreamFunction
		/// </summary>
		public void spSqlBuildStreamFunction(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamFunction";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamFunction
		/// <summary>
		/// spSqlBuildStreamFunction
		/// </summary>
		public void spSqlBuildStreamFunction(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamFunction";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamFunction
		/// <summary>
		/// spSqlBuildStreamFunction
		/// </summary>
		public IDbCommand cmdSqlBuildStreamFunction(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamFunction";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildStreamView
		/// <summary>
		/// spSqlBuildStreamView
		/// </summary>
		public void spSqlBuildStreamView(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildStreamView";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildStreamView
		/// <summary>
		/// spSqlBuildStreamView
		/// </summary>
		public void spSqlBuildStreamView(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildStreamView";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildStreamView
		/// <summary>
		/// spSqlBuildStreamView
		/// </summary>
		public IDbCommand cmdSqlBuildStreamView(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildStreamView";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlBuildSystemTrigger
		/// <summary>
		/// spSqlBuildSystemTrigger
		/// </summary>
		public void spSqlBuildSystemTrigger(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlBuildSystemTrigger";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlBuildSystemTrigger
		/// <summary>
		/// spSqlBuildSystemTrigger
		/// </summary>
		public void spSqlBuildSystemTrigger(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlBuildSystemTrigger";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlBuildSystemTrigger
		/// <summary>
		/// spSqlBuildSystemTrigger
		/// </summary>
		public IDbCommand cmdSqlBuildSystemTrigger(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlBuildSystemTrigger";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlDropAllAuditTables
		/// <summary>
		/// spSqlDropAllAuditTables
		/// </summary>
		public void spSqlDropAllAuditTables()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllAuditTables";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllAuditTables
		/// <summary>
		/// spSqlDropAllAuditTables
		/// </summary>
		public void spSqlDropAllAuditTables(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllAuditTables";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllAuditTables
		/// <summary>
		/// spSqlDropAllAuditTables
		/// </summary>
		public IDbCommand cmdSqlDropAllAuditTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllAuditTables";
			return cmd;
		}
		#endregion

		#region spSqlDropAllAuditTriggers
		/// <summary>
		/// spSqlDropAllAuditTriggers
		/// </summary>
		public void spSqlDropAllAuditTriggers()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllAuditTriggers";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllAuditTriggers
		/// <summary>
		/// spSqlDropAllAuditTriggers
		/// </summary>
		public void spSqlDropAllAuditTriggers(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllAuditTriggers";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllAuditTriggers
		/// <summary>
		/// spSqlDropAllAuditTriggers
		/// </summary>
		public IDbCommand cmdSqlDropAllAuditTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllAuditTriggers";
			return cmd;
		}
		#endregion

		#region spSqlDropAllAuditViews
		/// <summary>
		/// spSqlDropAllAuditViews
		/// </summary>
		public void spSqlDropAllAuditViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropAllAuditViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropAllAuditViews
		/// <summary>
		/// spSqlDropAllAuditViews
		/// </summary>
		public void spSqlDropAllAuditViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropAllAuditViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropAllAuditViews
		/// <summary>
		/// spSqlDropAllAuditViews
		/// </summary>
		public IDbCommand cmdSqlDropAllAuditViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropAllAuditViews";
			return cmd;
		}
		#endregion

		#region spSqlDropDefaultConstraint
		/// <summary>
		/// spSqlDropDefaultConstraint
		/// </summary>
		public void spSqlDropDefaultConstraint(ref string sTABLE_NAME, string sCOLUMN_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropDefaultConstraint";
							IDbDataParameter parTABLE_NAME  = Sql.AddParameter(cmd, "@TABLE_NAME" , sTABLE_NAME   ,  50);
							IDbDataParameter parCOLUMN_NAME = Sql.AddParameter(cmd, "@COLUMN_NAME", sCOLUMN_NAME  ,  50);
							parTABLE_NAME.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							sTABLE_NAME = Sql.ToString(parTABLE_NAME.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropDefaultConstraint
		/// <summary>
		/// spSqlDropDefaultConstraint
		/// </summary>
		public void spSqlDropDefaultConstraint(ref string sTABLE_NAME, string sCOLUMN_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropDefaultConstraint";
				IDbDataParameter parTABLE_NAME  = Sql.AddParameter(cmd, "@TABLE_NAME" , sTABLE_NAME   ,  50);
				IDbDataParameter parCOLUMN_NAME = Sql.AddParameter(cmd, "@COLUMN_NAME", sCOLUMN_NAME  ,  50);
				parTABLE_NAME.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				sTABLE_NAME = Sql.ToString(parTABLE_NAME.Value);
			}
		}
		#endregion

		#region cmdSqlDropDefaultConstraint
		/// <summary>
		/// spSqlDropDefaultConstraint
		/// </summary>
		public IDbCommand cmdSqlDropDefaultConstraint(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropDefaultConstraint";
			IDbDataParameter parTABLE_NAME  = Sql.CreateParameter(cmd, "@TABLE_NAME" , "string",  50);
			IDbDataParameter parCOLUMN_NAME = Sql.CreateParameter(cmd, "@COLUMN_NAME", "string",  50);
			parTABLE_NAME.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlDropForeignKeys
		/// <summary>
		/// spSqlDropForeignKeys
		/// </summary>
		public void spSqlDropForeignKeys(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlDropForeignKeys";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlDropForeignKeys
		/// <summary>
		/// spSqlDropForeignKeys
		/// </summary>
		public void spSqlDropForeignKeys(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlDropForeignKeys";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlDropForeignKeys
		/// <summary>
		/// spSqlDropForeignKeys
		/// </summary>
		public IDbCommand cmdSqlDropForeignKeys(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlDropForeignKeys";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			return cmd;
		}
		#endregion

		#region spSqlGetTransactionToken
		/// <summary>
		/// spSqlGetTransactionToken
		/// </summary>
		public void spSqlGetTransactionToken(ref string sTRANSACTION_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlGetTransactionToken";
							IDbDataParameter parTRANSACTION_TOKEN = Sql.AddAnsiParam(cmd, "@TRANSACTION_TOKEN", sTRANSACTION_TOKEN  , 255);
							parTRANSACTION_TOKEN.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							sTRANSACTION_TOKEN = Sql.ToString(parTRANSACTION_TOKEN.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlGetTransactionToken
		/// <summary>
		/// spSqlGetTransactionToken
		/// </summary>
		public void spSqlGetTransactionToken(ref string sTRANSACTION_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlGetTransactionToken";
				IDbDataParameter parTRANSACTION_TOKEN = Sql.AddAnsiParam(cmd, "@TRANSACTION_TOKEN", sTRANSACTION_TOKEN  , 255);
				parTRANSACTION_TOKEN.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				sTRANSACTION_TOKEN = Sql.ToString(parTRANSACTION_TOKEN.Value);
			}
		}
		#endregion

		#region cmdSqlGetTransactionToken
		/// <summary>
		/// spSqlGetTransactionToken
		/// </summary>
		public IDbCommand cmdSqlGetTransactionToken(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlGetTransactionToken";
			IDbDataParameter parTRANSACTION_TOKEN = Sql.CreateParameter(cmd, "@TRANSACTION_TOKEN", "ansistring", 255);
			parTRANSACTION_TOKEN.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlPrintByLine
		/// <summary>
		/// spSqlPrintByLine
		/// </summary>
		public void spSqlPrintByLine(string sCOMMAND)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlPrintByLine";
							IDbDataParameter parCOMMAND = Sql.AddParameter(cmd, "@COMMAND", sCOMMAND  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlPrintByLine
		/// <summary>
		/// spSqlPrintByLine
		/// </summary>
		public void spSqlPrintByLine(string sCOMMAND, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlPrintByLine";
				IDbDataParameter parCOMMAND = Sql.AddParameter(cmd, "@COMMAND", sCOMMAND  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlPrintByLine
		/// <summary>
		/// spSqlPrintByLine
		/// </summary>
		public IDbCommand cmdSqlPrintByLine(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlPrintByLine";
			IDbDataParameter parCOMMAND = Sql.CreateParameter(cmd, "@COMMAND", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spSqlRefreshAllViews
		/// <summary>
		/// spSqlRefreshAllViews
		/// </summary>
		public void spSqlRefreshAllViews()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlRefreshAllViews";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlRefreshAllViews
		/// <summary>
		/// spSqlRefreshAllViews
		/// </summary>
		public void spSqlRefreshAllViews(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlRefreshAllViews";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlRefreshAllViews
		/// <summary>
		/// spSqlRefreshAllViews
		/// </summary>
		public IDbCommand cmdSqlRefreshAllViews(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlRefreshAllViews";
			return cmd;
		}
		#endregion

		#region spSqlTableAddColumn
		/// <summary>
		/// spSqlTableAddColumn
		/// </summary>
		public void spSqlTableAddColumn(string sTABLE_NAME, string sCOLUMN_NAME, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, string sDEFAULT_VALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableAddColumn";
							IDbDataParameter parTABLE_NAME    = Sql.AddAnsiParam(cmd, "@TABLE_NAME"   , sTABLE_NAME     , 255);
							IDbDataParameter parCOLUMN_NAME   = Sql.AddAnsiParam(cmd, "@COLUMN_NAME"  , sCOLUMN_NAME    , 255);
							IDbDataParameter parDATA_TYPE     = Sql.AddAnsiParam(cmd, "@DATA_TYPE"    , sDATA_TYPE      , 255);
							IDbDataParameter parMAX_SIZE      = Sql.AddParameter(cmd, "@MAX_SIZE"     , nMAX_SIZE       );
							IDbDataParameter parREQUIRED      = Sql.AddParameter(cmd, "@REQUIRED"     , bREQUIRED       );
							IDbDataParameter parDEFAULT_VALUE = Sql.AddAnsiParam(cmd, "@DEFAULT_VALUE", sDEFAULT_VALUE  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableAddColumn
		/// <summary>
		/// spSqlTableAddColumn
		/// </summary>
		public void spSqlTableAddColumn(string sTABLE_NAME, string sCOLUMN_NAME, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, string sDEFAULT_VALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableAddColumn";
				IDbDataParameter parTABLE_NAME    = Sql.AddAnsiParam(cmd, "@TABLE_NAME"   , sTABLE_NAME     , 255);
				IDbDataParameter parCOLUMN_NAME   = Sql.AddAnsiParam(cmd, "@COLUMN_NAME"  , sCOLUMN_NAME    , 255);
				IDbDataParameter parDATA_TYPE     = Sql.AddAnsiParam(cmd, "@DATA_TYPE"    , sDATA_TYPE      , 255);
				IDbDataParameter parMAX_SIZE      = Sql.AddParameter(cmd, "@MAX_SIZE"     , nMAX_SIZE       );
				IDbDataParameter parREQUIRED      = Sql.AddParameter(cmd, "@REQUIRED"     , bREQUIRED       );
				IDbDataParameter parDEFAULT_VALUE = Sql.AddAnsiParam(cmd, "@DEFAULT_VALUE", sDEFAULT_VALUE  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableAddColumn
		/// <summary>
		/// spSqlTableAddColumn
		/// </summary>
		public IDbCommand cmdSqlTableAddColumn(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableAddColumn";
			IDbDataParameter parTABLE_NAME    = Sql.CreateParameter(cmd, "@TABLE_NAME"   , "ansistring", 255);
			IDbDataParameter parCOLUMN_NAME   = Sql.CreateParameter(cmd, "@COLUMN_NAME"  , "ansistring", 255);
			IDbDataParameter parDATA_TYPE     = Sql.CreateParameter(cmd, "@DATA_TYPE"    , "ansistring", 255);
			IDbDataParameter parMAX_SIZE      = Sql.CreateParameter(cmd, "@MAX_SIZE"     , "Int32",   4);
			IDbDataParameter parREQUIRED      = Sql.CreateParameter(cmd, "@REQUIRED"     , "bool",   1);
			IDbDataParameter parDEFAULT_VALUE = Sql.CreateParameter(cmd, "@DEFAULT_VALUE", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableAlterColumn
		/// <summary>
		/// spSqlTableAlterColumn
		/// </summary>
		public void spSqlTableAlterColumn(string sTABLE_NAME, string sCOLUMN_NAME, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, string sDEFAULT_VALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableAlterColumn";
							IDbDataParameter parTABLE_NAME    = Sql.AddAnsiParam(cmd, "@TABLE_NAME"   , sTABLE_NAME     , 255);
							IDbDataParameter parCOLUMN_NAME   = Sql.AddAnsiParam(cmd, "@COLUMN_NAME"  , sCOLUMN_NAME    , 255);
							IDbDataParameter parDATA_TYPE     = Sql.AddAnsiParam(cmd, "@DATA_TYPE"    , sDATA_TYPE      , 255);
							IDbDataParameter parMAX_SIZE      = Sql.AddParameter(cmd, "@MAX_SIZE"     , nMAX_SIZE       );
							IDbDataParameter parREQUIRED      = Sql.AddParameter(cmd, "@REQUIRED"     , bREQUIRED       );
							IDbDataParameter parDEFAULT_VALUE = Sql.AddAnsiParam(cmd, "@DEFAULT_VALUE", sDEFAULT_VALUE  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableAlterColumn
		/// <summary>
		/// spSqlTableAlterColumn
		/// </summary>
		public void spSqlTableAlterColumn(string sTABLE_NAME, string sCOLUMN_NAME, string sDATA_TYPE, Int32 nMAX_SIZE, bool bREQUIRED, string sDEFAULT_VALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableAlterColumn";
				IDbDataParameter parTABLE_NAME    = Sql.AddAnsiParam(cmd, "@TABLE_NAME"   , sTABLE_NAME     , 255);
				IDbDataParameter parCOLUMN_NAME   = Sql.AddAnsiParam(cmd, "@COLUMN_NAME"  , sCOLUMN_NAME    , 255);
				IDbDataParameter parDATA_TYPE     = Sql.AddAnsiParam(cmd, "@DATA_TYPE"    , sDATA_TYPE      , 255);
				IDbDataParameter parMAX_SIZE      = Sql.AddParameter(cmd, "@MAX_SIZE"     , nMAX_SIZE       );
				IDbDataParameter parREQUIRED      = Sql.AddParameter(cmd, "@REQUIRED"     , bREQUIRED       );
				IDbDataParameter parDEFAULT_VALUE = Sql.AddAnsiParam(cmd, "@DEFAULT_VALUE", sDEFAULT_VALUE  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableAlterColumn
		/// <summary>
		/// spSqlTableAlterColumn
		/// </summary>
		public IDbCommand cmdSqlTableAlterColumn(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableAlterColumn";
			IDbDataParameter parTABLE_NAME    = Sql.CreateParameter(cmd, "@TABLE_NAME"   , "ansistring", 255);
			IDbDataParameter parCOLUMN_NAME   = Sql.CreateParameter(cmd, "@COLUMN_NAME"  , "ansistring", 255);
			IDbDataParameter parDATA_TYPE     = Sql.CreateParameter(cmd, "@DATA_TYPE"    , "ansistring", 255);
			IDbDataParameter parMAX_SIZE      = Sql.CreateParameter(cmd, "@MAX_SIZE"     , "Int32",   4);
			IDbDataParameter parREQUIRED      = Sql.CreateParameter(cmd, "@REQUIRED"     , "bool",   1);
			IDbDataParameter parDEFAULT_VALUE = Sql.CreateParameter(cmd, "@DEFAULT_VALUE", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableColumnExists
		/// <summary>
		/// spSqlTableColumnExists
		/// </summary>
		public void spSqlTableColumnExists(ref bool bEXISTS, string sTABLE_NAME, string sCOLUMN_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableColumnExists";
							IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parCOLUMN_NAME      = Sql.AddParameter(cmd, "@COLUMN_NAME"     , sCOLUMN_NAME       ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							parEXISTS.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							bEXISTS = Sql.ToBoolean(parEXISTS.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableColumnExists
		/// <summary>
		/// spSqlTableColumnExists
		/// </summary>
		public void spSqlTableColumnExists(ref bool bEXISTS, string sTABLE_NAME, string sCOLUMN_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableColumnExists";
				IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parCOLUMN_NAME      = Sql.AddParameter(cmd, "@COLUMN_NAME"     , sCOLUMN_NAME       ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				parEXISTS.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				bEXISTS = Sql.ToBoolean(parEXISTS.Value);
			}
		}
		#endregion

		#region cmdSqlTableColumnExists
		/// <summary>
		/// spSqlTableColumnExists
		/// </summary>
		public IDbCommand cmdSqlTableColumnExists(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableColumnExists";
			IDbDataParameter parEXISTS           = Sql.CreateParameter(cmd, "@EXISTS"          , "bool",   1);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parCOLUMN_NAME      = Sql.CreateParameter(cmd, "@COLUMN_NAME"     , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			parEXISTS.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlTableColumnsChanged
		/// <summary>
		/// spSqlTableColumnsChanged
		/// </summary>
		public void spSqlTableColumnsChanged(ref bool bEXISTS, string sTABLE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableColumnsChanged";
							IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							parEXISTS.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							bEXISTS = Sql.ToBoolean(parEXISTS.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableColumnsChanged
		/// <summary>
		/// spSqlTableColumnsChanged
		/// </summary>
		public void spSqlTableColumnsChanged(ref bool bEXISTS, string sTABLE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableColumnsChanged";
				IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				parEXISTS.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				bEXISTS = Sql.ToBoolean(parEXISTS.Value);
			}
		}
		#endregion

		#region cmdSqlTableColumnsChanged
		/// <summary>
		/// spSqlTableColumnsChanged
		/// </summary>
		public IDbCommand cmdSqlTableColumnsChanged(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableColumnsChanged";
			IDbDataParameter parEXISTS           = Sql.CreateParameter(cmd, "@EXISTS"          , "bool",   1);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			parEXISTS.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlTableDisableTriggers
		/// <summary>
		/// spSqlTableDisableTriggers
		/// </summary>
		public void spSqlTableDisableTriggers(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableDisableTriggers";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableDisableTriggers
		/// <summary>
		/// spSqlTableDisableTriggers
		/// </summary>
		public void spSqlTableDisableTriggers(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableDisableTriggers";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableDisableTriggers
		/// <summary>
		/// spSqlTableDisableTriggers
		/// </summary>
		public IDbCommand cmdSqlTableDisableTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableDisableTriggers";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableDropColumn
		/// <summary>
		/// spSqlTableDropColumn
		/// </summary>
		public void spSqlTableDropColumn(string sTABLE_NAME, string sCOLUMN_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableDropColumn";
							IDbDataParameter parTABLE_NAME  = Sql.AddAnsiParam(cmd, "@TABLE_NAME" , sTABLE_NAME   , 255);
							IDbDataParameter parCOLUMN_NAME = Sql.AddAnsiParam(cmd, "@COLUMN_NAME", sCOLUMN_NAME  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableDropColumn
		/// <summary>
		/// spSqlTableDropColumn
		/// </summary>
		public void spSqlTableDropColumn(string sTABLE_NAME, string sCOLUMN_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableDropColumn";
				IDbDataParameter parTABLE_NAME  = Sql.AddAnsiParam(cmd, "@TABLE_NAME" , sTABLE_NAME   , 255);
				IDbDataParameter parCOLUMN_NAME = Sql.AddAnsiParam(cmd, "@COLUMN_NAME", sCOLUMN_NAME  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableDropColumn
		/// <summary>
		/// spSqlTableDropColumn
		/// </summary>
		public IDbCommand cmdSqlTableDropColumn(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableDropColumn";
			IDbDataParameter parTABLE_NAME  = Sql.CreateParameter(cmd, "@TABLE_NAME" , "ansistring", 255);
			IDbDataParameter parCOLUMN_NAME = Sql.CreateParameter(cmd, "@COLUMN_NAME", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableDropColumnConstraint
		/// <summary>
		/// spSqlTableDropColumnConstraint
		/// </summary>
		public void spSqlTableDropColumnConstraint(string sTABLE_NAME, string sCOLUMN_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableDropColumnConstraint";
							IDbDataParameter parTABLE_NAME  = Sql.AddAnsiParam(cmd, "@TABLE_NAME" , sTABLE_NAME   , 255);
							IDbDataParameter parCOLUMN_NAME = Sql.AddAnsiParam(cmd, "@COLUMN_NAME", sCOLUMN_NAME  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableDropColumnConstraint
		/// <summary>
		/// spSqlTableDropColumnConstraint
		/// </summary>
		public void spSqlTableDropColumnConstraint(string sTABLE_NAME, string sCOLUMN_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableDropColumnConstraint";
				IDbDataParameter parTABLE_NAME  = Sql.AddAnsiParam(cmd, "@TABLE_NAME" , sTABLE_NAME   , 255);
				IDbDataParameter parCOLUMN_NAME = Sql.AddAnsiParam(cmd, "@COLUMN_NAME", sCOLUMN_NAME  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableDropColumnConstraint
		/// <summary>
		/// spSqlTableDropColumnConstraint
		/// </summary>
		public IDbCommand cmdSqlTableDropColumnConstraint(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableDropColumnConstraint";
			IDbDataParameter parTABLE_NAME  = Sql.CreateParameter(cmd, "@TABLE_NAME" , "ansistring", 255);
			IDbDataParameter parCOLUMN_NAME = Sql.CreateParameter(cmd, "@COLUMN_NAME", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableEnableTriggers
		/// <summary>
		/// spSqlTableEnableTriggers
		/// </summary>
		public void spSqlTableEnableTriggers(string sTABLE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableEnableTriggers";
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableEnableTriggers
		/// <summary>
		/// spSqlTableEnableTriggers
		/// </summary>
		public void spSqlTableEnableTriggers(string sTABLE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableEnableTriggers";
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlTableEnableTriggers
		/// <summary>
		/// spSqlTableEnableTriggers
		/// </summary>
		public IDbCommand cmdSqlTableEnableTriggers(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableEnableTriggers";
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spSqlTableExists
		/// <summary>
		/// spSqlTableExists
		/// </summary>
		public void spSqlTableExists(ref bool bEXISTS, string sTABLE_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableExists";
							IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							parEXISTS.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							bEXISTS = Sql.ToBoolean(parEXISTS.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableExists
		/// <summary>
		/// spSqlTableExists
		/// </summary>
		public void spSqlTableExists(ref bool bEXISTS, string sTABLE_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableExists";
				IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				parEXISTS.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				bEXISTS = Sql.ToBoolean(parEXISTS.Value);
			}
		}
		#endregion

		#region cmdSqlTableExists
		/// <summary>
		/// spSqlTableExists
		/// </summary>
		public IDbCommand cmdSqlTableExists(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableExists";
			IDbDataParameter parEXISTS           = Sql.CreateParameter(cmd, "@EXISTS"          , "bool",   1);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			parEXISTS.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlTableIndexExists
		/// <summary>
		/// spSqlTableIndexExists
		/// </summary>
		public void spSqlTableIndexExists(ref bool bEXISTS, string sTABLE_NAME, string sINDEX_NAME, string sARCHIVE_DATABASE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlTableIndexExists";
							IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
							IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
							IDbDataParameter parINDEX_NAME       = Sql.AddParameter(cmd, "@INDEX_NAME"      , sINDEX_NAME        , 120);
							IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
							parEXISTS.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							bEXISTS = Sql.ToBoolean(parEXISTS.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlTableIndexExists
		/// <summary>
		/// spSqlTableIndexExists
		/// </summary>
		public void spSqlTableIndexExists(ref bool bEXISTS, string sTABLE_NAME, string sINDEX_NAME, string sARCHIVE_DATABASE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlTableIndexExists";
				IDbDataParameter parEXISTS           = Sql.AddParameter(cmd, "@EXISTS"          , bEXISTS            );
				IDbDataParameter parTABLE_NAME       = Sql.AddParameter(cmd, "@TABLE_NAME"      , sTABLE_NAME        ,  80);
				IDbDataParameter parINDEX_NAME       = Sql.AddParameter(cmd, "@INDEX_NAME"      , sINDEX_NAME        , 120);
				IDbDataParameter parARCHIVE_DATABASE = Sql.AddParameter(cmd, "@ARCHIVE_DATABASE", sARCHIVE_DATABASE  ,  50);
				parEXISTS.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				bEXISTS = Sql.ToBoolean(parEXISTS.Value);
			}
		}
		#endregion

		#region cmdSqlTableIndexExists
		/// <summary>
		/// spSqlTableIndexExists
		/// </summary>
		public IDbCommand cmdSqlTableIndexExists(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlTableIndexExists";
			IDbDataParameter parEXISTS           = Sql.CreateParameter(cmd, "@EXISTS"          , "bool",   1);
			IDbDataParameter parTABLE_NAME       = Sql.CreateParameter(cmd, "@TABLE_NAME"      , "string",  80);
			IDbDataParameter parINDEX_NAME       = Sql.CreateParameter(cmd, "@INDEX_NAME"      , "string", 120);
			IDbDataParameter parARCHIVE_DATABASE = Sql.CreateParameter(cmd, "@ARCHIVE_DATABASE", "string",  50);
			parEXISTS.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSqlUpdateIndex
		/// <summary>
		/// spSqlUpdateIndex
		/// </summary>
		public void spSqlUpdateIndex(string sINDEX_NAME, string sTABLE_NAME, string sFIELD1, string sFIELD2, string sFIELD3, string sFIELD4, string sFIELD5, string sFIELD6)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlUpdateIndex";
							IDbDataParameter parINDEX_NAME = Sql.AddAnsiParam(cmd, "@INDEX_NAME", sINDEX_NAME  ,  80);
							IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
							IDbDataParameter parFIELD1     = Sql.AddAnsiParam(cmd, "@FIELD1"    , sFIELD1      ,  40);
							IDbDataParameter parFIELD2     = Sql.AddAnsiParam(cmd, "@FIELD2"    , sFIELD2      ,  40);
							IDbDataParameter parFIELD3     = Sql.AddAnsiParam(cmd, "@FIELD3"    , sFIELD3      ,  40);
							IDbDataParameter parFIELD4     = Sql.AddAnsiParam(cmd, "@FIELD4"    , sFIELD4      ,  40);
							IDbDataParameter parFIELD5     = Sql.AddAnsiParam(cmd, "@FIELD5"    , sFIELD5      ,  40);
							IDbDataParameter parFIELD6     = Sql.AddAnsiParam(cmd, "@FIELD6"    , sFIELD6      ,  40);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlUpdateIndex
		/// <summary>
		/// spSqlUpdateIndex
		/// </summary>
		public void spSqlUpdateIndex(string sINDEX_NAME, string sTABLE_NAME, string sFIELD1, string sFIELD2, string sFIELD3, string sFIELD4, string sFIELD5, string sFIELD6, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlUpdateIndex";
				IDbDataParameter parINDEX_NAME = Sql.AddAnsiParam(cmd, "@INDEX_NAME", sINDEX_NAME  ,  80);
				IDbDataParameter parTABLE_NAME = Sql.AddAnsiParam(cmd, "@TABLE_NAME", sTABLE_NAME  ,  80);
				IDbDataParameter parFIELD1     = Sql.AddAnsiParam(cmd, "@FIELD1"    , sFIELD1      ,  40);
				IDbDataParameter parFIELD2     = Sql.AddAnsiParam(cmd, "@FIELD2"    , sFIELD2      ,  40);
				IDbDataParameter parFIELD3     = Sql.AddAnsiParam(cmd, "@FIELD3"    , sFIELD3      ,  40);
				IDbDataParameter parFIELD4     = Sql.AddAnsiParam(cmd, "@FIELD4"    , sFIELD4      ,  40);
				IDbDataParameter parFIELD5     = Sql.AddAnsiParam(cmd, "@FIELD5"    , sFIELD5      ,  40);
				IDbDataParameter parFIELD6     = Sql.AddAnsiParam(cmd, "@FIELD6"    , sFIELD6      ,  40);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlUpdateIndex
		/// <summary>
		/// spSqlUpdateIndex
		/// </summary>
		public IDbCommand cmdSqlUpdateIndex(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlUpdateIndex";
			IDbDataParameter parINDEX_NAME = Sql.CreateParameter(cmd, "@INDEX_NAME", "ansistring",  80);
			IDbDataParameter parTABLE_NAME = Sql.CreateParameter(cmd, "@TABLE_NAME", "ansistring",  80);
			IDbDataParameter parFIELD1     = Sql.CreateParameter(cmd, "@FIELD1"    , "ansistring",  40);
			IDbDataParameter parFIELD2     = Sql.CreateParameter(cmd, "@FIELD2"    , "ansistring",  40);
			IDbDataParameter parFIELD3     = Sql.CreateParameter(cmd, "@FIELD3"    , "ansistring",  40);
			IDbDataParameter parFIELD4     = Sql.CreateParameter(cmd, "@FIELD4"    , "ansistring",  40);
			IDbDataParameter parFIELD5     = Sql.CreateParameter(cmd, "@FIELD5"    , "ansistring",  40);
			IDbDataParameter parFIELD6     = Sql.CreateParameter(cmd, "@FIELD6"    , "ansistring",  40);
			return cmd;
		}
		#endregion

		#region spSqlUpdateSyncdTables
		/// <summary>
		/// spSqlUpdateSyncdTables
		/// </summary>
		public void spSqlUpdateSyncdTables()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSqlUpdateSyncdTables";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSqlUpdateSyncdTables
		/// <summary>
		/// spSqlUpdateSyncdTables
		/// </summary>
		public void spSqlUpdateSyncdTables(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSqlUpdateSyncdTables";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSqlUpdateSyncdTables
		/// <summary>
		/// spSqlUpdateSyncdTables
		/// </summary>
		public IDbCommand cmdSqlUpdateSyncdTables(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSqlUpdateSyncdTables";
			return cmd;
		}
		#endregion

		#region spSYSTEM_CURRENCY_LOG_Delete
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_Delete
		/// </summary>
		public void spSYSTEM_CURRENCY_LOG_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_CURRENCY_LOG_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_CURRENCY_LOG_Delete
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_Delete
		/// </summary>
		public void spSYSTEM_CURRENCY_LOG_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_CURRENCY_LOG_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_CURRENCY_LOG_Delete
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_Delete
		/// </summary>
		public IDbCommand cmdSYSTEM_CURRENCY_LOG_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_CURRENCY_LOG_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSYSTEM_CURRENCY_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_CURRENCY_LOG_InsertOnly(ref Guid gID, string sSERVICE_NAME, string sSOURCE_ISO4217, string sDESTINATION_ISO4217, float flCONVERSION_RATE, string sRAW_CONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOn";
							else
								cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOnly";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parSERVICE_NAME        = Sql.AddParameter(cmd, "@SERVICE_NAME"       , sSERVICE_NAME         ,  50);
							IDbDataParameter parSOURCE_ISO4217      = Sql.AddParameter(cmd, "@SOURCE_ISO4217"     , sSOURCE_ISO4217       ,   3);
							IDbDataParameter parDESTINATION_ISO4217 = Sql.AddParameter(cmd, "@DESTINATION_ISO4217", sDESTINATION_ISO4217  ,   3);
							IDbDataParameter parCONVERSION_RATE     = Sql.AddParameter(cmd, "@CONVERSION_RATE"    , flCONVERSION_RATE     );
							IDbDataParameter parRAW_CONTENT         = Sql.AddParameter(cmd, "@RAW_CONTENT"        , sRAW_CONTENT          );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_CURRENCY_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_CURRENCY_LOG_InsertOnly(ref Guid gID, string sSERVICE_NAME, string sSOURCE_ISO4217, string sDESTINATION_ISO4217, float flCONVERSION_RATE, string sRAW_CONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOn";
				else
					cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOnly";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parSERVICE_NAME        = Sql.AddParameter(cmd, "@SERVICE_NAME"       , sSERVICE_NAME         ,  50);
				IDbDataParameter parSOURCE_ISO4217      = Sql.AddParameter(cmd, "@SOURCE_ISO4217"     , sSOURCE_ISO4217       ,   3);
				IDbDataParameter parDESTINATION_ISO4217 = Sql.AddParameter(cmd, "@DESTINATION_ISO4217", sDESTINATION_ISO4217  ,   3);
				IDbDataParameter parCONVERSION_RATE     = Sql.AddParameter(cmd, "@CONVERSION_RATE"    , flCONVERSION_RATE     );
				IDbDataParameter parRAW_CONTENT         = Sql.AddParameter(cmd, "@RAW_CONTENT"        , sRAW_CONTENT          );
				parID.Direction = ParameterDirection.InputOutput;
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSYSTEM_CURRENCY_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_CURRENCY_LOG_InsertOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_CURRENCY_LOG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOn";
			else
				cmd.CommandText = "spSYSTEM_CURRENCY_LOG_InsertOnly";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parSERVICE_NAME        = Sql.CreateParameter(cmd, "@SERVICE_NAME"       , "string",  50);
			IDbDataParameter parSOURCE_ISO4217      = Sql.CreateParameter(cmd, "@SOURCE_ISO4217"     , "string",   3);
			IDbDataParameter parDESTINATION_ISO4217 = Sql.CreateParameter(cmd, "@DESTINATION_ISO4217", "string",   3);
			IDbDataParameter parCONVERSION_RATE     = Sql.CreateParameter(cmd, "@CONVERSION_RATE"    , "float",   8);
			IDbDataParameter parRAW_CONTENT         = Sql.CreateParameter(cmd, "@RAW_CONTENT"        , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSYSTEM_EVENTS_ProcessAll
		/// <summary>
		/// spSYSTEM_EVENTS_ProcessAll
		/// </summary>
		public void spSYSTEM_EVENTS_ProcessAll()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_EVENTS_ProcessAll";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_EVENTS_ProcessAll
		/// <summary>
		/// spSYSTEM_EVENTS_ProcessAll
		/// </summary>
		public void spSYSTEM_EVENTS_ProcessAll(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_EVENTS_ProcessAll";
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_EVENTS_ProcessAll
		/// <summary>
		/// spSYSTEM_EVENTS_ProcessAll
		/// </summary>
		public IDbCommand cmdSYSTEM_EVENTS_ProcessAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_EVENTS_ProcessAll";
			return cmd;
		}
		#endregion

		#region spSYSTEM_LOG_Cleanup
		/// <summary>
		/// spSYSTEM_LOG_Cleanup
		/// </summary>
		public void spSYSTEM_LOG_Cleanup()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_LOG_Cleanup";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_LOG_Cleanup
		/// <summary>
		/// spSYSTEM_LOG_Cleanup
		/// </summary>
		public void spSYSTEM_LOG_Cleanup(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_LOG_Cleanup";
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_LOG_Cleanup
		/// <summary>
		/// spSYSTEM_LOG_Cleanup
		/// </summary>
		public IDbCommand cmdSYSTEM_LOG_Cleanup(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_LOG_Cleanup";
			return cmd;
		}
		#endregion

		#region spSYSTEM_LOG_Delete
		/// <summary>
		/// spSYSTEM_LOG_Delete
		/// </summary>
		public void spSYSTEM_LOG_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_LOG_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_LOG_Delete
		/// <summary>
		/// spSYSTEM_LOG_Delete
		/// </summary>
		public void spSYSTEM_LOG_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_LOG_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_LOG_Delete
		/// <summary>
		/// spSYSTEM_LOG_Delete
		/// </summary>
		public IDbCommand cmdSYSTEM_LOG_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_LOG_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSYSTEM_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_LOG_InsertOnly(Guid gUSER_ID, string sUSER_NAME, string sMACHINE, string sASPNET_SESSIONID, string sREMOTE_HOST, string sSERVER_HOST, string sTARGET, string sRELATIVE_PATH, string sPARAMETERS, string sERROR_TYPE, string sFILE_NAME, string sMETHOD, Int32 nLINE_NUMBER, string sMESSAGE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_LOG_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         , 255);
							IDbDataParameter parMACHINE          = Sql.AddParameter(cmd, "@MACHINE"         , sMACHINE           ,  60);
							IDbDataParameter parASPNET_SESSIONID = Sql.AddParameter(cmd, "@ASPNET_SESSIONID", sASPNET_SESSIONID  ,  50);
							IDbDataParameter parREMOTE_HOST      = Sql.AddParameter(cmd, "@REMOTE_HOST"     , sREMOTE_HOST       , 100);
							IDbDataParameter parSERVER_HOST      = Sql.AddParameter(cmd, "@SERVER_HOST"     , sSERVER_HOST       , 100);
							IDbDataParameter parTARGET           = Sql.AddParameter(cmd, "@TARGET"          , sTARGET            , 255);
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
							IDbDataParameter parPARAMETERS       = Sql.AddParameter(cmd, "@PARAMETERS"      , sPARAMETERS        , 2000);
							IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
							IDbDataParameter parFILE_NAME        = Sql.AddParameter(cmd, "@FILE_NAME"       , sFILE_NAME         , 255);
							IDbDataParameter parMETHOD           = Sql.AddParameter(cmd, "@METHOD"          , sMETHOD            , 450);
							IDbDataParameter parLINE_NUMBER      = Sql.AddParameter(cmd, "@LINE_NUMBER"     , nLINE_NUMBER       );
							IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_LOG_InsertOnly(Guid gUSER_ID, string sUSER_NAME, string sMACHINE, string sASPNET_SESSIONID, string sREMOTE_HOST, string sSERVER_HOST, string sTARGET, string sRELATIVE_PATH, string sPARAMETERS, string sERROR_TYPE, string sFILE_NAME, string sMETHOD, Int32 nLINE_NUMBER, string sMESSAGE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_LOG_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         , 255);
				IDbDataParameter parMACHINE          = Sql.AddParameter(cmd, "@MACHINE"         , sMACHINE           ,  60);
				IDbDataParameter parASPNET_SESSIONID = Sql.AddParameter(cmd, "@ASPNET_SESSIONID", sASPNET_SESSIONID  ,  50);
				IDbDataParameter parREMOTE_HOST      = Sql.AddParameter(cmd, "@REMOTE_HOST"     , sREMOTE_HOST       , 100);
				IDbDataParameter parSERVER_HOST      = Sql.AddParameter(cmd, "@SERVER_HOST"     , sSERVER_HOST       , 100);
				IDbDataParameter parTARGET           = Sql.AddParameter(cmd, "@TARGET"          , sTARGET            , 255);
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
				IDbDataParameter parPARAMETERS       = Sql.AddParameter(cmd, "@PARAMETERS"      , sPARAMETERS        , 2000);
				IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
				IDbDataParameter parFILE_NAME        = Sql.AddParameter(cmd, "@FILE_NAME"       , sFILE_NAME         , 255);
				IDbDataParameter parMETHOD           = Sql.AddParameter(cmd, "@METHOD"          , sMETHOD            , 450);
				IDbDataParameter parLINE_NUMBER      = Sql.AddParameter(cmd, "@LINE_NUMBER"     , nLINE_NUMBER       );
				IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_LOG_InsertOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_LOG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_LOG_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string", 255);
			IDbDataParameter parMACHINE          = Sql.CreateParameter(cmd, "@MACHINE"         , "string",  60);
			IDbDataParameter parASPNET_SESSIONID = Sql.CreateParameter(cmd, "@ASPNET_SESSIONID", "string",  50);
			IDbDataParameter parREMOTE_HOST      = Sql.CreateParameter(cmd, "@REMOTE_HOST"     , "string", 100);
			IDbDataParameter parSERVER_HOST      = Sql.CreateParameter(cmd, "@SERVER_HOST"     , "string", 100);
			IDbDataParameter parTARGET           = Sql.CreateParameter(cmd, "@TARGET"          , "string", 255);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string", 255);
			IDbDataParameter parPARAMETERS       = Sql.CreateParameter(cmd, "@PARAMETERS"      , "string", 2000);
			IDbDataParameter parERROR_TYPE       = Sql.CreateParameter(cmd, "@ERROR_TYPE"      , "string",  25);
			IDbDataParameter parFILE_NAME        = Sql.CreateParameter(cmd, "@FILE_NAME"       , "string", 255);
			IDbDataParameter parMETHOD           = Sql.CreateParameter(cmd, "@METHOD"          , "string", 450);
			IDbDataParameter parLINE_NUMBER      = Sql.CreateParameter(cmd, "@LINE_NUMBER"     , "Int32",   4);
			IDbDataParameter parMESSAGE          = Sql.CreateParameter(cmd, "@MESSAGE"         , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spSYSTEM_LOG_MessageOnly
		/// <summary>
		/// spSYSTEM_LOG_MessageOnly
		/// </summary>
		public void spSYSTEM_LOG_MessageOnly(string sERROR_TYPE, string sMESSAGE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_LOG_MessageOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
							IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_LOG_MessageOnly
		/// <summary>
		/// spSYSTEM_LOG_MessageOnly
		/// </summary>
		public void spSYSTEM_LOG_MessageOnly(string sERROR_TYPE, string sMESSAGE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_LOG_MessageOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
				IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_LOG_MessageOnly
		/// <summary>
		/// spSYSTEM_LOG_MessageOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_LOG_MessageOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_LOG_MessageOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parERROR_TYPE       = Sql.CreateParameter(cmd, "@ERROR_TYPE"      , "string",  25);
			IDbDataParameter parMESSAGE          = Sql.CreateParameter(cmd, "@MESSAGE"         , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spSYSTEM_REST_TABLES_Delete
		/// <summary>
		/// spSYSTEM_REST_TABLES_Delete
		/// </summary>
		public void spSYSTEM_REST_TABLES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_REST_TABLES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_REST_TABLES_Delete
		/// <summary>
		/// spSYSTEM_REST_TABLES_Delete
		/// </summary>
		public void spSYSTEM_REST_TABLES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_REST_TABLES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_REST_TABLES_Delete
		/// <summary>
		/// spSYSTEM_REST_TABLES_Delete
		/// </summary>
		public IDbCommand cmdSYSTEM_REST_TABLES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_REST_TABLES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spSYSTEM_REST_TABLES_InsertOnly
		/// <summary>
		/// spSYSTEM_REST_TABLES_InsertOnly
		/// </summary>
		public void spSYSTEM_REST_TABLES_InsertOnly(string sTABLE_NAME, string sVIEW_NAME, string sMODULE_NAME, string sMODULE_NAME_RELATED, Int32 nMODULE_SPECIFIC, string sMODULE_FIELD_NAME, bool bIS_SYSTEM, bool bIS_ASSIGNED, string sASSIGNED_FIELD_NAME, bool bIS_RELATIONSHIP, string sREQUIRED_FIELDS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnl";
							else
								cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parTABLE_NAME          = Sql.AddParameter(cmd, "@TABLE_NAME"         , sTABLE_NAME           ,  50);
							IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  60);
							IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
							IDbDataParameter parMODULE_NAME_RELATED = Sql.AddParameter(cmd, "@MODULE_NAME_RELATED", sMODULE_NAME_RELATED  ,  25);
							IDbDataParameter parMODULE_SPECIFIC     = Sql.AddParameter(cmd, "@MODULE_SPECIFIC"    , nMODULE_SPECIFIC      );
							IDbDataParameter parMODULE_FIELD_NAME   = Sql.AddParameter(cmd, "@MODULE_FIELD_NAME"  , sMODULE_FIELD_NAME    ,  50);
							IDbDataParameter parIS_SYSTEM           = Sql.AddParameter(cmd, "@IS_SYSTEM"          , bIS_SYSTEM            );
							IDbDataParameter parIS_ASSIGNED         = Sql.AddParameter(cmd, "@IS_ASSIGNED"        , bIS_ASSIGNED          );
							IDbDataParameter parASSIGNED_FIELD_NAME = Sql.AddParameter(cmd, "@ASSIGNED_FIELD_NAME", sASSIGNED_FIELD_NAME  ,  50);
							IDbDataParameter parIS_RELATIONSHIP     = Sql.AddParameter(cmd, "@IS_RELATIONSHIP"    , bIS_RELATIONSHIP      );
							IDbDataParameter parREQUIRED_FIELDS     = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"    , sREQUIRED_FIELDS      , 150);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_REST_TABLES_InsertOnly
		/// <summary>
		/// spSYSTEM_REST_TABLES_InsertOnly
		/// </summary>
		public void spSYSTEM_REST_TABLES_InsertOnly(string sTABLE_NAME, string sVIEW_NAME, string sMODULE_NAME, string sMODULE_NAME_RELATED, Int32 nMODULE_SPECIFIC, string sMODULE_FIELD_NAME, bool bIS_SYSTEM, bool bIS_ASSIGNED, string sASSIGNED_FIELD_NAME, bool bIS_RELATIONSHIP, string sREQUIRED_FIELDS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnl";
				else
					cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parTABLE_NAME          = Sql.AddParameter(cmd, "@TABLE_NAME"         , sTABLE_NAME           ,  50);
				IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  60);
				IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
				IDbDataParameter parMODULE_NAME_RELATED = Sql.AddParameter(cmd, "@MODULE_NAME_RELATED", sMODULE_NAME_RELATED  ,  25);
				IDbDataParameter parMODULE_SPECIFIC     = Sql.AddParameter(cmd, "@MODULE_SPECIFIC"    , nMODULE_SPECIFIC      );
				IDbDataParameter parMODULE_FIELD_NAME   = Sql.AddParameter(cmd, "@MODULE_FIELD_NAME"  , sMODULE_FIELD_NAME    ,  50);
				IDbDataParameter parIS_SYSTEM           = Sql.AddParameter(cmd, "@IS_SYSTEM"          , bIS_SYSTEM            );
				IDbDataParameter parIS_ASSIGNED         = Sql.AddParameter(cmd, "@IS_ASSIGNED"        , bIS_ASSIGNED          );
				IDbDataParameter parASSIGNED_FIELD_NAME = Sql.AddParameter(cmd, "@ASSIGNED_FIELD_NAME", sASSIGNED_FIELD_NAME  ,  50);
				IDbDataParameter parIS_RELATIONSHIP     = Sql.AddParameter(cmd, "@IS_RELATIONSHIP"    , bIS_RELATIONSHIP      );
				IDbDataParameter parREQUIRED_FIELDS     = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"    , sREQUIRED_FIELDS      , 150);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_REST_TABLES_InsertOnly
		/// <summary>
		/// spSYSTEM_REST_TABLES_InsertOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_REST_TABLES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnl";
			else
				cmd.CommandText = "spSYSTEM_REST_TABLES_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parTABLE_NAME          = Sql.CreateParameter(cmd, "@TABLE_NAME"         , "string",  50);
			IDbDataParameter parVIEW_NAME           = Sql.CreateParameter(cmd, "@VIEW_NAME"          , "string",  60);
			IDbDataParameter parMODULE_NAME         = Sql.CreateParameter(cmd, "@MODULE_NAME"        , "string",  25);
			IDbDataParameter parMODULE_NAME_RELATED = Sql.CreateParameter(cmd, "@MODULE_NAME_RELATED", "string",  25);
			IDbDataParameter parMODULE_SPECIFIC     = Sql.CreateParameter(cmd, "@MODULE_SPECIFIC"    , "Int32",   4);
			IDbDataParameter parMODULE_FIELD_NAME   = Sql.CreateParameter(cmd, "@MODULE_FIELD_NAME"  , "string",  50);
			IDbDataParameter parIS_SYSTEM           = Sql.CreateParameter(cmd, "@IS_SYSTEM"          , "bool",   1);
			IDbDataParameter parIS_ASSIGNED         = Sql.CreateParameter(cmd, "@IS_ASSIGNED"        , "bool",   1);
			IDbDataParameter parASSIGNED_FIELD_NAME = Sql.CreateParameter(cmd, "@ASSIGNED_FIELD_NAME", "string",  50);
			IDbDataParameter parIS_RELATIONSHIP     = Sql.CreateParameter(cmd, "@IS_RELATIONSHIP"    , "bool",   1);
			IDbDataParameter parREQUIRED_FIELDS     = Sql.CreateParameter(cmd, "@REQUIRED_FIELDS"    , "string", 150);
			return cmd;
		}
		#endregion

		#region spSYSTEM_REST_TABLES_Update
		/// <summary>
		/// spSYSTEM_REST_TABLES_Update
		/// </summary>
		public void spSYSTEM_REST_TABLES_Update(ref Guid gID, string sTABLE_NAME, string sVIEW_NAME, string sMODULE_NAME, string sMODULE_NAME_RELATED, Int32 nMODULE_SPECIFIC, string sMODULE_FIELD_NAME, bool bIS_SYSTEM, bool bIS_ASSIGNED, string sASSIGNED_FIELD_NAME, bool bIS_RELATIONSHIP, string sREQUIRED_FIELDS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_REST_TABLES_Update";
							IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
							IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
							IDbDataParameter parTABLE_NAME          = Sql.AddParameter(cmd, "@TABLE_NAME"         , sTABLE_NAME           ,  50);
							IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  60);
							IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
							IDbDataParameter parMODULE_NAME_RELATED = Sql.AddParameter(cmd, "@MODULE_NAME_RELATED", sMODULE_NAME_RELATED  ,  25);
							IDbDataParameter parMODULE_SPECIFIC     = Sql.AddParameter(cmd, "@MODULE_SPECIFIC"    , nMODULE_SPECIFIC      );
							IDbDataParameter parMODULE_FIELD_NAME   = Sql.AddParameter(cmd, "@MODULE_FIELD_NAME"  , sMODULE_FIELD_NAME    ,  50);
							IDbDataParameter parIS_SYSTEM           = Sql.AddParameter(cmd, "@IS_SYSTEM"          , bIS_SYSTEM            );
							IDbDataParameter parIS_ASSIGNED         = Sql.AddParameter(cmd, "@IS_ASSIGNED"        , bIS_ASSIGNED          );
							IDbDataParameter parASSIGNED_FIELD_NAME = Sql.AddParameter(cmd, "@ASSIGNED_FIELD_NAME", sASSIGNED_FIELD_NAME  ,  50);
							IDbDataParameter parIS_RELATIONSHIP     = Sql.AddParameter(cmd, "@IS_RELATIONSHIP"    , bIS_RELATIONSHIP      );
							IDbDataParameter parREQUIRED_FIELDS     = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"    , sREQUIRED_FIELDS      , 150);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_REST_TABLES_Update
		/// <summary>
		/// spSYSTEM_REST_TABLES_Update
		/// </summary>
		public void spSYSTEM_REST_TABLES_Update(ref Guid gID, string sTABLE_NAME, string sVIEW_NAME, string sMODULE_NAME, string sMODULE_NAME_RELATED, Int32 nMODULE_SPECIFIC, string sMODULE_FIELD_NAME, bool bIS_SYSTEM, bool bIS_ASSIGNED, string sASSIGNED_FIELD_NAME, bool bIS_RELATIONSHIP, string sREQUIRED_FIELDS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_REST_TABLES_Update";
				IDbDataParameter parID                  = Sql.AddParameter(cmd, "@ID"                 , gID                   );
				IDbDataParameter parMODIFIED_USER_ID    = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"   ,  Security.USER_ID     );
				IDbDataParameter parTABLE_NAME          = Sql.AddParameter(cmd, "@TABLE_NAME"         , sTABLE_NAME           ,  50);
				IDbDataParameter parVIEW_NAME           = Sql.AddParameter(cmd, "@VIEW_NAME"          , sVIEW_NAME            ,  60);
				IDbDataParameter parMODULE_NAME         = Sql.AddParameter(cmd, "@MODULE_NAME"        , sMODULE_NAME          ,  25);
				IDbDataParameter parMODULE_NAME_RELATED = Sql.AddParameter(cmd, "@MODULE_NAME_RELATED", sMODULE_NAME_RELATED  ,  25);
				IDbDataParameter parMODULE_SPECIFIC     = Sql.AddParameter(cmd, "@MODULE_SPECIFIC"    , nMODULE_SPECIFIC      );
				IDbDataParameter parMODULE_FIELD_NAME   = Sql.AddParameter(cmd, "@MODULE_FIELD_NAME"  , sMODULE_FIELD_NAME    ,  50);
				IDbDataParameter parIS_SYSTEM           = Sql.AddParameter(cmd, "@IS_SYSTEM"          , bIS_SYSTEM            );
				IDbDataParameter parIS_ASSIGNED         = Sql.AddParameter(cmd, "@IS_ASSIGNED"        , bIS_ASSIGNED          );
				IDbDataParameter parASSIGNED_FIELD_NAME = Sql.AddParameter(cmd, "@ASSIGNED_FIELD_NAME", sASSIGNED_FIELD_NAME  ,  50);
				IDbDataParameter parIS_RELATIONSHIP     = Sql.AddParameter(cmd, "@IS_RELATIONSHIP"    , bIS_RELATIONSHIP      );
				IDbDataParameter parREQUIRED_FIELDS     = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"    , sREQUIRED_FIELDS      , 150);
				parID.Direction = ParameterDirection.InputOutput;
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSYSTEM_REST_TABLES_Update
		/// <summary>
		/// spSYSTEM_REST_TABLES_Update
		/// </summary>
		public IDbCommand cmdSYSTEM_REST_TABLES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_REST_TABLES_Update";
			IDbDataParameter parID                  = Sql.CreateParameter(cmd, "@ID"                 , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID    = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"   , "Guid",  16);
			IDbDataParameter parTABLE_NAME          = Sql.CreateParameter(cmd, "@TABLE_NAME"         , "string",  50);
			IDbDataParameter parVIEW_NAME           = Sql.CreateParameter(cmd, "@VIEW_NAME"          , "string",  60);
			IDbDataParameter parMODULE_NAME         = Sql.CreateParameter(cmd, "@MODULE_NAME"        , "string",  25);
			IDbDataParameter parMODULE_NAME_RELATED = Sql.CreateParameter(cmd, "@MODULE_NAME_RELATED", "string",  25);
			IDbDataParameter parMODULE_SPECIFIC     = Sql.CreateParameter(cmd, "@MODULE_SPECIFIC"    , "Int32",   4);
			IDbDataParameter parMODULE_FIELD_NAME   = Sql.CreateParameter(cmd, "@MODULE_FIELD_NAME"  , "string",  50);
			IDbDataParameter parIS_SYSTEM           = Sql.CreateParameter(cmd, "@IS_SYSTEM"          , "bool",   1);
			IDbDataParameter parIS_ASSIGNED         = Sql.CreateParameter(cmd, "@IS_ASSIGNED"        , "bool",   1);
			IDbDataParameter parASSIGNED_FIELD_NAME = Sql.CreateParameter(cmd, "@ASSIGNED_FIELD_NAME", "string",  50);
			IDbDataParameter parIS_RELATIONSHIP     = Sql.CreateParameter(cmd, "@IS_RELATIONSHIP"    , "bool",   1);
			IDbDataParameter parREQUIRED_FIELDS     = Sql.CreateParameter(cmd, "@REQUIRED_FIELDS"    , "string", 150);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spSYSTEM_SYNC_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_SYNC_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_SYNC_LOG_InsertOnly(Guid gUSER_ID, string sMACHINE, string sREMOTE_URL, string sERROR_TYPE, string sFILE_NAME, string sMETHOD, Int32 nLINE_NUMBER, string sMESSAGE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spSYSTEM_SYNC_LOG_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parMACHINE          = Sql.AddParameter(cmd, "@MACHINE"         , sMACHINE           ,  60);
							IDbDataParameter parREMOTE_URL       = Sql.AddParameter(cmd, "@REMOTE_URL"      , sREMOTE_URL        , 255);
							IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
							IDbDataParameter parFILE_NAME        = Sql.AddParameter(cmd, "@FILE_NAME"       , sFILE_NAME         , 255);
							IDbDataParameter parMETHOD           = Sql.AddParameter(cmd, "@METHOD"          , sMETHOD            , 450);
							IDbDataParameter parLINE_NUMBER      = Sql.AddParameter(cmd, "@LINE_NUMBER"     , nLINE_NUMBER       );
							IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spSYSTEM_SYNC_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_SYNC_LOG_InsertOnly
		/// </summary>
		public void spSYSTEM_SYNC_LOG_InsertOnly(Guid gUSER_ID, string sMACHINE, string sREMOTE_URL, string sERROR_TYPE, string sFILE_NAME, string sMETHOD, Int32 nLINE_NUMBER, string sMESSAGE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_SYNC_LOG_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parMACHINE          = Sql.AddParameter(cmd, "@MACHINE"         , sMACHINE           ,  60);
				IDbDataParameter parREMOTE_URL       = Sql.AddParameter(cmd, "@REMOTE_URL"      , sREMOTE_URL        , 255);
				IDbDataParameter parERROR_TYPE       = Sql.AddParameter(cmd, "@ERROR_TYPE"      , sERROR_TYPE        ,  25);
				IDbDataParameter parFILE_NAME        = Sql.AddParameter(cmd, "@FILE_NAME"       , sFILE_NAME         , 255);
				IDbDataParameter parMETHOD           = Sql.AddParameter(cmd, "@METHOD"          , sMETHOD            , 450);
				IDbDataParameter parLINE_NUMBER      = Sql.AddParameter(cmd, "@LINE_NUMBER"     , nLINE_NUMBER       );
				IDbDataParameter parMESSAGE          = Sql.AddParameter(cmd, "@MESSAGE"         , sMESSAGE           );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdSYSTEM_SYNC_LOG_InsertOnly
		/// <summary>
		/// spSYSTEM_SYNC_LOG_InsertOnly
		/// </summary>
		public IDbCommand cmdSYSTEM_SYNC_LOG_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_SYNC_LOG_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parMACHINE          = Sql.CreateParameter(cmd, "@MACHINE"         , "string",  60);
			IDbDataParameter parREMOTE_URL       = Sql.CreateParameter(cmd, "@REMOTE_URL"      , "string", 255);
			IDbDataParameter parERROR_TYPE       = Sql.CreateParameter(cmd, "@ERROR_TYPE"      , "string",  25);
			IDbDataParameter parFILE_NAME        = Sql.CreateParameter(cmd, "@FILE_NAME"       , "string", 255);
			IDbDataParameter parMETHOD           = Sql.CreateParameter(cmd, "@METHOD"          , "string", 450);
			IDbDataParameter parLINE_NUMBER      = Sql.CreateParameter(cmd, "@LINE_NUMBER"     , "Int32",   4);
			IDbDataParameter parMESSAGE          = Sql.CreateParameter(cmd, "@MESSAGE"         , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spSYSTEM_TRANSACTIONS_Create
		/// <summary>
		/// spSYSTEM_TRANSACTIONS_Create
		/// </summary>
		public void spSYSTEM_TRANSACTIONS_Create(ref Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spSYSTEM_TRANSACTIONS_Create";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				parID.Direction = ParameterDirection.InputOutput;
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdSYSTEM_TRANSACTIONS_Create
		/// <summary>
		/// spSYSTEM_TRANSACTIONS_Create
		/// </summary>
		public IDbCommand cmdSYSTEM_TRANSACTIONS_Create(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spSYSTEM_TRANSACTIONS_Create";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_DeleteUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_DeleteUser
		/// </summary>
		public void spTEAM_MEMBERSHIPS_DeleteUser(Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_MEMBERSHIPS_DeleteUser";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_DeleteUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_DeleteUser
		/// </summary>
		public void spTEAM_MEMBERSHIPS_DeleteUser(Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_MEMBERSHIPS_DeleteUser";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAM_MEMBERSHIPS_DeleteUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_DeleteUser
		/// </summary>
		public IDbCommand cmdTEAM_MEMBERSHIPS_DeleteUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_MEMBERSHIPS_DeleteUser";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_RefreshUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_RefreshUser
		/// </summary>
		public void spTEAM_MEMBERSHIPS_RefreshUser(Guid gUSER_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_MEMBERSHIPS_RefreshUser";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_RefreshUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_RefreshUser
		/// </summary>
		public void spTEAM_MEMBERSHIPS_RefreshUser(Guid gUSER_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_MEMBERSHIPS_RefreshUser";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAM_MEMBERSHIPS_RefreshUser
		/// <summary>
		/// spTEAM_MEMBERSHIPS_RefreshUser
		/// </summary>
		public IDbCommand cmdTEAM_MEMBERSHIPS_RefreshUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_MEMBERSHIPS_RefreshUser";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spTEAM_MEMBERSHIPS_Update
		/// </summary>
		public void spTEAM_MEMBERSHIPS_Update(Guid gTEAM_ID, Guid gUSER_ID, bool bEXPLICIT_ASSIGN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_MEMBERSHIPS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parEXPLICIT_ASSIGN  = Sql.AddParameter(cmd, "@EXPLICIT_ASSIGN" , bEXPLICIT_ASSIGN   );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spTEAM_MEMBERSHIPS_Update
		/// </summary>
		public void spTEAM_MEMBERSHIPS_Update(Guid gTEAM_ID, Guid gUSER_ID, bool bEXPLICIT_ASSIGN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_MEMBERSHIPS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parEXPLICIT_ASSIGN  = Sql.AddParameter(cmd, "@EXPLICIT_ASSIGN" , bEXPLICIT_ASSIGN   );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spTEAM_MEMBERSHIPS_Update
		/// </summary>
		public IDbCommand cmdTEAM_MEMBERSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_MEMBERSHIPS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parEXPLICIT_ASSIGN  = Sql.CreateParameter(cmd, "@EXPLICIT_ASSIGN" , "bool",   1);
			return cmd;
		}
		#endregion

		#region spTEAM_SETS_NormalizeSet
		/// <summary>
		/// spTEAM_SETS_NormalizeSet
		/// </summary>
		public void spTEAM_SETS_NormalizeSet(ref Guid gID, Guid gPRIMARY_TEAM_ID, string sTEAM_SET_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAM_SETS_NormalizeSet";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPRIMARY_TEAM_ID  = Sql.AddParameter(cmd, "@PRIMARY_TEAM_ID" , gPRIMARY_TEAM_ID   );
							IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAM_SETS_NormalizeSet
		/// <summary>
		/// spTEAM_SETS_NormalizeSet
		/// </summary>
		public void spTEAM_SETS_NormalizeSet(ref Guid gID, Guid gPRIMARY_TEAM_ID, string sTEAM_SET_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAM_SETS_NormalizeSet";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPRIMARY_TEAM_ID  = Sql.AddParameter(cmd, "@PRIMARY_TEAM_ID" , gPRIMARY_TEAM_ID   );
				IDbDataParameter parTEAM_SET_LIST    = Sql.AddAnsiParam(cmd, "@TEAM_SET_LIST"   , sTEAM_SET_LIST     , 8000);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTEAM_SETS_NormalizeSet
		/// <summary>
		/// spTEAM_SETS_NormalizeSet
		/// </summary>
		public IDbCommand cmdTEAM_SETS_NormalizeSet(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAM_SETS_NormalizeSet";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPRIMARY_TEAM_ID  = Sql.CreateParameter(cmd, "@PRIMARY_TEAM_ID" , "Guid",  16);
			IDbDataParameter parTEAM_SET_LIST    = Sql.CreateParameter(cmd, "@TEAM_SET_LIST"   , "ansistring", 8000);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTEAMS_InitPrivate
		/// <summary>
		/// spTEAMS_InitPrivate
		/// </summary>
		public void spTEAMS_InitPrivate()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAMS_InitPrivate";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAMS_InitPrivate
		/// <summary>
		/// spTEAMS_InitPrivate
		/// </summary>
		public void spTEAMS_InitPrivate(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAMS_InitPrivate";
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAMS_InitPrivate
		/// <summary>
		/// spTEAMS_InitPrivate
		/// </summary>
		public IDbCommand cmdTEAMS_InitPrivate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAMS_InitPrivate";
			return cmd;
		}
		#endregion

		#region spTEAMS_InsertOnly
		/// <summary>
		/// spTEAMS_InsertOnly
		/// </summary>
		public void spTEAMS_InsertOnly(Guid gID, string sNAME, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAMS_InsertOnly";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         , 128);
							IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAMS_InsertOnly
		/// <summary>
		/// spTEAMS_InsertOnly
		/// </summary>
		public void spTEAMS_InsertOnly(Guid gID, string sNAME, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAMS_InsertOnly";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parNAME        = Sql.AddParameter(cmd, "@NAME"       , sNAME         , 128);
				IDbDataParameter parDESCRIPTION = Sql.AddParameter(cmd, "@DESCRIPTION", sDESCRIPTION  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAMS_InsertOnly
		/// <summary>
		/// spTEAMS_InsertOnly
		/// </summary>
		public IDbCommand cmdTEAMS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAMS_InsertOnly";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parNAME        = Sql.CreateParameter(cmd, "@NAME"       , "string", 128);
			IDbDataParameter parDESCRIPTION = Sql.CreateParameter(cmd, "@DESCRIPTION", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spTEAMS_InsertPrivate
		/// <summary>
		/// spTEAMS_InsertPrivate
		/// </summary>
		public void spTEAMS_InsertPrivate(Guid gUSER_ID, string sUSER_NAME, string sFULL_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTEAMS_InsertPrivate";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  20);
							IDbDataParameter parFULL_NAME        = Sql.AddParameter(cmd, "@FULL_NAME"       , sFULL_NAME         , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTEAMS_InsertPrivate
		/// <summary>
		/// spTEAMS_InsertPrivate
		/// </summary>
		public void spTEAMS_InsertPrivate(Guid gUSER_ID, string sUSER_NAME, string sFULL_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTEAMS_InsertPrivate";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  20);
				IDbDataParameter parFULL_NAME        = Sql.AddParameter(cmd, "@FULL_NAME"       , sFULL_NAME         , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTEAMS_InsertPrivate
		/// <summary>
		/// spTEAMS_InsertPrivate
		/// </summary>
		public IDbCommand cmdTEAMS_InsertPrivate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTEAMS_InsertPrivate";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  20);
			IDbDataParameter parFULL_NAME        = Sql.CreateParameter(cmd, "@FULL_NAME"       , "string", 100);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_Delete
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Delete
		/// </summary>
		public void spTERMINOLOGY_ALIASES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_ALIASES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_Delete
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Delete
		/// </summary>
		public void spTERMINOLOGY_ALIASES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_ALIASES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_ALIASES_Delete
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Delete
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_ALIASES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_ALIASES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_ALIASES_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_ALIASES_InsertOnly(string sALIAS_NAME, string sALIAS_MODULE_NAME, string sALIAS_LIST_NAME, string sNAME, string sMODULE_NAME, string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOn";
							else
								cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parALIAS_NAME        = Sql.AddParameter(cmd, "@ALIAS_NAME"       , sALIAS_NAME         ,  50);
							IDbDataParameter parALIAS_MODULE_NAME = Sql.AddParameter(cmd, "@ALIAS_MODULE_NAME", sALIAS_MODULE_NAME  ,  25);
							IDbDataParameter parALIAS_LIST_NAME   = Sql.AddParameter(cmd, "@ALIAS_LIST_NAME"  , sALIAS_LIST_NAME    ,  50);
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  25);
							IDbDataParameter parLIST_NAME         = Sql.AddParameter(cmd, "@LIST_NAME"        , sLIST_NAME          ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_ALIASES_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_ALIASES_InsertOnly(string sALIAS_NAME, string sALIAS_MODULE_NAME, string sALIAS_LIST_NAME, string sNAME, string sMODULE_NAME, string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOn";
				else
					cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parALIAS_NAME        = Sql.AddParameter(cmd, "@ALIAS_NAME"       , sALIAS_NAME         ,  50);
				IDbDataParameter parALIAS_MODULE_NAME = Sql.AddParameter(cmd, "@ALIAS_MODULE_NAME", sALIAS_MODULE_NAME  ,  25);
				IDbDataParameter parALIAS_LIST_NAME   = Sql.AddParameter(cmd, "@ALIAS_LIST_NAME"  , sALIAS_LIST_NAME    ,  50);
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  25);
				IDbDataParameter parLIST_NAME         = Sql.AddParameter(cmd, "@LIST_NAME"        , sLIST_NAME          ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_ALIASES_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_ALIASES_InsertOnly
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_ALIASES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOn";
			else
				cmd.CommandText = "spTERMINOLOGY_ALIASES_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parALIAS_NAME        = Sql.CreateParameter(cmd, "@ALIAS_NAME"       , "string",  50);
			IDbDataParameter parALIAS_MODULE_NAME = Sql.CreateParameter(cmd, "@ALIAS_MODULE_NAME", "string",  25);
			IDbDataParameter parALIAS_LIST_NAME   = Sql.CreateParameter(cmd, "@ALIAS_LIST_NAME"  , "string",  50);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parMODULE_NAME       = Sql.CreateParameter(cmd, "@MODULE_NAME"      , "string",  25);
			IDbDataParameter parLIST_NAME         = Sql.CreateParameter(cmd, "@LIST_NAME"        , "string",  50);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_Update
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Update
		/// </summary>
		public void spTERMINOLOGY_ALIASES_Update(ref Guid gID, string sALIAS_NAME, string sALIAS_MODULE_NAME, string sALIAS_LIST_NAME, string sNAME, string sMODULE_NAME, string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_ALIASES_Update";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parALIAS_NAME        = Sql.AddParameter(cmd, "@ALIAS_NAME"       , sALIAS_NAME         ,  50);
							IDbDataParameter parALIAS_MODULE_NAME = Sql.AddParameter(cmd, "@ALIAS_MODULE_NAME", sALIAS_MODULE_NAME  ,  25);
							IDbDataParameter parALIAS_LIST_NAME   = Sql.AddParameter(cmd, "@ALIAS_LIST_NAME"  , sALIAS_LIST_NAME    ,  50);
							IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
							IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  25);
							IDbDataParameter parLIST_NAME         = Sql.AddParameter(cmd, "@LIST_NAME"        , sLIST_NAME          ,  50);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_ALIASES_Update
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Update
		/// </summary>
		public void spTERMINOLOGY_ALIASES_Update(ref Guid gID, string sALIAS_NAME, string sALIAS_MODULE_NAME, string sALIAS_LIST_NAME, string sNAME, string sMODULE_NAME, string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_ALIASES_Update";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parALIAS_NAME        = Sql.AddParameter(cmd, "@ALIAS_NAME"       , sALIAS_NAME         ,  50);
				IDbDataParameter parALIAS_MODULE_NAME = Sql.AddParameter(cmd, "@ALIAS_MODULE_NAME", sALIAS_MODULE_NAME  ,  25);
				IDbDataParameter parALIAS_LIST_NAME   = Sql.AddParameter(cmd, "@ALIAS_LIST_NAME"  , sALIAS_LIST_NAME    ,  50);
				IDbDataParameter parNAME              = Sql.AddParameter(cmd, "@NAME"             , sNAME               ,  50);
				IDbDataParameter parMODULE_NAME       = Sql.AddParameter(cmd, "@MODULE_NAME"      , sMODULE_NAME        ,  25);
				IDbDataParameter parLIST_NAME         = Sql.AddParameter(cmd, "@LIST_NAME"        , sLIST_NAME          ,  50);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTERMINOLOGY_ALIASES_Update
		/// <summary>
		/// spTERMINOLOGY_ALIASES_Update
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_ALIASES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_ALIASES_Update";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parALIAS_NAME        = Sql.CreateParameter(cmd, "@ALIAS_NAME"       , "string",  50);
			IDbDataParameter parALIAS_MODULE_NAME = Sql.CreateParameter(cmd, "@ALIAS_MODULE_NAME", "string",  25);
			IDbDataParameter parALIAS_LIST_NAME   = Sql.CreateParameter(cmd, "@ALIAS_LIST_NAME"  , "string",  50);
			IDbDataParameter parNAME              = Sql.CreateParameter(cmd, "@NAME"             , "string",  50);
			IDbDataParameter parMODULE_NAME       = Sql.CreateParameter(cmd, "@MODULE_NAME"      , "string",  25);
			IDbDataParameter parLIST_NAME         = Sql.CreateParameter(cmd, "@LIST_NAME"        , "string",  50);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_Delete
		/// <summary>
		/// spTERMINOLOGY_Delete
		/// </summary>
		public void spTERMINOLOGY_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_Delete
		/// <summary>
		/// spTERMINOLOGY_Delete
		/// </summary>
		public void spTERMINOLOGY_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_Delete
		/// <summary>
		/// spTERMINOLOGY_Delete
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_DeleteAll
		/// <summary>
		/// spTERMINOLOGY_DeleteAll
		/// </summary>
		public void spTERMINOLOGY_DeleteAll(string sLANG)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_DeleteAll";
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_DeleteAll
		/// <summary>
		/// spTERMINOLOGY_DeleteAll
		/// </summary>
		public void spTERMINOLOGY_DeleteAll(string sLANG, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_DeleteAll";
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_DeleteAll
		/// <summary>
		/// spTERMINOLOGY_DeleteAll
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_DeleteAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_DeleteAll";
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_DeleteList
		/// <summary>
		/// spTERMINOLOGY_DeleteList
		/// </summary>
		public void spTERMINOLOGY_DeleteList(string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_DeleteList";
							IDbDataParameter parLIST_NAME = Sql.AddParameter(cmd, "@LIST_NAME", sLIST_NAME  ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_DeleteList
		/// <summary>
		/// spTERMINOLOGY_DeleteList
		/// </summary>
		public void spTERMINOLOGY_DeleteList(string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_DeleteList";
				IDbDataParameter parLIST_NAME = Sql.AddParameter(cmd, "@LIST_NAME", sLIST_NAME  ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_DeleteList
		/// <summary>
		/// spTERMINOLOGY_DeleteList
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_DeleteList(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_DeleteList";
			IDbDataParameter parLIST_NAME = Sql.CreateParameter(cmd, "@LIST_NAME", "string",  50);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_DeleteModule
		/// <summary>
		/// spTERMINOLOGY_DeleteModule
		/// </summary>
		public void spTERMINOLOGY_DeleteModule(string sMODULE_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_DeleteModule";
							IDbDataParameter parMODULE_NAME = Sql.AddParameter(cmd, "@MODULE_NAME", sMODULE_NAME  ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_DeleteModule
		/// <summary>
		/// spTERMINOLOGY_DeleteModule
		/// </summary>
		public void spTERMINOLOGY_DeleteModule(string sMODULE_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_DeleteModule";
				IDbDataParameter parMODULE_NAME = Sql.AddParameter(cmd, "@MODULE_NAME", sMODULE_NAME  ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_DeleteModule
		/// <summary>
		/// spTERMINOLOGY_DeleteModule
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_DeleteModule(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_DeleteModule";
			IDbDataParameter parMODULE_NAME = Sql.CreateParameter(cmd, "@MODULE_NAME", "string",  25);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_DeleteTerm
		/// <summary>
		/// spTERMINOLOGY_DeleteTerm
		/// </summary>
		public void spTERMINOLOGY_DeleteTerm(string sTERM)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_DeleteTerm";
							IDbDataParameter parTERM = Sql.AddParameter(cmd, "@TERM", sTERM  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_DeleteTerm
		/// <summary>
		/// spTERMINOLOGY_DeleteTerm
		/// </summary>
		public void spTERMINOLOGY_DeleteTerm(string sTERM, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_DeleteTerm";
				IDbDataParameter parTERM = Sql.AddParameter(cmd, "@TERM", sTERM  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_DeleteTerm
		/// <summary>
		/// spTERMINOLOGY_DeleteTerm
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_DeleteTerm(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_DeleteTerm";
			IDbDataParameter parTERM = Sql.CreateParameter(cmd, "@TERM", "string", 100);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_InsertOnly(string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_InsertOnly";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
							IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
							IDbDataParameter parLIST_NAME    = Sql.AddParameter(cmd, "@LIST_NAME"   , sLIST_NAME     ,  50);
							IDbDataParameter parLIST_ORDER   = Sql.AddParameter(cmd, "@LIST_ORDER"  , nLIST_ORDER    );
							IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_InsertOnly
		/// </summary>
		public void spTERMINOLOGY_InsertOnly(string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_InsertOnly";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
				IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
				IDbDataParameter parLIST_NAME    = Sql.AddParameter(cmd, "@LIST_NAME"   , sLIST_NAME     ,  50);
				IDbDataParameter parLIST_ORDER   = Sql.AddParameter(cmd, "@LIST_ORDER"  , nLIST_ORDER    );
				IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_InsertOnly
		/// <summary>
		/// spTERMINOLOGY_InsertOnly
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_InsertOnly";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string", 150);
			IDbDataParameter parLANG         = Sql.CreateParameter(cmd, "@LANG"        , "string",  10);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  25);
			IDbDataParameter parLIST_NAME    = Sql.CreateParameter(cmd, "@LIST_NAME"   , "string",  50);
			IDbDataParameter parLIST_ORDER   = Sql.CreateParameter(cmd, "@LIST_ORDER"  , "Int32",   4);
			IDbDataParameter parDISPLAY_NAME = Sql.CreateParameter(cmd, "@DISPLAY_NAME", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_Delete
		/// <summary>
		/// spTERMINOLOGY_LIST_Delete
		/// </summary>
		public void spTERMINOLOGY_LIST_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_Delete
		/// <summary>
		/// spTERMINOLOGY_LIST_Delete
		/// </summary>
		public void spTERMINOLOGY_LIST_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_Delete
		/// <summary>
		/// spTERMINOLOGY_LIST_Delete
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_Insert
		/// <summary>
		/// spTERMINOLOGY_LIST_Insert
		/// </summary>
		public void spTERMINOLOGY_LIST_Insert(ref Guid gID, string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
							IDbDataParameter parLIST_ORDER       = Sql.AddParameter(cmd, "@LIST_ORDER"      , nLIST_ORDER        );
							IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_Insert
		/// <summary>
		/// spTERMINOLOGY_LIST_Insert
		/// </summary>
		public void spTERMINOLOGY_LIST_Insert(ref Guid gID, string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 150);
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
				IDbDataParameter parLIST_ORDER       = Sql.AddParameter(cmd, "@LIST_ORDER"      , nLIST_ORDER        );
				IDbDataParameter parDISPLAY_NAME     = Sql.AddParameter(cmd, "@DISPLAY_NAME"    , sDISPLAY_NAME      );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_Insert
		/// <summary>
		/// spTERMINOLOGY_LIST_Insert
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 150);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parLIST_NAME        = Sql.CreateParameter(cmd, "@LIST_NAME"       , "string",  50);
			IDbDataParameter parLIST_ORDER       = Sql.CreateParameter(cmd, "@LIST_ORDER"      , "Int32",   4);
			IDbDataParameter parDISPLAY_NAME     = Sql.CreateParameter(cmd, "@DISPLAY_NAME"    , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveDown
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveDown
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveDown(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_MoveDown";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveDown
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveDown
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveDown(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_MoveDown";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_MoveDown
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveDown
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_MoveDown(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_MoveDown";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveItem
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveItem
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveItem(string sLANG, string sLIST_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_MoveItem";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
							IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
							IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveItem
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveItem
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveItem(string sLANG, string sLIST_NAME, Int32 nOLD_INDEX, Int32 nNEW_INDEX, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_MoveItem";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
				IDbDataParameter parOLD_INDEX        = Sql.AddParameter(cmd, "@OLD_INDEX"       , nOLD_INDEX         );
				IDbDataParameter parNEW_INDEX        = Sql.AddParameter(cmd, "@NEW_INDEX"       , nNEW_INDEX         );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_MoveItem
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveItem
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_MoveItem(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_MoveItem";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parLIST_NAME        = Sql.CreateParameter(cmd, "@LIST_NAME"       , "string",  50);
			IDbDataParameter parOLD_INDEX        = Sql.CreateParameter(cmd, "@OLD_INDEX"       , "Int32",   4);
			IDbDataParameter parNEW_INDEX        = Sql.CreateParameter(cmd, "@NEW_INDEX"       , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveUp
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveUp
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveUp(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_MoveUp";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_MoveUp
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveUp
		/// </summary>
		public void spTERMINOLOGY_LIST_MoveUp(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_MoveUp";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_MoveUp
		/// <summary>
		/// spTERMINOLOGY_LIST_MoveUp
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_MoveUp(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_MoveUp";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_Reorder
		/// <summary>
		/// spTERMINOLOGY_LIST_Reorder
		/// </summary>
		public void spTERMINOLOGY_LIST_Reorder(string sLANG, string sLIST_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_Reorder";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_Reorder
		/// <summary>
		/// spTERMINOLOGY_LIST_Reorder
		/// </summary>
		public void spTERMINOLOGY_LIST_Reorder(string sLANG, string sLIST_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_Reorder";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parLIST_NAME        = Sql.AddParameter(cmd, "@LIST_NAME"       , sLIST_NAME         ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_Reorder
		/// <summary>
		/// spTERMINOLOGY_LIST_Reorder
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_Reorder(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_Reorder";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parLIST_NAME        = Sql.CreateParameter(cmd, "@LIST_NAME"       , "string",  50);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_LIST_ReorderAll
		/// <summary>
		/// spTERMINOLOGY_LIST_ReorderAll
		/// </summary>
		public void spTERMINOLOGY_LIST_ReorderAll()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_LIST_ReorderAll";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_LIST_ReorderAll
		/// <summary>
		/// spTERMINOLOGY_LIST_ReorderAll
		/// </summary>
		public void spTERMINOLOGY_LIST_ReorderAll(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_LIST_ReorderAll";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_LIST_ReorderAll
		/// <summary>
		/// spTERMINOLOGY_LIST_ReorderAll
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_LIST_ReorderAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_LIST_ReorderAll";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_MassDelete
		/// <summary>
		/// spTERMINOLOGY_MassDelete
		/// </summary>
		public void spTERMINOLOGY_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_MassDelete
		/// <summary>
		/// spTERMINOLOGY_MassDelete
		/// </summary>
		public void spTERMINOLOGY_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_MassDelete
		/// <summary>
		/// spTERMINOLOGY_MassDelete
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTERMINOLOGY_Update
		/// <summary>
		/// spTERMINOLOGY_Update
		/// </summary>
		public void spTERMINOLOGY_Update(string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTERMINOLOGY_Update";
							IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
							IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
							IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
							IDbDataParameter parLIST_NAME    = Sql.AddParameter(cmd, "@LIST_NAME"   , sLIST_NAME     ,  50);
							IDbDataParameter parLIST_ORDER   = Sql.AddParameter(cmd, "@LIST_ORDER"  , nLIST_ORDER    );
							IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTERMINOLOGY_Update
		/// <summary>
		/// spTERMINOLOGY_Update
		/// </summary>
		public void spTERMINOLOGY_Update(string sNAME, string sLANG, string sMODULE_NAME, string sLIST_NAME, Int32 nLIST_ORDER, string sDISPLAY_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTERMINOLOGY_Update";
				IDbDataParameter parNAME         = Sql.AddParameter(cmd, "@NAME"        , sNAME          , 150);
				IDbDataParameter parLANG         = Sql.AddParameter(cmd, "@LANG"        , sLANG          ,  10);
				IDbDataParameter parMODULE_NAME  = Sql.AddParameter(cmd, "@MODULE_NAME" , sMODULE_NAME   ,  25);
				IDbDataParameter parLIST_NAME    = Sql.AddParameter(cmd, "@LIST_NAME"   , sLIST_NAME     ,  50);
				IDbDataParameter parLIST_ORDER   = Sql.AddParameter(cmd, "@LIST_ORDER"  , nLIST_ORDER    );
				IDbDataParameter parDISPLAY_NAME = Sql.AddParameter(cmd, "@DISPLAY_NAME", sDISPLAY_NAME  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTERMINOLOGY_Update
		/// <summary>
		/// spTERMINOLOGY_Update
		/// </summary>
		public IDbCommand cmdTERMINOLOGY_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTERMINOLOGY_Update";
			IDbDataParameter parNAME         = Sql.CreateParameter(cmd, "@NAME"        , "string", 150);
			IDbDataParameter parLANG         = Sql.CreateParameter(cmd, "@LANG"        , "string",  10);
			IDbDataParameter parMODULE_NAME  = Sql.CreateParameter(cmd, "@MODULE_NAME" , "string",  25);
			IDbDataParameter parLIST_NAME    = Sql.CreateParameter(cmd, "@LIST_NAME"   , "string",  50);
			IDbDataParameter parLIST_ORDER   = Sql.CreateParameter(cmd, "@LIST_ORDER"  , "Int32",   4);
			IDbDataParameter parDISPLAY_NAME = Sql.CreateParameter(cmd, "@DISPLAY_NAME", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spTIMEZONES_Delete
		/// <summary>
		/// spTIMEZONES_Delete
		/// </summary>
		public void spTIMEZONES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTIMEZONES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTIMEZONES_Delete
		/// <summary>
		/// spTIMEZONES_Delete
		/// </summary>
		public void spTIMEZONES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTIMEZONES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTIMEZONES_Delete
		/// <summary>
		/// spTIMEZONES_Delete
		/// </summary>
		public IDbCommand cmdTIMEZONES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTIMEZONES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTIMEZONES_InsertOnly
		/// <summary>
		/// spTIMEZONES_InsertOnly
		/// </summary>
		public void spTIMEZONES_InsertOnly(Guid gID, string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, string sTZID, string sLINKED_TIMEZONE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTIMEZONES_InsertOnly";
							IDbDataParameter parID                    = Sql.AddParameter(cmd, "@ID"                   , gID                     );
							IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
							IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
							IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
							IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
							IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
							IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
							IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
							IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
							IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
							IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
							IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
							IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
							IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
							IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
							IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
							IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
							IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
							IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
							IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
							IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
							IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
							IDbDataParameter parTZID                  = Sql.AddParameter(cmd, "@TZID"                 , sTZID                   ,  50);
							IDbDataParameter parLINKED_TIMEZONE       = Sql.AddParameter(cmd, "@LINKED_TIMEZONE"      , sLINKED_TIMEZONE        ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTIMEZONES_InsertOnly
		/// <summary>
		/// spTIMEZONES_InsertOnly
		/// </summary>
		public void spTIMEZONES_InsertOnly(Guid gID, string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, string sTZID, string sLINKED_TIMEZONE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTIMEZONES_InsertOnly";
				IDbDataParameter parID                    = Sql.AddParameter(cmd, "@ID"                   , gID                     );
				IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
				IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
				IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
				IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
				IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
				IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
				IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
				IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
				IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
				IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
				IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
				IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
				IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
				IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
				IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
				IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
				IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
				IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
				IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
				IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
				IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
				IDbDataParameter parTZID                  = Sql.AddParameter(cmd, "@TZID"                 , sTZID                   ,  50);
				IDbDataParameter parLINKED_TIMEZONE       = Sql.AddParameter(cmd, "@LINKED_TIMEZONE"      , sLINKED_TIMEZONE        ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTIMEZONES_InsertOnly
		/// <summary>
		/// spTIMEZONES_InsertOnly
		/// </summary>
		public IDbCommand cmdTIMEZONES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTIMEZONES_InsertOnly";
			IDbDataParameter parID                    = Sql.CreateParameter(cmd, "@ID"                   , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID      = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"     , "Guid",  16);
			IDbDataParameter parNAME                  = Sql.CreateParameter(cmd, "@NAME"                 , "string", 100);
			IDbDataParameter parSTANDARD_NAME         = Sql.CreateParameter(cmd, "@STANDARD_NAME"        , "string", 100);
			IDbDataParameter parSTANDARD_ABBREVIATION = Sql.CreateParameter(cmd, "@STANDARD_ABBREVIATION", "string",  10);
			IDbDataParameter parDAYLIGHT_NAME         = Sql.CreateParameter(cmd, "@DAYLIGHT_NAME"        , "string", 100);
			IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.CreateParameter(cmd, "@DAYLIGHT_ABBREVIATION", "string",  10);
			IDbDataParameter parBIAS                  = Sql.CreateParameter(cmd, "@BIAS"                 , "Int32",   4);
			IDbDataParameter parSTANDARD_BIAS         = Sql.CreateParameter(cmd, "@STANDARD_BIAS"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_BIAS         = Sql.CreateParameter(cmd, "@DAYLIGHT_BIAS"        , "Int32",   4);
			IDbDataParameter parSTANDARD_YEAR         = Sql.CreateParameter(cmd, "@STANDARD_YEAR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MONTH        = Sql.CreateParameter(cmd, "@STANDARD_MONTH"       , "Int32",   4);
			IDbDataParameter parSTANDARD_WEEK         = Sql.CreateParameter(cmd, "@STANDARD_WEEK"        , "Int32",   4);
			IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.CreateParameter(cmd, "@STANDARD_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parSTANDARD_HOUR         = Sql.CreateParameter(cmd, "@STANDARD_HOUR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MINUTE       = Sql.CreateParameter(cmd, "@STANDARD_MINUTE"      , "Int32",   4);
			IDbDataParameter parDAYLIGHT_YEAR         = Sql.CreateParameter(cmd, "@DAYLIGHT_YEAR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MONTH        = Sql.CreateParameter(cmd, "@DAYLIGHT_MONTH"       , "Int32",   4);
			IDbDataParameter parDAYLIGHT_WEEK         = Sql.CreateParameter(cmd, "@DAYLIGHT_WEEK"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.CreateParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parDAYLIGHT_HOUR         = Sql.CreateParameter(cmd, "@DAYLIGHT_HOUR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MINUTE       = Sql.CreateParameter(cmd, "@DAYLIGHT_MINUTE"      , "Int32",   4);
			IDbDataParameter parTZID                  = Sql.CreateParameter(cmd, "@TZID"                 , "string",  50);
			IDbDataParameter parLINKED_TIMEZONE       = Sql.CreateParameter(cmd, "@LINKED_TIMEZONE"      , "string",  50);
			return cmd;
		}
		#endregion

		#region spTIMEZONES_Update
		/// <summary>
		/// spTIMEZONES_Update
		/// </summary>
		public void spTIMEZONES_Update(ref Guid gID, string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, string sTZID, string sLINKED_TIMEZONE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTIMEZONES_Update";
							IDbDataParameter parID                    = Sql.AddParameter(cmd, "@ID"                   , gID                     );
							IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
							IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
							IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
							IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
							IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
							IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
							IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
							IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
							IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
							IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
							IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
							IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
							IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
							IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
							IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
							IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
							IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
							IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
							IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
							IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
							IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
							IDbDataParameter parTZID                  = Sql.AddParameter(cmd, "@TZID"                 , sTZID                   ,  50);
							IDbDataParameter parLINKED_TIMEZONE       = Sql.AddParameter(cmd, "@LINKED_TIMEZONE"      , sLINKED_TIMEZONE        ,  50);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTIMEZONES_Update
		/// <summary>
		/// spTIMEZONES_Update
		/// </summary>
		public void spTIMEZONES_Update(ref Guid gID, string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, string sTZID, string sLINKED_TIMEZONE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTIMEZONES_Update";
				IDbDataParameter parID                    = Sql.AddParameter(cmd, "@ID"                   , gID                     );
				IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
				IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
				IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
				IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
				IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
				IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
				IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
				IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
				IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
				IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
				IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
				IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
				IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
				IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
				IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
				IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
				IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
				IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
				IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
				IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
				IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
				IDbDataParameter parTZID                  = Sql.AddParameter(cmd, "@TZID"                 , sTZID                   ,  50);
				IDbDataParameter parLINKED_TIMEZONE       = Sql.AddParameter(cmd, "@LINKED_TIMEZONE"      , sLINKED_TIMEZONE        ,  50);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdTIMEZONES_Update
		/// <summary>
		/// spTIMEZONES_Update
		/// </summary>
		public IDbCommand cmdTIMEZONES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTIMEZONES_Update";
			IDbDataParameter parID                    = Sql.CreateParameter(cmd, "@ID"                   , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID      = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"     , "Guid",  16);
			IDbDataParameter parNAME                  = Sql.CreateParameter(cmd, "@NAME"                 , "string", 100);
			IDbDataParameter parSTANDARD_NAME         = Sql.CreateParameter(cmd, "@STANDARD_NAME"        , "string", 100);
			IDbDataParameter parSTANDARD_ABBREVIATION = Sql.CreateParameter(cmd, "@STANDARD_ABBREVIATION", "string",  10);
			IDbDataParameter parDAYLIGHT_NAME         = Sql.CreateParameter(cmd, "@DAYLIGHT_NAME"        , "string", 100);
			IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.CreateParameter(cmd, "@DAYLIGHT_ABBREVIATION", "string",  10);
			IDbDataParameter parBIAS                  = Sql.CreateParameter(cmd, "@BIAS"                 , "Int32",   4);
			IDbDataParameter parSTANDARD_BIAS         = Sql.CreateParameter(cmd, "@STANDARD_BIAS"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_BIAS         = Sql.CreateParameter(cmd, "@DAYLIGHT_BIAS"        , "Int32",   4);
			IDbDataParameter parSTANDARD_YEAR         = Sql.CreateParameter(cmd, "@STANDARD_YEAR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MONTH        = Sql.CreateParameter(cmd, "@STANDARD_MONTH"       , "Int32",   4);
			IDbDataParameter parSTANDARD_WEEK         = Sql.CreateParameter(cmd, "@STANDARD_WEEK"        , "Int32",   4);
			IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.CreateParameter(cmd, "@STANDARD_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parSTANDARD_HOUR         = Sql.CreateParameter(cmd, "@STANDARD_HOUR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MINUTE       = Sql.CreateParameter(cmd, "@STANDARD_MINUTE"      , "Int32",   4);
			IDbDataParameter parDAYLIGHT_YEAR         = Sql.CreateParameter(cmd, "@DAYLIGHT_YEAR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MONTH        = Sql.CreateParameter(cmd, "@DAYLIGHT_MONTH"       , "Int32",   4);
			IDbDataParameter parDAYLIGHT_WEEK         = Sql.CreateParameter(cmd, "@DAYLIGHT_WEEK"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.CreateParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parDAYLIGHT_HOUR         = Sql.CreateParameter(cmd, "@DAYLIGHT_HOUR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MINUTE       = Sql.CreateParameter(cmd, "@DAYLIGHT_MINUTE"      , "Int32",   4);
			IDbDataParameter parTZID                  = Sql.CreateParameter(cmd, "@TZID"                 , "string",  50);
			IDbDataParameter parLINKED_TIMEZONE       = Sql.CreateParameter(cmd, "@LINKED_TIMEZONE"      , "string",  50);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spTIMEZONES_UpdateByName
		/// <summary>
		/// spTIMEZONES_UpdateByName
		/// </summary>
		public void spTIMEZONES_UpdateByName(string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTIMEZONES_UpdateByName";
							IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
							IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
							IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
							IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
							IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
							IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
							IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
							IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
							IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
							IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
							IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
							IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
							IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
							IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
							IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
							IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
							IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
							IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
							IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
							IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
							IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTIMEZONES_UpdateByName
		/// <summary>
		/// spTIMEZONES_UpdateByName
		/// </summary>
		public void spTIMEZONES_UpdateByName(string sNAME, string sSTANDARD_NAME, string sSTANDARD_ABBREVIATION, string sDAYLIGHT_NAME, string sDAYLIGHT_ABBREVIATION, Int32 nBIAS, Int32 nSTANDARD_BIAS, Int32 nDAYLIGHT_BIAS, Int32 nSTANDARD_YEAR, Int32 nSTANDARD_MONTH, Int32 nSTANDARD_WEEK, Int32 nSTANDARD_DAYOFWEEK, Int32 nSTANDARD_HOUR, Int32 nSTANDARD_MINUTE, Int32 nDAYLIGHT_YEAR, Int32 nDAYLIGHT_MONTH, Int32 nDAYLIGHT_WEEK, Int32 nDAYLIGHT_DAYOFWEEK, Int32 nDAYLIGHT_HOUR, Int32 nDAYLIGHT_MINUTE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTIMEZONES_UpdateByName";
				IDbDataParameter parMODIFIED_USER_ID      = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"     ,  Security.USER_ID       );
				IDbDataParameter parNAME                  = Sql.AddParameter(cmd, "@NAME"                 , sNAME                   , 100);
				IDbDataParameter parSTANDARD_NAME         = Sql.AddParameter(cmd, "@STANDARD_NAME"        , sSTANDARD_NAME          , 100);
				IDbDataParameter parSTANDARD_ABBREVIATION = Sql.AddParameter(cmd, "@STANDARD_ABBREVIATION", sSTANDARD_ABBREVIATION  ,  10);
				IDbDataParameter parDAYLIGHT_NAME         = Sql.AddParameter(cmd, "@DAYLIGHT_NAME"        , sDAYLIGHT_NAME          , 100);
				IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.AddParameter(cmd, "@DAYLIGHT_ABBREVIATION", sDAYLIGHT_ABBREVIATION  ,  10);
				IDbDataParameter parBIAS                  = Sql.AddParameter(cmd, "@BIAS"                 , nBIAS                   );
				IDbDataParameter parSTANDARD_BIAS         = Sql.AddParameter(cmd, "@STANDARD_BIAS"        , nSTANDARD_BIAS          );
				IDbDataParameter parDAYLIGHT_BIAS         = Sql.AddParameter(cmd, "@DAYLIGHT_BIAS"        , nDAYLIGHT_BIAS          );
				IDbDataParameter parSTANDARD_YEAR         = Sql.AddParameter(cmd, "@STANDARD_YEAR"        , nSTANDARD_YEAR          );
				IDbDataParameter parSTANDARD_MONTH        = Sql.AddParameter(cmd, "@STANDARD_MONTH"       , nSTANDARD_MONTH         );
				IDbDataParameter parSTANDARD_WEEK         = Sql.AddParameter(cmd, "@STANDARD_WEEK"        , nSTANDARD_WEEK          );
				IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.AddParameter(cmd, "@STANDARD_DAYOFWEEK"   , nSTANDARD_DAYOFWEEK     );
				IDbDataParameter parSTANDARD_HOUR         = Sql.AddParameter(cmd, "@STANDARD_HOUR"        , nSTANDARD_HOUR          );
				IDbDataParameter parSTANDARD_MINUTE       = Sql.AddParameter(cmd, "@STANDARD_MINUTE"      , nSTANDARD_MINUTE        );
				IDbDataParameter parDAYLIGHT_YEAR         = Sql.AddParameter(cmd, "@DAYLIGHT_YEAR"        , nDAYLIGHT_YEAR          );
				IDbDataParameter parDAYLIGHT_MONTH        = Sql.AddParameter(cmd, "@DAYLIGHT_MONTH"       , nDAYLIGHT_MONTH         );
				IDbDataParameter parDAYLIGHT_WEEK         = Sql.AddParameter(cmd, "@DAYLIGHT_WEEK"        , nDAYLIGHT_WEEK          );
				IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.AddParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , nDAYLIGHT_DAYOFWEEK     );
				IDbDataParameter parDAYLIGHT_HOUR         = Sql.AddParameter(cmd, "@DAYLIGHT_HOUR"        , nDAYLIGHT_HOUR          );
				IDbDataParameter parDAYLIGHT_MINUTE       = Sql.AddParameter(cmd, "@DAYLIGHT_MINUTE"      , nDAYLIGHT_MINUTE        );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTIMEZONES_UpdateByName
		/// <summary>
		/// spTIMEZONES_UpdateByName
		/// </summary>
		public IDbCommand cmdTIMEZONES_UpdateByName(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTIMEZONES_UpdateByName";
			IDbDataParameter parMODIFIED_USER_ID      = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"     , "Guid",  16);
			IDbDataParameter parNAME                  = Sql.CreateParameter(cmd, "@NAME"                 , "string", 100);
			IDbDataParameter parSTANDARD_NAME         = Sql.CreateParameter(cmd, "@STANDARD_NAME"        , "string", 100);
			IDbDataParameter parSTANDARD_ABBREVIATION = Sql.CreateParameter(cmd, "@STANDARD_ABBREVIATION", "string",  10);
			IDbDataParameter parDAYLIGHT_NAME         = Sql.CreateParameter(cmd, "@DAYLIGHT_NAME"        , "string", 100);
			IDbDataParameter parDAYLIGHT_ABBREVIATION = Sql.CreateParameter(cmd, "@DAYLIGHT_ABBREVIATION", "string",  10);
			IDbDataParameter parBIAS                  = Sql.CreateParameter(cmd, "@BIAS"                 , "Int32",   4);
			IDbDataParameter parSTANDARD_BIAS         = Sql.CreateParameter(cmd, "@STANDARD_BIAS"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_BIAS         = Sql.CreateParameter(cmd, "@DAYLIGHT_BIAS"        , "Int32",   4);
			IDbDataParameter parSTANDARD_YEAR         = Sql.CreateParameter(cmd, "@STANDARD_YEAR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MONTH        = Sql.CreateParameter(cmd, "@STANDARD_MONTH"       , "Int32",   4);
			IDbDataParameter parSTANDARD_WEEK         = Sql.CreateParameter(cmd, "@STANDARD_WEEK"        , "Int32",   4);
			IDbDataParameter parSTANDARD_DAYOFWEEK    = Sql.CreateParameter(cmd, "@STANDARD_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parSTANDARD_HOUR         = Sql.CreateParameter(cmd, "@STANDARD_HOUR"        , "Int32",   4);
			IDbDataParameter parSTANDARD_MINUTE       = Sql.CreateParameter(cmd, "@STANDARD_MINUTE"      , "Int32",   4);
			IDbDataParameter parDAYLIGHT_YEAR         = Sql.CreateParameter(cmd, "@DAYLIGHT_YEAR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MONTH        = Sql.CreateParameter(cmd, "@DAYLIGHT_MONTH"       , "Int32",   4);
			IDbDataParameter parDAYLIGHT_WEEK         = Sql.CreateParameter(cmd, "@DAYLIGHT_WEEK"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_DAYOFWEEK    = Sql.CreateParameter(cmd, "@DAYLIGHT_DAYOFWEEK"   , "Int32",   4);
			IDbDataParameter parDAYLIGHT_HOUR         = Sql.CreateParameter(cmd, "@DAYLIGHT_HOUR"        , "Int32",   4);
			IDbDataParameter parDAYLIGHT_MINUTE       = Sql.CreateParameter(cmd, "@DAYLIGHT_MINUTE"      , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spTRACKER_Delete
		/// <summary>
		/// spTRACKER_Delete
		/// </summary>
		public void spTRACKER_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTRACKER_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTRACKER_Delete
		/// <summary>
		/// spTRACKER_Delete
		/// </summary>
		public void spTRACKER_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTRACKER_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTRACKER_Delete
		/// <summary>
		/// spTRACKER_Delete
		/// </summary>
		public IDbCommand cmdTRACKER_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTRACKER_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spTRACKER_Update
		/// <summary>
		/// spTRACKER_Update
		/// </summary>
		public void spTRACKER_Update(Guid gUSER_ID, string sMODULE_NAME, Guid gITEM_ID, string sITEM_SUMMARY, string sACTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spTRACKER_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
							IDbDataParameter parITEM_ID          = Sql.AddParameter(cmd, "@ITEM_ID"         , gITEM_ID           );
							IDbDataParameter parITEM_SUMMARY     = Sql.AddParameter(cmd, "@ITEM_SUMMARY"    , sITEM_SUMMARY      , 255);
							IDbDataParameter parACTION           = Sql.AddParameter(cmd, "@ACTION"          , sACTION            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spTRACKER_Update
		/// <summary>
		/// spTRACKER_Update
		/// </summary>
		public void spTRACKER_Update(Guid gUSER_ID, string sMODULE_NAME, Guid gITEM_ID, string sITEM_SUMMARY, string sACTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spTRACKER_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parMODULE_NAME      = Sql.AddParameter(cmd, "@MODULE_NAME"     , sMODULE_NAME       ,  25);
				IDbDataParameter parITEM_ID          = Sql.AddParameter(cmd, "@ITEM_ID"         , gITEM_ID           );
				IDbDataParameter parITEM_SUMMARY     = Sql.AddParameter(cmd, "@ITEM_SUMMARY"    , sITEM_SUMMARY      , 255);
				IDbDataParameter parACTION           = Sql.AddParameter(cmd, "@ACTION"          , sACTION            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdTRACKER_Update
		/// <summary>
		/// spTRACKER_Update
		/// </summary>
		public IDbCommand cmdTRACKER_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spTRACKER_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parMODULE_NAME      = Sql.CreateParameter(cmd, "@MODULE_NAME"     , "string",  25);
			IDbDataParameter parITEM_ID          = Sql.CreateParameter(cmd, "@ITEM_ID"         , "Guid",  16);
			IDbDataParameter parITEM_SUMMARY     = Sql.CreateParameter(cmd, "@ITEM_SUMMARY"    , "string", 255);
			IDbDataParameter parACTION           = Sql.CreateParameter(cmd, "@ACTION"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_CONTENT_Update
		/// <summary>
		/// spUSER_PREFERENCES_CONTENT_Update
		/// </summary>
		public void spUSER_PREFERENCES_CONTENT_Update(Guid gID, byte[] binCONTENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Upd";
							else
								cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Update";
							IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
							IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_CONTENT_Update
		/// <summary>
		/// spUSER_PREFERENCES_CONTENT_Update
		/// </summary>
		public void spUSER_PREFERENCES_CONTENT_Update(Guid gID, byte[] binCONTENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Upd";
				else
					cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Update";
				IDbDataParameter parID      = Sql.AddParameter(cmd, "@ID"     , gID       );
				IDbDataParameter parCONTENT = Sql.AddParameter(cmd, "@CONTENT", binCONTENT);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_CONTENT_Update
		/// <summary>
		/// spUSER_PREFERENCES_CONTENT_Update
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_CONTENT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Upd";
			else
				cmd.CommandText = "spUSER_PREFERENCES_CONTENT_Update";
			IDbDataParameter parID      = Sql.CreateParameter(cmd, "@ID"     , "Guid",  16);
			IDbDataParameter parCONTENT = Sql.CreateParameter(cmd, "@CONTENT", "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_Delete
		/// <summary>
		/// spUSER_PREFERENCES_Delete
		/// </summary>
		public void spUSER_PREFERENCES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_Delete
		/// <summary>
		/// spUSER_PREFERENCES_Delete
		/// </summary>
		public void spUSER_PREFERENCES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_Delete
		/// <summary>
		/// spUSER_PREFERENCES_Delete
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_DeleteByUser
		/// <summary>
		/// spUSER_PREFERENCES_DeleteByUser
		/// </summary>
		public void spUSER_PREFERENCES_DeleteByUser(string sUSER_NAME, string sCATEGORY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSER_PREFERENCES_DeleteByUse";
							else
								cmd.CommandText = "spUSER_PREFERENCES_DeleteByUser";
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_DeleteByUser
		/// <summary>
		/// spUSER_PREFERENCES_DeleteByUser
		/// </summary>
		public void spUSER_PREFERENCES_DeleteByUser(string sUSER_NAME, string sCATEGORY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSER_PREFERENCES_DeleteByUse";
				else
					cmd.CommandText = "spUSER_PREFERENCES_DeleteByUser";
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_DeleteByUser
		/// <summary>
		/// spUSER_PREFERENCES_DeleteByUser
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_DeleteByUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSER_PREFERENCES_DeleteByUse";
			else
				cmd.CommandText = "spUSER_PREFERENCES_DeleteByUser";
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  60);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 255);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_InitPointer
		/// <summary>
		/// spUSER_PREFERENCES_InitPointer
		/// </summary>
		public void spUSER_PREFERENCES_InitPointer(Guid gID, ref byte[] binFILE_POINTER)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_InitPointer";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							parFILE_POINTER.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_InitPointer
		/// <summary>
		/// spUSER_PREFERENCES_InitPointer
		/// </summary>
		public void spUSER_PREFERENCES_InitPointer(Guid gID, ref byte[] binFILE_POINTER, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_InitPointer";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				parFILE_POINTER.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binFILE_POINTER = Sql.ToBinary(parFILE_POINTER.Value);
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_InitPointer
		/// <summary>
		/// spUSER_PREFERENCES_InitPointer
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_InitPointer(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_InitPointer";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			parFILE_POINTER.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_Insert
		/// <summary>
		/// spUSER_PREFERENCES_Insert
		/// </summary>
		public void spUSER_PREFERENCES_Insert(ref Guid gID, Guid gASSIGNED_USER_ID, string sCATEGORY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_Insert";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_Insert
		/// <summary>
		/// spUSER_PREFERENCES_Insert
		/// </summary>
		public void spUSER_PREFERENCES_Insert(ref Guid gID, Guid gASSIGNED_USER_ID, string sCATEGORY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_Insert";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_Insert
		/// <summary>
		/// spUSER_PREFERENCES_Insert
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_Insert(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_Insert";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 255);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_InsertByUser
		/// <summary>
		/// spUSER_PREFERENCES_InsertByUser
		/// </summary>
		public void spUSER_PREFERENCES_InsertByUser(ref Guid gID, string sUSER_NAME, string sCATEGORY)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSER_PREFERENCES_InsertByUse";
							else
								cmd.CommandText = "spUSER_PREFERENCES_InsertByUser";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
							IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_InsertByUser
		/// <summary>
		/// spUSER_PREFERENCES_InsertByUser
		/// </summary>
		public void spUSER_PREFERENCES_InsertByUser(ref Guid gID, string sUSER_NAME, string sCATEGORY, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSER_PREFERENCES_InsertByUse";
				else
					cmd.CommandText = "spUSER_PREFERENCES_InsertByUser";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
				IDbDataParameter parCATEGORY         = Sql.AddParameter(cmd, "@CATEGORY"        , sCATEGORY          , 255);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_InsertByUser
		/// <summary>
		/// spUSER_PREFERENCES_InsertByUser
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_InsertByUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSER_PREFERENCES_InsertByUse";
			else
				cmd.CommandText = "spUSER_PREFERENCES_InsertByUser";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  60);
			IDbDataParameter parCATEGORY         = Sql.CreateParameter(cmd, "@CATEGORY"        , "string", 255);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_ReadOffset
		/// <summary>
		/// spUSER_PREFERENCES_ReadOffset
		/// </summary>
		public void spUSER_PREFERENCES_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_ReadOffset";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
							IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
							IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
							parBYTES.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							binBYTES = Sql.ToBinary(parBYTES.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_ReadOffset
		/// <summary>
		/// spUSER_PREFERENCES_ReadOffset
		/// </summary>
		public void spUSER_PREFERENCES_ReadOffset(Guid gID, Int32 nFILE_OFFSET, Int32 nREAD_SIZE, ref byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_ReadOffset";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parFILE_OFFSET = Sql.AddParameter(cmd, "@FILE_OFFSET", nFILE_OFFSET  );
				IDbDataParameter parREAD_SIZE   = Sql.AddParameter(cmd, "@READ_SIZE"  , nREAD_SIZE    );
				IDbDataParameter parBYTES       = Sql.AddParameter(cmd, "@BYTES"      , binBYTES      );
				parBYTES.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				binBYTES = Sql.ToBinary(parBYTES.Value);
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_ReadOffset
		/// <summary>
		/// spUSER_PREFERENCES_ReadOffset
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_ReadOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_ReadOffset";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parFILE_OFFSET = Sql.CreateParameter(cmd, "@FILE_OFFSET", "Int32",   4);
			IDbDataParameter parREAD_SIZE   = Sql.CreateParameter(cmd, "@READ_SIZE"  , "Int32",   4);
			IDbDataParameter parBYTES       = Sql.CreateParameter(cmd, "@BYTES"      , "byte[]", 104857600);
			parBYTES.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSER_PREFERENCES_WriteOffset
		/// <summary>
		/// spUSER_PREFERENCES_WriteOffset
		/// </summary>
		public void spUSER_PREFERENCES_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSER_PREFERENCES_WriteOffset";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
							IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSER_PREFERENCES_WriteOffset
		/// <summary>
		/// spUSER_PREFERENCES_WriteOffset
		/// </summary>
		public void spUSER_PREFERENCES_WriteOffset(Guid gID, byte[] binFILE_POINTER, Int32 nFILE_OFFSET, byte[] binBYTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSER_PREFERENCES_WriteOffset";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parFILE_POINTER     = Sql.AddParameter(cmd, "@FILE_POINTER"    , binFILE_POINTER    );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parFILE_OFFSET      = Sql.AddParameter(cmd, "@FILE_OFFSET"     , nFILE_OFFSET       );
				IDbDataParameter parBYTES            = Sql.AddParameter(cmd, "@BYTES"           , binBYTES           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSER_PREFERENCES_WriteOffset
		/// <summary>
		/// spUSER_PREFERENCES_WriteOffset
		/// </summary>
		public IDbCommand cmdUSER_PREFERENCES_WriteOffset(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSER_PREFERENCES_WriteOffset";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parFILE_POINTER     = Sql.CreateParameter(cmd, "@FILE_POINTER"    , "byte[]",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parFILE_OFFSET      = Sql.CreateParameter(cmd, "@FILE_OFFSET"     , "Int32",   4);
			IDbDataParameter parBYTES            = Sql.CreateParameter(cmd, "@BYTES"           , "byte[]", 104857600);
			return cmd;
		}
		#endregion

		#region spUSERS_ACL_ROLES_Delete
		/// <summary>
		/// spUSERS_ACL_ROLES_Delete
		/// </summary>
		public void spUSERS_ACL_ROLES_Delete(Guid gUSER_ID, Guid gACL_ROLE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_ACL_ROLES_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parACL_ROLE_ID      = Sql.AddParameter(cmd, "@ACL_ROLE_ID"     , gACL_ROLE_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_ACL_ROLES_Delete
		/// <summary>
		/// spUSERS_ACL_ROLES_Delete
		/// </summary>
		public void spUSERS_ACL_ROLES_Delete(Guid gUSER_ID, Guid gACL_ROLE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_ACL_ROLES_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parACL_ROLE_ID      = Sql.AddParameter(cmd, "@ACL_ROLE_ID"     , gACL_ROLE_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_ACL_ROLES_Delete
		/// <summary>
		/// spUSERS_ACL_ROLES_Delete
		/// </summary>
		public IDbCommand cmdUSERS_ACL_ROLES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_ACL_ROLES_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parACL_ROLE_ID      = Sql.CreateParameter(cmd, "@ACL_ROLE_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_ACL_ROLES_MassUpdate
		/// <summary>
		/// spUSERS_ACL_ROLES_MassUpdate
		/// </summary>
		public void spUSERS_ACL_ROLES_MassUpdate(Guid gUSER_ID, string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_ACL_ROLES_MassUpdate";
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_ACL_ROLES_MassUpdate
		/// <summary>
		/// spUSERS_ACL_ROLES_MassUpdate
		/// </summary>
		public void spUSERS_ACL_ROLES_MassUpdate(Guid gUSER_ID, string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_ACL_ROLES_MassUpdate";
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_ACL_ROLES_MassUpdate
		/// <summary>
		/// spUSERS_ACL_ROLES_MassUpdate
		/// </summary>
		public IDbCommand cmdUSERS_ACL_ROLES_MassUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_ACL_ROLES_MassUpdate";
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			return cmd;
		}
		#endregion

		#region spUSERS_ACL_ROLES_Update
		/// <summary>
		/// spUSERS_ACL_ROLES_Update
		/// </summary>
		public void spUSERS_ACL_ROLES_Update(Guid gUSER_ID, Guid gACL_ROLE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_ACL_ROLES_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parACL_ROLE_ID      = Sql.AddParameter(cmd, "@ACL_ROLE_ID"     , gACL_ROLE_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_ACL_ROLES_Update
		/// <summary>
		/// spUSERS_ACL_ROLES_Update
		/// </summary>
		public void spUSERS_ACL_ROLES_Update(Guid gUSER_ID, Guid gACL_ROLE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_ACL_ROLES_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parACL_ROLE_ID      = Sql.AddParameter(cmd, "@ACL_ROLE_ID"     , gACL_ROLE_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_ACL_ROLES_Update
		/// <summary>
		/// spUSERS_ACL_ROLES_Update
		/// </summary>
		public IDbCommand cmdUSERS_ACL_ROLES_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_ACL_ROLES_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parACL_ROLE_ID      = Sql.CreateParameter(cmd, "@ACL_ROLE_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_Delete
		/// <summary>
		/// spUSERS_Delete
		/// </summary>
		public void spUSERS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_Delete
		/// <summary>
		/// spUSERS_Delete
		/// </summary>
		public void spUSERS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_Delete
		/// <summary>
		/// spUSERS_Delete
		/// </summary>
		public IDbCommand cmdUSERS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_FEEDS_Delete
		/// <summary>
		/// spUSERS_FEEDS_Delete
		/// </summary>
		public void spUSERS_FEEDS_Delete(Guid gUSER_ID, Guid gFEED_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_FEEDS_Delete";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parFEED_ID          = Sql.AddParameter(cmd, "@FEED_ID"         , gFEED_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_FEEDS_Delete
		/// <summary>
		/// spUSERS_FEEDS_Delete
		/// </summary>
		public void spUSERS_FEEDS_Delete(Guid gUSER_ID, Guid gFEED_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_FEEDS_Delete";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parFEED_ID          = Sql.AddParameter(cmd, "@FEED_ID"         , gFEED_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_FEEDS_Delete
		/// <summary>
		/// spUSERS_FEEDS_Delete
		/// </summary>
		public IDbCommand cmdUSERS_FEEDS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_FEEDS_Delete";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parFEED_ID          = Sql.CreateParameter(cmd, "@FEED_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_FEEDS_Update
		/// <summary>
		/// spUSERS_FEEDS_Update
		/// </summary>
		public void spUSERS_FEEDS_Update(Guid gUSER_ID, Guid gFEED_ID, Int32 nRANK)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_FEEDS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parFEED_ID          = Sql.AddParameter(cmd, "@FEED_ID"         , gFEED_ID           );
							IDbDataParameter parRANK             = Sql.AddParameter(cmd, "@RANK"            , nRANK              );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_FEEDS_Update
		/// <summary>
		/// spUSERS_FEEDS_Update
		/// </summary>
		public void spUSERS_FEEDS_Update(Guid gUSER_ID, Guid gFEED_ID, Int32 nRANK, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_FEEDS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parFEED_ID          = Sql.AddParameter(cmd, "@FEED_ID"         , gFEED_ID           );
				IDbDataParameter parRANK             = Sql.AddParameter(cmd, "@RANK"            , nRANK              );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_FEEDS_Update
		/// <summary>
		/// spUSERS_FEEDS_Update
		/// </summary>
		public IDbCommand cmdUSERS_FEEDS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_FEEDS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parFEED_ID          = Sql.CreateParameter(cmd, "@FEED_ID"         , "Guid",  16);
			IDbDataParameter parRANK             = Sql.CreateParameter(cmd, "@RANK"            , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spUSERS_Import
		/// <summary>
		/// spUSERS_Import
		/// </summary>
		public void spUSERS_Import(ref Guid gID, string sUSER_NAME, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, string sREPORTS_TO_NAME, Guid gTEAM_ID, string sTEAM_NAME, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sSTATUS, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE, string sPARENT_TYPE, Guid gPARENT_ID, string sTHEME, string sLANGUAGE, string sDATE_FORMAT, string sTIME_FORMAT, Guid gTIMEZONE_ID, Guid gCURRENCY_ID, string sEXTENSION, string sSMS_OPT_IN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_Import";
							IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
							IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
							IDbDataParameter parUSER_NAME          = Sql.AddParameter(cmd, "@USER_NAME"         , sUSER_NAME           ,  60);
							IDbDataParameter parFIRST_NAME         = Sql.AddParameter(cmd, "@FIRST_NAME"        , sFIRST_NAME          ,  30);
							IDbDataParameter parLAST_NAME          = Sql.AddParameter(cmd, "@LAST_NAME"         , sLAST_NAME           ,  30);
							IDbDataParameter parREPORTS_TO_ID      = Sql.AddParameter(cmd, "@REPORTS_TO_ID"     , gREPORTS_TO_ID       );
							IDbDataParameter parREPORTS_TO_NAME    = Sql.AddParameter(cmd, "@REPORTS_TO_NAME"   , sREPORTS_TO_NAME     ,  60);
							IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
							IDbDataParameter parTEAM_NAME          = Sql.AddParameter(cmd, "@TEAM_NAME"         , sTEAM_NAME           , 128);
							IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
							IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               ,  50);
							IDbDataParameter parDEPARTMENT         = Sql.AddParameter(cmd, "@DEPARTMENT"        , sDEPARTMENT          ,  50);
							IDbDataParameter parPHONE_HOME         = Sql.AddParameter(cmd, "@PHONE_HOME"        , sPHONE_HOME          ,  50);
							IDbDataParameter parPHONE_MOBILE       = Sql.AddParameter(cmd, "@PHONE_MOBILE"      , sPHONE_MOBILE        ,  50);
							IDbDataParameter parPHONE_WORK         = Sql.AddParameter(cmd, "@PHONE_WORK"        , sPHONE_WORK          ,  50);
							IDbDataParameter parPHONE_OTHER        = Sql.AddParameter(cmd, "@PHONE_OTHER"       , sPHONE_OTHER         ,  50);
							IDbDataParameter parPHONE_FAX          = Sql.AddParameter(cmd, "@PHONE_FAX"         , sPHONE_FAX           ,  50);
							IDbDataParameter parEMAIL1             = Sql.AddParameter(cmd, "@EMAIL1"            , sEMAIL1              , 100);
							IDbDataParameter parEMAIL2             = Sql.AddParameter(cmd, "@EMAIL2"            , sEMAIL2              , 100);
							IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
							IDbDataParameter parADDRESS_STREET     = Sql.AddParameter(cmd, "@ADDRESS_STREET"    , sADDRESS_STREET      , 150);
							IDbDataParameter parADDRESS_CITY       = Sql.AddParameter(cmd, "@ADDRESS_CITY"      , sADDRESS_CITY        , 100);
							IDbDataParameter parADDRESS_STATE      = Sql.AddParameter(cmd, "@ADDRESS_STATE"     , sADDRESS_STATE       , 100);
							IDbDataParameter parADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE", sADDRESS_POSTALCODE  ,   9);
							IDbDataParameter parADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"   , sADDRESS_COUNTRY     ,  25);
							IDbDataParameter parEMPLOYEE_STATUS    = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"   , sEMPLOYEE_STATUS     ,  25);
							IDbDataParameter parMESSENGER_ID       = Sql.AddParameter(cmd, "@MESSENGER_ID"      , sMESSENGER_ID        ,  25);
							IDbDataParameter parMESSENGER_TYPE     = Sql.AddParameter(cmd, "@MESSENGER_TYPE"    , sMESSENGER_TYPE      ,  25);
							IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
							IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
							IDbDataParameter parTHEME              = Sql.AddParameter(cmd, "@THEME"             , sTHEME               ,  25);
							IDbDataParameter parLANGUAGE           = Sql.AddParameter(cmd, "@LANGUAGE"          , sLANGUAGE            ,   5);
							IDbDataParameter parDATE_FORMAT        = Sql.AddParameter(cmd, "@DATE_FORMAT"       , sDATE_FORMAT         ,  50);
							IDbDataParameter parTIME_FORMAT        = Sql.AddParameter(cmd, "@TIME_FORMAT"       , sTIME_FORMAT         ,  50);
							IDbDataParameter parTIMEZONE_ID        = Sql.AddParameter(cmd, "@TIMEZONE_ID"       , gTIMEZONE_ID         );
							IDbDataParameter parCURRENCY_ID        = Sql.AddParameter(cmd, "@CURRENCY_ID"       , gCURRENCY_ID         );
							IDbDataParameter parEXTENSION          = Sql.AddParameter(cmd, "@EXTENSION"         , sEXTENSION           ,  25);
							IDbDataParameter parSMS_OPT_IN         = Sql.AddParameter(cmd, "@SMS_OPT_IN"        , sSMS_OPT_IN          ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_Import
		/// <summary>
		/// spUSERS_Import
		/// </summary>
		public void spUSERS_Import(ref Guid gID, string sUSER_NAME, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, string sREPORTS_TO_NAME, Guid gTEAM_ID, string sTEAM_NAME, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sSTATUS, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE, string sPARENT_TYPE, Guid gPARENT_ID, string sTHEME, string sLANGUAGE, string sDATE_FORMAT, string sTIME_FORMAT, Guid gTIMEZONE_ID, Guid gCURRENCY_ID, string sEXTENSION, string sSMS_OPT_IN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_Import";
				IDbDataParameter parID                 = Sql.AddParameter(cmd, "@ID"                , gID                  );
				IDbDataParameter parMODIFIED_USER_ID   = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"  ,  Security.USER_ID    );
				IDbDataParameter parUSER_NAME          = Sql.AddParameter(cmd, "@USER_NAME"         , sUSER_NAME           ,  60);
				IDbDataParameter parFIRST_NAME         = Sql.AddParameter(cmd, "@FIRST_NAME"        , sFIRST_NAME          ,  30);
				IDbDataParameter parLAST_NAME          = Sql.AddParameter(cmd, "@LAST_NAME"         , sLAST_NAME           ,  30);
				IDbDataParameter parREPORTS_TO_ID      = Sql.AddParameter(cmd, "@REPORTS_TO_ID"     , gREPORTS_TO_ID       );
				IDbDataParameter parREPORTS_TO_NAME    = Sql.AddParameter(cmd, "@REPORTS_TO_NAME"   , sREPORTS_TO_NAME     ,  60);
				IDbDataParameter parTEAM_ID            = Sql.AddParameter(cmd, "@TEAM_ID"           , gTEAM_ID             );
				IDbDataParameter parTEAM_NAME          = Sql.AddParameter(cmd, "@TEAM_NAME"         , sTEAM_NAME           , 128);
				IDbDataParameter parDESCRIPTION        = Sql.AddParameter(cmd, "@DESCRIPTION"       , sDESCRIPTION         );
				IDbDataParameter parTITLE              = Sql.AddParameter(cmd, "@TITLE"             , sTITLE               ,  50);
				IDbDataParameter parDEPARTMENT         = Sql.AddParameter(cmd, "@DEPARTMENT"        , sDEPARTMENT          ,  50);
				IDbDataParameter parPHONE_HOME         = Sql.AddParameter(cmd, "@PHONE_HOME"        , sPHONE_HOME          ,  50);
				IDbDataParameter parPHONE_MOBILE       = Sql.AddParameter(cmd, "@PHONE_MOBILE"      , sPHONE_MOBILE        ,  50);
				IDbDataParameter parPHONE_WORK         = Sql.AddParameter(cmd, "@PHONE_WORK"        , sPHONE_WORK          ,  50);
				IDbDataParameter parPHONE_OTHER        = Sql.AddParameter(cmd, "@PHONE_OTHER"       , sPHONE_OTHER         ,  50);
				IDbDataParameter parPHONE_FAX          = Sql.AddParameter(cmd, "@PHONE_FAX"         , sPHONE_FAX           ,  50);
				IDbDataParameter parEMAIL1             = Sql.AddParameter(cmd, "@EMAIL1"            , sEMAIL1              , 100);
				IDbDataParameter parEMAIL2             = Sql.AddParameter(cmd, "@EMAIL2"            , sEMAIL2              , 100);
				IDbDataParameter parSTATUS             = Sql.AddParameter(cmd, "@STATUS"            , sSTATUS              ,  25);
				IDbDataParameter parADDRESS_STREET     = Sql.AddParameter(cmd, "@ADDRESS_STREET"    , sADDRESS_STREET      , 150);
				IDbDataParameter parADDRESS_CITY       = Sql.AddParameter(cmd, "@ADDRESS_CITY"      , sADDRESS_CITY        , 100);
				IDbDataParameter parADDRESS_STATE      = Sql.AddParameter(cmd, "@ADDRESS_STATE"     , sADDRESS_STATE       , 100);
				IDbDataParameter parADDRESS_POSTALCODE = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE", sADDRESS_POSTALCODE  ,   9);
				IDbDataParameter parADDRESS_COUNTRY    = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"   , sADDRESS_COUNTRY     ,  25);
				IDbDataParameter parEMPLOYEE_STATUS    = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"   , sEMPLOYEE_STATUS     ,  25);
				IDbDataParameter parMESSENGER_ID       = Sql.AddParameter(cmd, "@MESSENGER_ID"      , sMESSENGER_ID        ,  25);
				IDbDataParameter parMESSENGER_TYPE     = Sql.AddParameter(cmd, "@MESSENGER_TYPE"    , sMESSENGER_TYPE      ,  25);
				IDbDataParameter parPARENT_TYPE        = Sql.AddParameter(cmd, "@PARENT_TYPE"       , sPARENT_TYPE         ,  25);
				IDbDataParameter parPARENT_ID          = Sql.AddParameter(cmd, "@PARENT_ID"         , gPARENT_ID           );
				IDbDataParameter parTHEME              = Sql.AddParameter(cmd, "@THEME"             , sTHEME               ,  25);
				IDbDataParameter parLANGUAGE           = Sql.AddParameter(cmd, "@LANGUAGE"          , sLANGUAGE            ,   5);
				IDbDataParameter parDATE_FORMAT        = Sql.AddParameter(cmd, "@DATE_FORMAT"       , sDATE_FORMAT         ,  50);
				IDbDataParameter parTIME_FORMAT        = Sql.AddParameter(cmd, "@TIME_FORMAT"       , sTIME_FORMAT         ,  50);
				IDbDataParameter parTIMEZONE_ID        = Sql.AddParameter(cmd, "@TIMEZONE_ID"       , gTIMEZONE_ID         );
				IDbDataParameter parCURRENCY_ID        = Sql.AddParameter(cmd, "@CURRENCY_ID"       , gCURRENCY_ID         );
				IDbDataParameter parEXTENSION          = Sql.AddParameter(cmd, "@EXTENSION"         , sEXTENSION           ,  25);
				IDbDataParameter parSMS_OPT_IN         = Sql.AddParameter(cmd, "@SMS_OPT_IN"        , sSMS_OPT_IN          ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_Import
		/// <summary>
		/// spUSERS_Import
		/// </summary>
		public IDbCommand cmdUSERS_Import(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_Import";
			IDbDataParameter parID                 = Sql.CreateParameter(cmd, "@ID"                , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID   = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"  , "Guid",  16);
			IDbDataParameter parUSER_NAME          = Sql.CreateParameter(cmd, "@USER_NAME"         , "string",  60);
			IDbDataParameter parFIRST_NAME         = Sql.CreateParameter(cmd, "@FIRST_NAME"        , "string",  30);
			IDbDataParameter parLAST_NAME          = Sql.CreateParameter(cmd, "@LAST_NAME"         , "string",  30);
			IDbDataParameter parREPORTS_TO_ID      = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"     , "Guid",  16);
			IDbDataParameter parREPORTS_TO_NAME    = Sql.CreateParameter(cmd, "@REPORTS_TO_NAME"   , "string",  60);
			IDbDataParameter parTEAM_ID            = Sql.CreateParameter(cmd, "@TEAM_ID"           , "Guid",  16);
			IDbDataParameter parTEAM_NAME          = Sql.CreateParameter(cmd, "@TEAM_NAME"         , "string", 128);
			IDbDataParameter parDESCRIPTION        = Sql.CreateParameter(cmd, "@DESCRIPTION"       , "string", 104857600);
			IDbDataParameter parTITLE              = Sql.CreateParameter(cmd, "@TITLE"             , "string",  50);
			IDbDataParameter parDEPARTMENT         = Sql.CreateParameter(cmd, "@DEPARTMENT"        , "string",  50);
			IDbDataParameter parPHONE_HOME         = Sql.CreateParameter(cmd, "@PHONE_HOME"        , "string",  50);
			IDbDataParameter parPHONE_MOBILE       = Sql.CreateParameter(cmd, "@PHONE_MOBILE"      , "string",  50);
			IDbDataParameter parPHONE_WORK         = Sql.CreateParameter(cmd, "@PHONE_WORK"        , "string",  50);
			IDbDataParameter parPHONE_OTHER        = Sql.CreateParameter(cmd, "@PHONE_OTHER"       , "string",  50);
			IDbDataParameter parPHONE_FAX          = Sql.CreateParameter(cmd, "@PHONE_FAX"         , "string",  50);
			IDbDataParameter parEMAIL1             = Sql.CreateParameter(cmd, "@EMAIL1"            , "string", 100);
			IDbDataParameter parEMAIL2             = Sql.CreateParameter(cmd, "@EMAIL2"            , "string", 100);
			IDbDataParameter parSTATUS             = Sql.CreateParameter(cmd, "@STATUS"            , "string",  25);
			IDbDataParameter parADDRESS_STREET     = Sql.CreateParameter(cmd, "@ADDRESS_STREET"    , "string", 150);
			IDbDataParameter parADDRESS_CITY       = Sql.CreateParameter(cmd, "@ADDRESS_CITY"      , "string", 100);
			IDbDataParameter parADDRESS_STATE      = Sql.CreateParameter(cmd, "@ADDRESS_STATE"     , "string", 100);
			IDbDataParameter parADDRESS_POSTALCODE = Sql.CreateParameter(cmd, "@ADDRESS_POSTALCODE", "string",   9);
			IDbDataParameter parADDRESS_COUNTRY    = Sql.CreateParameter(cmd, "@ADDRESS_COUNTRY"   , "string",  25);
			IDbDataParameter parEMPLOYEE_STATUS    = Sql.CreateParameter(cmd, "@EMPLOYEE_STATUS"   , "string",  25);
			IDbDataParameter parMESSENGER_ID       = Sql.CreateParameter(cmd, "@MESSENGER_ID"      , "string",  25);
			IDbDataParameter parMESSENGER_TYPE     = Sql.CreateParameter(cmd, "@MESSENGER_TYPE"    , "string",  25);
			IDbDataParameter parPARENT_TYPE        = Sql.CreateParameter(cmd, "@PARENT_TYPE"       , "string",  25);
			IDbDataParameter parPARENT_ID          = Sql.CreateParameter(cmd, "@PARENT_ID"         , "Guid",  16);
			IDbDataParameter parTHEME              = Sql.CreateParameter(cmd, "@THEME"             , "string",  25);
			IDbDataParameter parLANGUAGE           = Sql.CreateParameter(cmd, "@LANGUAGE"          , "string",   5);
			IDbDataParameter parDATE_FORMAT        = Sql.CreateParameter(cmd, "@DATE_FORMAT"       , "string",  50);
			IDbDataParameter parTIME_FORMAT        = Sql.CreateParameter(cmd, "@TIME_FORMAT"       , "string",  50);
			IDbDataParameter parTIMEZONE_ID        = Sql.CreateParameter(cmd, "@TIMEZONE_ID"       , "Guid",  16);
			IDbDataParameter parCURRENCY_ID        = Sql.CreateParameter(cmd, "@CURRENCY_ID"       , "Guid",  16);
			IDbDataParameter parEXTENSION          = Sql.CreateParameter(cmd, "@EXTENSION"         , "string",  25);
			IDbDataParameter parSMS_OPT_IN         = Sql.CreateParameter(cmd, "@SMS_OPT_IN"        , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_InsertNTLM
		/// <summary>
		/// spUSERS_InsertNTLM
		/// </summary>
		public void spUSERS_InsertNTLM(ref Guid gID, string sUSER_DOMAIN, string sUSER_NAME, bool bIS_ADMIN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_InsertNTLM";
							IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
							IDbDataParameter parUSER_DOMAIN = Sql.AddParameter(cmd, "@USER_DOMAIN", sUSER_DOMAIN  ,  20);
							IDbDataParameter parUSER_NAME   = Sql.AddParameter(cmd, "@USER_NAME"  , sUSER_NAME    ,  60);
							IDbDataParameter parIS_ADMIN    = Sql.AddParameter(cmd, "@IS_ADMIN"   , bIS_ADMIN     );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_InsertNTLM
		/// <summary>
		/// spUSERS_InsertNTLM
		/// </summary>
		public void spUSERS_InsertNTLM(ref Guid gID, string sUSER_DOMAIN, string sUSER_NAME, bool bIS_ADMIN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_InsertNTLM";
				IDbDataParameter parID          = Sql.AddParameter(cmd, "@ID"         , gID           );
				IDbDataParameter parUSER_DOMAIN = Sql.AddParameter(cmd, "@USER_DOMAIN", sUSER_DOMAIN  ,  20);
				IDbDataParameter parUSER_NAME   = Sql.AddParameter(cmd, "@USER_NAME"  , sUSER_NAME    ,  60);
				IDbDataParameter parIS_ADMIN    = Sql.AddParameter(cmd, "@IS_ADMIN"   , bIS_ADMIN     );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_InsertNTLM
		/// <summary>
		/// spUSERS_InsertNTLM
		/// </summary>
		public IDbCommand cmdUSERS_InsertNTLM(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_InsertNTLM";
			IDbDataParameter parID          = Sql.CreateParameter(cmd, "@ID"         , "Guid",  16);
			IDbDataParameter parUSER_DOMAIN = Sql.CreateParameter(cmd, "@USER_DOMAIN", "string",  20);
			IDbDataParameter parUSER_NAME   = Sql.CreateParameter(cmd, "@USER_NAME"  , "string",  60);
			IDbDataParameter parIS_ADMIN    = Sql.CreateParameter(cmd, "@IS_ADMIN"   , "bool",   1);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_LAST_IMPORT_Delete
		/// <summary>
		/// spUSERS_LAST_IMPORT_Delete
		/// </summary>
		public void spUSERS_LAST_IMPORT_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_LAST_IMPORT_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_LAST_IMPORT_Delete
		/// <summary>
		/// spUSERS_LAST_IMPORT_Delete
		/// </summary>
		public void spUSERS_LAST_IMPORT_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_LAST_IMPORT_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_LAST_IMPORT_Delete
		/// <summary>
		/// spUSERS_LAST_IMPORT_Delete
		/// </summary>
		public IDbCommand cmdUSERS_LAST_IMPORT_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_LAST_IMPORT_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_LAST_IMPORT_Update
		/// <summary>
		/// spUSERS_LAST_IMPORT_Update
		/// </summary>
		public void spUSERS_LAST_IMPORT_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sBEAN_TYPE, Guid gBEAN_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_LAST_IMPORT_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parBEAN_TYPE        = Sql.AddParameter(cmd, "@BEAN_TYPE"       , sBEAN_TYPE         ,  25);
							IDbDataParameter parBEAN_ID          = Sql.AddParameter(cmd, "@BEAN_ID"         , gBEAN_ID           );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_LAST_IMPORT_Update
		/// <summary>
		/// spUSERS_LAST_IMPORT_Update
		/// </summary>
		public void spUSERS_LAST_IMPORT_Update(ref Guid gID, Guid gASSIGNED_USER_ID, string sBEAN_TYPE, Guid gBEAN_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_LAST_IMPORT_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parBEAN_TYPE        = Sql.AddParameter(cmd, "@BEAN_TYPE"       , sBEAN_TYPE         ,  25);
				IDbDataParameter parBEAN_ID          = Sql.AddParameter(cmd, "@BEAN_ID"         , gBEAN_ID           );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_LAST_IMPORT_Update
		/// <summary>
		/// spUSERS_LAST_IMPORT_Update
		/// </summary>
		public IDbCommand cmdUSERS_LAST_IMPORT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_LAST_IMPORT_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parBEAN_TYPE        = Sql.CreateParameter(cmd, "@BEAN_TYPE"       , "string",  25);
			IDbDataParameter parBEAN_ID          = Sql.CreateParameter(cmd, "@BEAN_ID"         , "Guid",  16);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_LOGINS_InsertOnly
		/// <summary>
		/// spUSERS_LOGINS_InsertOnly
		/// </summary>
		public void spUSERS_LOGINS_InsertOnly(ref Guid gID, Guid gUSER_ID, string sUSER_NAME, string sLOGIN_TYPE, string sLOGIN_STATUS, string sASPNET_SESSIONID, string sREMOTE_HOST, string sSERVER_HOST, string sTARGET, string sRELATIVE_PATH, string sUSER_AGENT)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_LOGINS_InsertOnly";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
							IDbDataParameter parLOGIN_TYPE       = Sql.AddParameter(cmd, "@LOGIN_TYPE"      , sLOGIN_TYPE        ,  25);
							IDbDataParameter parLOGIN_STATUS     = Sql.AddParameter(cmd, "@LOGIN_STATUS"    , sLOGIN_STATUS      ,  25);
							IDbDataParameter parASPNET_SESSIONID = Sql.AddParameter(cmd, "@ASPNET_SESSIONID", sASPNET_SESSIONID  ,  50);
							IDbDataParameter parREMOTE_HOST      = Sql.AddParameter(cmd, "@REMOTE_HOST"     , sREMOTE_HOST       , 100);
							IDbDataParameter parSERVER_HOST      = Sql.AddParameter(cmd, "@SERVER_HOST"     , sSERVER_HOST       , 100);
							IDbDataParameter parTARGET           = Sql.AddParameter(cmd, "@TARGET"          , sTARGET            , 255);
							IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
							IDbDataParameter parUSER_AGENT       = Sql.AddParameter(cmd, "@USER_AGENT"      , sUSER_AGENT        , 255);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_LOGINS_InsertOnly
		/// <summary>
		/// spUSERS_LOGINS_InsertOnly
		/// </summary>
		public void spUSERS_LOGINS_InsertOnly(ref Guid gID, Guid gUSER_ID, string sUSER_NAME, string sLOGIN_TYPE, string sLOGIN_STATUS, string sASPNET_SESSIONID, string sREMOTE_HOST, string sSERVER_HOST, string sTARGET, string sRELATIVE_PATH, string sUSER_AGENT, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_LOGINS_InsertOnly";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
				IDbDataParameter parLOGIN_TYPE       = Sql.AddParameter(cmd, "@LOGIN_TYPE"      , sLOGIN_TYPE        ,  25);
				IDbDataParameter parLOGIN_STATUS     = Sql.AddParameter(cmd, "@LOGIN_STATUS"    , sLOGIN_STATUS      ,  25);
				IDbDataParameter parASPNET_SESSIONID = Sql.AddParameter(cmd, "@ASPNET_SESSIONID", sASPNET_SESSIONID  ,  50);
				IDbDataParameter parREMOTE_HOST      = Sql.AddParameter(cmd, "@REMOTE_HOST"     , sREMOTE_HOST       , 100);
				IDbDataParameter parSERVER_HOST      = Sql.AddParameter(cmd, "@SERVER_HOST"     , sSERVER_HOST       , 100);
				IDbDataParameter parTARGET           = Sql.AddParameter(cmd, "@TARGET"          , sTARGET            , 255);
				IDbDataParameter parRELATIVE_PATH    = Sql.AddParameter(cmd, "@RELATIVE_PATH"   , sRELATIVE_PATH     , 255);
				IDbDataParameter parUSER_AGENT       = Sql.AddParameter(cmd, "@USER_AGENT"      , sUSER_AGENT        , 255);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_LOGINS_InsertOnly
		/// <summary>
		/// spUSERS_LOGINS_InsertOnly
		/// </summary>
		public IDbCommand cmdUSERS_LOGINS_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_LOGINS_InsertOnly";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  60);
			IDbDataParameter parLOGIN_TYPE       = Sql.CreateParameter(cmd, "@LOGIN_TYPE"      , "string",  25);
			IDbDataParameter parLOGIN_STATUS     = Sql.CreateParameter(cmd, "@LOGIN_STATUS"    , "string",  25);
			IDbDataParameter parASPNET_SESSIONID = Sql.CreateParameter(cmd, "@ASPNET_SESSIONID", "string",  50);
			IDbDataParameter parREMOTE_HOST      = Sql.CreateParameter(cmd, "@REMOTE_HOST"     , "string", 100);
			IDbDataParameter parSERVER_HOST      = Sql.CreateParameter(cmd, "@SERVER_HOST"     , "string", 100);
			IDbDataParameter parTARGET           = Sql.CreateParameter(cmd, "@TARGET"          , "string", 255);
			IDbDataParameter parRELATIVE_PATH    = Sql.CreateParameter(cmd, "@RELATIVE_PATH"   , "string", 255);
			IDbDataParameter parUSER_AGENT       = Sql.CreateParameter(cmd, "@USER_AGENT"      , "string", 255);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_LOGINS_Logout
		/// <summary>
		/// spUSERS_LOGINS_Logout
		/// </summary>
		public void spUSERS_LOGINS_Logout(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_LOGINS_Logout";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_LOGINS_Logout
		/// <summary>
		/// spUSERS_LOGINS_Logout
		/// </summary>
		public void spUSERS_LOGINS_Logout(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_LOGINS_Logout";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_LOGINS_Logout
		/// <summary>
		/// spUSERS_LOGINS_Logout
		/// </summary>
		public IDbCommand cmdUSERS_LOGINS_Logout(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_LOGINS_Logout";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_MassDelete
		/// <summary>
		/// spUSERS_MassDelete
		/// </summary>
		public void spUSERS_MassDelete(string sID_LIST)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_MassDelete";
							IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_MassDelete
		/// <summary>
		/// spUSERS_MassDelete
		/// </summary>
		public void spUSERS_MassDelete(string sID_LIST, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_MassDelete";
				IDbDataParameter parID_LIST          = Sql.AddAnsiParam(cmd, "@ID_LIST"         , sID_LIST           , 8000);
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_MassDelete
		/// <summary>
		/// spUSERS_MassDelete
		/// </summary>
		public IDbCommand cmdUSERS_MassDelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_MassDelete";
			IDbDataParameter parID_LIST          = Sql.CreateParameter(cmd, "@ID_LIST"         , "ansistring", 8000);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_PASSWORD_HISTORY_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_HISTORY_InsertOnly
		/// </summary>
		public void spUSERS_PASSWORD_HISTORY_InsertOnly(Guid gUSER_ID, string sUSER_HASH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSERS_PASSWORD_HISTORY_Inser";
							else
								cmd.CommandText = "spUSERS_PASSWORD_HISTORY_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parUSER_HASH        = Sql.AddParameter(cmd, "@USER_HASH"       , sUSER_HASH         ,  32);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PASSWORD_HISTORY_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_HISTORY_InsertOnly
		/// </summary>
		public void spUSERS_PASSWORD_HISTORY_InsertOnly(Guid gUSER_ID, string sUSER_HASH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSERS_PASSWORD_HISTORY_Inser";
				else
					cmd.CommandText = "spUSERS_PASSWORD_HISTORY_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parUSER_HASH        = Sql.AddParameter(cmd, "@USER_HASH"       , sUSER_HASH         ,  32);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_PASSWORD_HISTORY_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_HISTORY_InsertOnly
		/// </summary>
		public IDbCommand cmdUSERS_PASSWORD_HISTORY_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSERS_PASSWORD_HISTORY_Inser";
			else
				cmd.CommandText = "spUSERS_PASSWORD_HISTORY_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_HASH        = Sql.CreateParameter(cmd, "@USER_HASH"       , "string",  32);
			return cmd;
		}
		#endregion

		#region spUSERS_PASSWORD_LINK_Delete
		/// <summary>
		/// spUSERS_PASSWORD_LINK_Delete
		/// </summary>
		public void spUSERS_PASSWORD_LINK_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_PASSWORD_LINK_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PASSWORD_LINK_Delete
		/// <summary>
		/// spUSERS_PASSWORD_LINK_Delete
		/// </summary>
		public void spUSERS_PASSWORD_LINK_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_PASSWORD_LINK_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_PASSWORD_LINK_Delete
		/// <summary>
		/// spUSERS_PASSWORD_LINK_Delete
		/// </summary>
		public IDbCommand cmdUSERS_PASSWORD_LINK_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_PASSWORD_LINK_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_PASSWORD_LINK_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_LINK_InsertOnly
		/// </summary>
		public void spUSERS_PASSWORD_LINK_InsertOnly(ref Guid gID, string sUSER_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOn";
							else
								cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOnly";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PASSWORD_LINK_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_LINK_InsertOnly
		/// </summary>
		public void spUSERS_PASSWORD_LINK_InsertOnly(ref Guid gID, string sUSER_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOn";
				else
					cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOnly";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_NAME        = Sql.AddParameter(cmd, "@USER_NAME"       , sUSER_NAME         ,  60);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_PASSWORD_LINK_InsertOnly
		/// <summary>
		/// spUSERS_PASSWORD_LINK_InsertOnly
		/// </summary>
		public IDbCommand cmdUSERS_PASSWORD_LINK_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOn";
			else
				cmd.CommandText = "spUSERS_PASSWORD_LINK_InsertOnly";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_NAME        = Sql.CreateParameter(cmd, "@USER_NAME"       , "string",  60);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_PasswordUpdate
		/// <summary>
		/// spUSERS_PasswordUpdate
		/// </summary>
		public void spUSERS_PasswordUpdate(Guid gID, string sUSER_HASH)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_PasswordUpdate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_HASH        = Sql.AddParameter(cmd, "@USER_HASH"       , sUSER_HASH         ,  32);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PasswordUpdate
		/// <summary>
		/// spUSERS_PasswordUpdate
		/// </summary>
		public void spUSERS_PasswordUpdate(Guid gID, string sUSER_HASH, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_PasswordUpdate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_HASH        = Sql.AddParameter(cmd, "@USER_HASH"       , sUSER_HASH         ,  32);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_PasswordUpdate
		/// <summary>
		/// spUSERS_PasswordUpdate
		/// </summary>
		public IDbCommand cmdUSERS_PasswordUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_PasswordUpdate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_HASH        = Sql.CreateParameter(cmd, "@USER_HASH"       , "string",  32);
			return cmd;
		}
		#endregion

		#region spUSERS_PreferencesUpdate
		/// <summary>
		/// spUSERS_PreferencesUpdate
		/// </summary>
		public void spUSERS_PreferencesUpdate(Guid gID, string sUSER_PREFERENCES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_PreferencesUpdate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_PREFERENCES = Sql.AddParameter(cmd, "@USER_PREFERENCES", sUSER_PREFERENCES  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_PreferencesUpdate
		/// <summary>
		/// spUSERS_PreferencesUpdate
		/// </summary>
		public void spUSERS_PreferencesUpdate(Guid gID, string sUSER_PREFERENCES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_PreferencesUpdate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_PREFERENCES = Sql.AddParameter(cmd, "@USER_PREFERENCES", sUSER_PREFERENCES  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_PreferencesUpdate
		/// <summary>
		/// spUSERS_PreferencesUpdate
		/// </summary>
		public IDbCommand cmdUSERS_PreferencesUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_PreferencesUpdate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_PREFERENCES = Sql.CreateParameter(cmd, "@USER_PREFERENCES", "string", 104857600);
			return cmd;
		}
		#endregion

		#region spUSERS_TEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spUSERS_TEAM_MEMBERSHIPS_Update
		/// </summary>
		public void spUSERS_TEAM_MEMBERSHIPS_Update(Guid gUSER_ID, Guid gTEAM_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							if ( Sql.IsOracle(cmd) )
								cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Updat";
							else
								cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Update";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
							IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_TEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spUSERS_TEAM_MEMBERSHIPS_Update
		/// </summary>
		public void spUSERS_TEAM_MEMBERSHIPS_Update(Guid gUSER_ID, Guid gTEAM_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				if ( Sql.IsOracle(cmd) )
					cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Updat";
				else
					cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Update";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parUSER_ID          = Sql.AddParameter(cmd, "@USER_ID"         , gUSER_ID           );
				IDbDataParameter parTEAM_ID          = Sql.AddParameter(cmd, "@TEAM_ID"         , gTEAM_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_TEAM_MEMBERSHIPS_Update
		/// <summary>
		/// spUSERS_TEAM_MEMBERSHIPS_Update
		/// </summary>
		public IDbCommand cmdUSERS_TEAM_MEMBERSHIPS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			if ( Sql.IsOracle(cmd) )
				cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Updat";
			else
				cmd.CommandText = "spUSERS_TEAM_MEMBERSHIPS_Update";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parUSER_ID          = Sql.CreateParameter(cmd, "@USER_ID"         , "Guid",  16);
			IDbDataParameter parTEAM_ID          = Sql.CreateParameter(cmd, "@TEAM_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_TimeZoneUpdate
		/// <summary>
		/// spUSERS_TimeZoneUpdate
		/// </summary>
		public void spUSERS_TimeZoneUpdate(Guid gID, Guid gTIMEZONE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_TimeZoneUpdate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_TimeZoneUpdate
		/// <summary>
		/// spUSERS_TimeZoneUpdate
		/// </summary>
		public void spUSERS_TimeZoneUpdate(Guid gID, Guid gTIMEZONE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_TimeZoneUpdate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_TimeZoneUpdate
		/// <summary>
		/// spUSERS_TimeZoneUpdate
		/// </summary>
		public IDbCommand cmdUSERS_TimeZoneUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_TimeZoneUpdate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parTIMEZONE_ID      = Sql.CreateParameter(cmd, "@TIMEZONE_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_Undelete
		/// <summary>
		/// spUSERS_Undelete
		/// </summary>
		public void spUSERS_Undelete(Guid gID, string sAUDIT_TOKEN)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_Undelete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_Undelete
		/// <summary>
		/// spUSERS_Undelete
		/// </summary>
		public void spUSERS_Undelete(Guid gID, string sAUDIT_TOKEN, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_Undelete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parAUDIT_TOKEN      = Sql.AddAnsiParam(cmd, "@AUDIT_TOKEN"     , sAUDIT_TOKEN       , 255);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_Undelete
		/// <summary>
		/// spUSERS_Undelete
		/// </summary>
		public IDbCommand cmdUSERS_Undelete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_Undelete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parAUDIT_TOKEN      = Sql.CreateParameter(cmd, "@AUDIT_TOKEN"     , "ansistring", 255);
			return cmd;
		}
		#endregion

		#region spUSERS_Update
		/// <summary>
		/// spUSERS_Update
		/// </summary>
		public void spUSERS_Update(ref Guid gID, string sUSER_NAME, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, bool bIS_ADMIN, bool bRECEIVE_NOTIFICATIONS, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sSTATUS, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sUSER_PREFERENCES, bool bPORTAL_ONLY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE, string sPARENT_TYPE, Guid gPARENT_ID, bool bIS_GROUP, Guid gDEFAULT_TEAM, bool bIS_ADMIN_DELEGATE, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, bool bSYSTEM_GENERATED_PASSWORD, bool bGOOGLEAPPS_SYNC_CONTACTS, bool bGOOGLEAPPS_SYNC_CALENDAR, string sGOOGLEAPPS_USERNAME, string sGOOGLEAPPS_PASSWORD, string sFACEBOOK_ID, bool bICLOUD_SYNC_CONTACTS, bool bICLOUD_SYNC_CALENDAR, string sICLOUD_USERNAME, string sICLOUD_PASSWORD, string sTHEME, string sDATE_FORMAT, string sTIME_FORMAT, string sLANG, Guid gCURRENCY_ID, Guid gTIMEZONE_ID, bool bSAVE_QUERY, bool bGROUP_TABS, bool bSUBPANEL_TABS, string sEXTENSION, string sSMS_OPT_IN, string sPICTURE, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sMAIL_SENDTYPE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_Update";
							IDbDataParameter parID                        = Sql.AddParameter(cmd, "@ID"                       , gID                         );
							IDbDataParameter parMODIFIED_USER_ID          = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"         ,  Security.USER_ID           );
							IDbDataParameter parUSER_NAME                 = Sql.AddParameter(cmd, "@USER_NAME"                , sUSER_NAME                  ,  60);
							IDbDataParameter parFIRST_NAME                = Sql.AddParameter(cmd, "@FIRST_NAME"               , sFIRST_NAME                 ,  30);
							IDbDataParameter parLAST_NAME                 = Sql.AddParameter(cmd, "@LAST_NAME"                , sLAST_NAME                  ,  30);
							IDbDataParameter parREPORTS_TO_ID             = Sql.AddParameter(cmd, "@REPORTS_TO_ID"            , gREPORTS_TO_ID              );
							IDbDataParameter parIS_ADMIN                  = Sql.AddParameter(cmd, "@IS_ADMIN"                 , bIS_ADMIN                   );
							IDbDataParameter parRECEIVE_NOTIFICATIONS     = Sql.AddParameter(cmd, "@RECEIVE_NOTIFICATIONS"    , bRECEIVE_NOTIFICATIONS      );
							IDbDataParameter parDESCRIPTION               = Sql.AddParameter(cmd, "@DESCRIPTION"              , sDESCRIPTION                );
							IDbDataParameter parTITLE                     = Sql.AddParameter(cmd, "@TITLE"                    , sTITLE                      ,  50);
							IDbDataParameter parDEPARTMENT                = Sql.AddParameter(cmd, "@DEPARTMENT"               , sDEPARTMENT                 ,  50);
							IDbDataParameter parPHONE_HOME                = Sql.AddParameter(cmd, "@PHONE_HOME"               , sPHONE_HOME                 ,  50);
							IDbDataParameter parPHONE_MOBILE              = Sql.AddParameter(cmd, "@PHONE_MOBILE"             , sPHONE_MOBILE               ,  50);
							IDbDataParameter parPHONE_WORK                = Sql.AddParameter(cmd, "@PHONE_WORK"               , sPHONE_WORK                 ,  50);
							IDbDataParameter parPHONE_OTHER               = Sql.AddParameter(cmd, "@PHONE_OTHER"              , sPHONE_OTHER                ,  50);
							IDbDataParameter parPHONE_FAX                 = Sql.AddParameter(cmd, "@PHONE_FAX"                , sPHONE_FAX                  ,  50);
							IDbDataParameter parEMAIL1                    = Sql.AddParameter(cmd, "@EMAIL1"                   , sEMAIL1                     , 100);
							IDbDataParameter parEMAIL2                    = Sql.AddParameter(cmd, "@EMAIL2"                   , sEMAIL2                     , 100);
							IDbDataParameter parSTATUS                    = Sql.AddParameter(cmd, "@STATUS"                   , sSTATUS                     ,  25);
							IDbDataParameter parADDRESS_STREET            = Sql.AddParameter(cmd, "@ADDRESS_STREET"           , sADDRESS_STREET             , 150);
							IDbDataParameter parADDRESS_CITY              = Sql.AddParameter(cmd, "@ADDRESS_CITY"             , sADDRESS_CITY               , 100);
							IDbDataParameter parADDRESS_STATE             = Sql.AddParameter(cmd, "@ADDRESS_STATE"            , sADDRESS_STATE              , 100);
							IDbDataParameter parADDRESS_POSTALCODE        = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE"       , sADDRESS_POSTALCODE         ,   9);
							IDbDataParameter parADDRESS_COUNTRY           = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"          , sADDRESS_COUNTRY            ,  25);
							IDbDataParameter parUSER_PREFERENCES          = Sql.AddParameter(cmd, "@USER_PREFERENCES"         , sUSER_PREFERENCES           );
							IDbDataParameter parPORTAL_ONLY               = Sql.AddParameter(cmd, "@PORTAL_ONLY"              , bPORTAL_ONLY                );
							IDbDataParameter parEMPLOYEE_STATUS           = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"          , sEMPLOYEE_STATUS            ,  25);
							IDbDataParameter parMESSENGER_ID              = Sql.AddParameter(cmd, "@MESSENGER_ID"             , sMESSENGER_ID               ,  25);
							IDbDataParameter parMESSENGER_TYPE            = Sql.AddParameter(cmd, "@MESSENGER_TYPE"           , sMESSENGER_TYPE             ,  25);
							IDbDataParameter parPARENT_TYPE               = Sql.AddParameter(cmd, "@PARENT_TYPE"              , sPARENT_TYPE                ,  25);
							IDbDataParameter parPARENT_ID                 = Sql.AddParameter(cmd, "@PARENT_ID"                , gPARENT_ID                  );
							IDbDataParameter parIS_GROUP                  = Sql.AddParameter(cmd, "@IS_GROUP"                 , bIS_GROUP                   );
							IDbDataParameter parDEFAULT_TEAM              = Sql.AddParameter(cmd, "@DEFAULT_TEAM"             , gDEFAULT_TEAM               );
							IDbDataParameter parIS_ADMIN_DELEGATE         = Sql.AddParameter(cmd, "@IS_ADMIN_DELEGATE"        , bIS_ADMIN_DELEGATE          );
							IDbDataParameter parMAIL_SMTPUSER             = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"            , sMAIL_SMTPUSER              ,  60);
							IDbDataParameter parMAIL_SMTPPASS             = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"            , sMAIL_SMTPPASS              , 100);
							IDbDataParameter parSYSTEM_GENERATED_PASSWORD = Sql.AddParameter(cmd, "@SYSTEM_GENERATED_PASSWORD", bSYSTEM_GENERATED_PASSWORD  );
							IDbDataParameter parGOOGLEAPPS_SYNC_CONTACTS  = Sql.AddParameter(cmd, "@GOOGLEAPPS_SYNC_CONTACTS" , bGOOGLEAPPS_SYNC_CONTACTS   );
							IDbDataParameter parGOOGLEAPPS_SYNC_CALENDAR  = Sql.AddParameter(cmd, "@GOOGLEAPPS_SYNC_CALENDAR" , bGOOGLEAPPS_SYNC_CALENDAR   );
							IDbDataParameter parGOOGLEAPPS_USERNAME       = Sql.AddParameter(cmd, "@GOOGLEAPPS_USERNAME"      , sGOOGLEAPPS_USERNAME        , 100);
							IDbDataParameter parGOOGLEAPPS_PASSWORD       = Sql.AddParameter(cmd, "@GOOGLEAPPS_PASSWORD"      , sGOOGLEAPPS_PASSWORD        , 100);
							IDbDataParameter parFACEBOOK_ID               = Sql.AddParameter(cmd, "@FACEBOOK_ID"              , sFACEBOOK_ID                ,  25);
							IDbDataParameter parICLOUD_SYNC_CONTACTS      = Sql.AddParameter(cmd, "@ICLOUD_SYNC_CONTACTS"     , bICLOUD_SYNC_CONTACTS       );
							IDbDataParameter parICLOUD_SYNC_CALENDAR      = Sql.AddParameter(cmd, "@ICLOUD_SYNC_CALENDAR"     , bICLOUD_SYNC_CALENDAR       );
							IDbDataParameter parICLOUD_USERNAME           = Sql.AddParameter(cmd, "@ICLOUD_USERNAME"          , sICLOUD_USERNAME            , 100);
							IDbDataParameter parICLOUD_PASSWORD           = Sql.AddParameter(cmd, "@ICLOUD_PASSWORD"          , sICLOUD_PASSWORD            , 100);
							IDbDataParameter parTHEME                     = Sql.AddParameter(cmd, "@THEME"                    , sTHEME                      ,  25);
							IDbDataParameter parDATE_FORMAT               = Sql.AddParameter(cmd, "@DATE_FORMAT"              , sDATE_FORMAT                ,  25);
							IDbDataParameter parTIME_FORMAT               = Sql.AddParameter(cmd, "@TIME_FORMAT"              , sTIME_FORMAT                ,  25);
							IDbDataParameter parLANG                      = Sql.AddParameter(cmd, "@LANG"                     , sLANG                       ,  10);
							IDbDataParameter parCURRENCY_ID               = Sql.AddParameter(cmd, "@CURRENCY_ID"              , gCURRENCY_ID                );
							IDbDataParameter parTIMEZONE_ID               = Sql.AddParameter(cmd, "@TIMEZONE_ID"              , gTIMEZONE_ID                );
							IDbDataParameter parSAVE_QUERY                = Sql.AddParameter(cmd, "@SAVE_QUERY"               , bSAVE_QUERY                 );
							IDbDataParameter parGROUP_TABS                = Sql.AddParameter(cmd, "@GROUP_TABS"               , bGROUP_TABS                 );
							IDbDataParameter parSUBPANEL_TABS             = Sql.AddParameter(cmd, "@SUBPANEL_TABS"            , bSUBPANEL_TABS              );
							IDbDataParameter parEXTENSION                 = Sql.AddParameter(cmd, "@EXTENSION"                , sEXTENSION                  ,  25);
							IDbDataParameter parSMS_OPT_IN                = Sql.AddParameter(cmd, "@SMS_OPT_IN"               , sSMS_OPT_IN                 ,  25);
							IDbDataParameter parPICTURE                   = Sql.AddParameter(cmd, "@PICTURE"                  , sPICTURE                    );
							IDbDataParameter parMAIL_SMTPSERVER           = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"          , sMAIL_SMTPSERVER            , 100);
							IDbDataParameter parMAIL_SMTPPORT             = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"            , nMAIL_SMTPPORT              );
							IDbDataParameter parMAIL_SMTPAUTH_REQ         = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ"        , bMAIL_SMTPAUTH_REQ          );
							IDbDataParameter parMAIL_SMTPSSL              = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"             , nMAIL_SMTPSSL               );
							IDbDataParameter parMAIL_SENDTYPE             = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"            , sMAIL_SENDTYPE              ,  25);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_Update
		/// <summary>
		/// spUSERS_Update
		/// </summary>
		public void spUSERS_Update(ref Guid gID, string sUSER_NAME, string sFIRST_NAME, string sLAST_NAME, Guid gREPORTS_TO_ID, bool bIS_ADMIN, bool bRECEIVE_NOTIFICATIONS, string sDESCRIPTION, string sTITLE, string sDEPARTMENT, string sPHONE_HOME, string sPHONE_MOBILE, string sPHONE_WORK, string sPHONE_OTHER, string sPHONE_FAX, string sEMAIL1, string sEMAIL2, string sSTATUS, string sADDRESS_STREET, string sADDRESS_CITY, string sADDRESS_STATE, string sADDRESS_POSTALCODE, string sADDRESS_COUNTRY, string sUSER_PREFERENCES, bool bPORTAL_ONLY, string sEMPLOYEE_STATUS, string sMESSENGER_ID, string sMESSENGER_TYPE, string sPARENT_TYPE, Guid gPARENT_ID, bool bIS_GROUP, Guid gDEFAULT_TEAM, bool bIS_ADMIN_DELEGATE, string sMAIL_SMTPUSER, string sMAIL_SMTPPASS, bool bSYSTEM_GENERATED_PASSWORD, bool bGOOGLEAPPS_SYNC_CONTACTS, bool bGOOGLEAPPS_SYNC_CALENDAR, string sGOOGLEAPPS_USERNAME, string sGOOGLEAPPS_PASSWORD, string sFACEBOOK_ID, bool bICLOUD_SYNC_CONTACTS, bool bICLOUD_SYNC_CALENDAR, string sICLOUD_USERNAME, string sICLOUD_PASSWORD, string sTHEME, string sDATE_FORMAT, string sTIME_FORMAT, string sLANG, Guid gCURRENCY_ID, Guid gTIMEZONE_ID, bool bSAVE_QUERY, bool bGROUP_TABS, bool bSUBPANEL_TABS, string sEXTENSION, string sSMS_OPT_IN, string sPICTURE, string sMAIL_SMTPSERVER, Int32 nMAIL_SMTPPORT, bool bMAIL_SMTPAUTH_REQ, Int32 nMAIL_SMTPSSL, string sMAIL_SENDTYPE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_Update";
				IDbDataParameter parID                        = Sql.AddParameter(cmd, "@ID"                       , gID                         );
				IDbDataParameter parMODIFIED_USER_ID          = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"         ,  Security.USER_ID           );
				IDbDataParameter parUSER_NAME                 = Sql.AddParameter(cmd, "@USER_NAME"                , sUSER_NAME                  ,  60);
				IDbDataParameter parFIRST_NAME                = Sql.AddParameter(cmd, "@FIRST_NAME"               , sFIRST_NAME                 ,  30);
				IDbDataParameter parLAST_NAME                 = Sql.AddParameter(cmd, "@LAST_NAME"                , sLAST_NAME                  ,  30);
				IDbDataParameter parREPORTS_TO_ID             = Sql.AddParameter(cmd, "@REPORTS_TO_ID"            , gREPORTS_TO_ID              );
				IDbDataParameter parIS_ADMIN                  = Sql.AddParameter(cmd, "@IS_ADMIN"                 , bIS_ADMIN                   );
				IDbDataParameter parRECEIVE_NOTIFICATIONS     = Sql.AddParameter(cmd, "@RECEIVE_NOTIFICATIONS"    , bRECEIVE_NOTIFICATIONS      );
				IDbDataParameter parDESCRIPTION               = Sql.AddParameter(cmd, "@DESCRIPTION"              , sDESCRIPTION                );
				IDbDataParameter parTITLE                     = Sql.AddParameter(cmd, "@TITLE"                    , sTITLE                      ,  50);
				IDbDataParameter parDEPARTMENT                = Sql.AddParameter(cmd, "@DEPARTMENT"               , sDEPARTMENT                 ,  50);
				IDbDataParameter parPHONE_HOME                = Sql.AddParameter(cmd, "@PHONE_HOME"               , sPHONE_HOME                 ,  50);
				IDbDataParameter parPHONE_MOBILE              = Sql.AddParameter(cmd, "@PHONE_MOBILE"             , sPHONE_MOBILE               ,  50);
				IDbDataParameter parPHONE_WORK                = Sql.AddParameter(cmd, "@PHONE_WORK"               , sPHONE_WORK                 ,  50);
				IDbDataParameter parPHONE_OTHER               = Sql.AddParameter(cmd, "@PHONE_OTHER"              , sPHONE_OTHER                ,  50);
				IDbDataParameter parPHONE_FAX                 = Sql.AddParameter(cmd, "@PHONE_FAX"                , sPHONE_FAX                  ,  50);
				IDbDataParameter parEMAIL1                    = Sql.AddParameter(cmd, "@EMAIL1"                   , sEMAIL1                     , 100);
				IDbDataParameter parEMAIL2                    = Sql.AddParameter(cmd, "@EMAIL2"                   , sEMAIL2                     , 100);
				IDbDataParameter parSTATUS                    = Sql.AddParameter(cmd, "@STATUS"                   , sSTATUS                     ,  25);
				IDbDataParameter parADDRESS_STREET            = Sql.AddParameter(cmd, "@ADDRESS_STREET"           , sADDRESS_STREET             , 150);
				IDbDataParameter parADDRESS_CITY              = Sql.AddParameter(cmd, "@ADDRESS_CITY"             , sADDRESS_CITY               , 100);
				IDbDataParameter parADDRESS_STATE             = Sql.AddParameter(cmd, "@ADDRESS_STATE"            , sADDRESS_STATE              , 100);
				IDbDataParameter parADDRESS_POSTALCODE        = Sql.AddParameter(cmd, "@ADDRESS_POSTALCODE"       , sADDRESS_POSTALCODE         ,   9);
				IDbDataParameter parADDRESS_COUNTRY           = Sql.AddParameter(cmd, "@ADDRESS_COUNTRY"          , sADDRESS_COUNTRY            ,  25);
				IDbDataParameter parUSER_PREFERENCES          = Sql.AddParameter(cmd, "@USER_PREFERENCES"         , sUSER_PREFERENCES           );
				IDbDataParameter parPORTAL_ONLY               = Sql.AddParameter(cmd, "@PORTAL_ONLY"              , bPORTAL_ONLY                );
				IDbDataParameter parEMPLOYEE_STATUS           = Sql.AddParameter(cmd, "@EMPLOYEE_STATUS"          , sEMPLOYEE_STATUS            ,  25);
				IDbDataParameter parMESSENGER_ID              = Sql.AddParameter(cmd, "@MESSENGER_ID"             , sMESSENGER_ID               ,  25);
				IDbDataParameter parMESSENGER_TYPE            = Sql.AddParameter(cmd, "@MESSENGER_TYPE"           , sMESSENGER_TYPE             ,  25);
				IDbDataParameter parPARENT_TYPE               = Sql.AddParameter(cmd, "@PARENT_TYPE"              , sPARENT_TYPE                ,  25);
				IDbDataParameter parPARENT_ID                 = Sql.AddParameter(cmd, "@PARENT_ID"                , gPARENT_ID                  );
				IDbDataParameter parIS_GROUP                  = Sql.AddParameter(cmd, "@IS_GROUP"                 , bIS_GROUP                   );
				IDbDataParameter parDEFAULT_TEAM              = Sql.AddParameter(cmd, "@DEFAULT_TEAM"             , gDEFAULT_TEAM               );
				IDbDataParameter parIS_ADMIN_DELEGATE         = Sql.AddParameter(cmd, "@IS_ADMIN_DELEGATE"        , bIS_ADMIN_DELEGATE          );
				IDbDataParameter parMAIL_SMTPUSER             = Sql.AddParameter(cmd, "@MAIL_SMTPUSER"            , sMAIL_SMTPUSER              ,  60);
				IDbDataParameter parMAIL_SMTPPASS             = Sql.AddParameter(cmd, "@MAIL_SMTPPASS"            , sMAIL_SMTPPASS              , 100);
				IDbDataParameter parSYSTEM_GENERATED_PASSWORD = Sql.AddParameter(cmd, "@SYSTEM_GENERATED_PASSWORD", bSYSTEM_GENERATED_PASSWORD  );
				IDbDataParameter parGOOGLEAPPS_SYNC_CONTACTS  = Sql.AddParameter(cmd, "@GOOGLEAPPS_SYNC_CONTACTS" , bGOOGLEAPPS_SYNC_CONTACTS   );
				IDbDataParameter parGOOGLEAPPS_SYNC_CALENDAR  = Sql.AddParameter(cmd, "@GOOGLEAPPS_SYNC_CALENDAR" , bGOOGLEAPPS_SYNC_CALENDAR   );
				IDbDataParameter parGOOGLEAPPS_USERNAME       = Sql.AddParameter(cmd, "@GOOGLEAPPS_USERNAME"      , sGOOGLEAPPS_USERNAME        , 100);
				IDbDataParameter parGOOGLEAPPS_PASSWORD       = Sql.AddParameter(cmd, "@GOOGLEAPPS_PASSWORD"      , sGOOGLEAPPS_PASSWORD        , 100);
				IDbDataParameter parFACEBOOK_ID               = Sql.AddParameter(cmd, "@FACEBOOK_ID"              , sFACEBOOK_ID                ,  25);
				IDbDataParameter parICLOUD_SYNC_CONTACTS      = Sql.AddParameter(cmd, "@ICLOUD_SYNC_CONTACTS"     , bICLOUD_SYNC_CONTACTS       );
				IDbDataParameter parICLOUD_SYNC_CALENDAR      = Sql.AddParameter(cmd, "@ICLOUD_SYNC_CALENDAR"     , bICLOUD_SYNC_CALENDAR       );
				IDbDataParameter parICLOUD_USERNAME           = Sql.AddParameter(cmd, "@ICLOUD_USERNAME"          , sICLOUD_USERNAME            , 100);
				IDbDataParameter parICLOUD_PASSWORD           = Sql.AddParameter(cmd, "@ICLOUD_PASSWORD"          , sICLOUD_PASSWORD            , 100);
				IDbDataParameter parTHEME                     = Sql.AddParameter(cmd, "@THEME"                    , sTHEME                      ,  25);
				IDbDataParameter parDATE_FORMAT               = Sql.AddParameter(cmd, "@DATE_FORMAT"              , sDATE_FORMAT                ,  25);
				IDbDataParameter parTIME_FORMAT               = Sql.AddParameter(cmd, "@TIME_FORMAT"              , sTIME_FORMAT                ,  25);
				IDbDataParameter parLANG                      = Sql.AddParameter(cmd, "@LANG"                     , sLANG                       ,  10);
				IDbDataParameter parCURRENCY_ID               = Sql.AddParameter(cmd, "@CURRENCY_ID"              , gCURRENCY_ID                );
				IDbDataParameter parTIMEZONE_ID               = Sql.AddParameter(cmd, "@TIMEZONE_ID"              , gTIMEZONE_ID                );
				IDbDataParameter parSAVE_QUERY                = Sql.AddParameter(cmd, "@SAVE_QUERY"               , bSAVE_QUERY                 );
				IDbDataParameter parGROUP_TABS                = Sql.AddParameter(cmd, "@GROUP_TABS"               , bGROUP_TABS                 );
				IDbDataParameter parSUBPANEL_TABS             = Sql.AddParameter(cmd, "@SUBPANEL_TABS"            , bSUBPANEL_TABS              );
				IDbDataParameter parEXTENSION                 = Sql.AddParameter(cmd, "@EXTENSION"                , sEXTENSION                  ,  25);
				IDbDataParameter parSMS_OPT_IN                = Sql.AddParameter(cmd, "@SMS_OPT_IN"               , sSMS_OPT_IN                 ,  25);
				IDbDataParameter parPICTURE                   = Sql.AddParameter(cmd, "@PICTURE"                  , sPICTURE                    );
				IDbDataParameter parMAIL_SMTPSERVER           = Sql.AddParameter(cmd, "@MAIL_SMTPSERVER"          , sMAIL_SMTPSERVER            , 100);
				IDbDataParameter parMAIL_SMTPPORT             = Sql.AddParameter(cmd, "@MAIL_SMTPPORT"            , nMAIL_SMTPPORT              );
				IDbDataParameter parMAIL_SMTPAUTH_REQ         = Sql.AddParameter(cmd, "@MAIL_SMTPAUTH_REQ"        , bMAIL_SMTPAUTH_REQ          );
				IDbDataParameter parMAIL_SMTPSSL              = Sql.AddParameter(cmd, "@MAIL_SMTPSSL"             , nMAIL_SMTPSSL               );
				IDbDataParameter parMAIL_SENDTYPE             = Sql.AddParameter(cmd, "@MAIL_SENDTYPE"            , sMAIL_SENDTYPE              ,  25);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdUSERS_Update
		/// <summary>
		/// spUSERS_Update
		/// </summary>
		public IDbCommand cmdUSERS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_Update";
			IDbDataParameter parID                        = Sql.CreateParameter(cmd, "@ID"                       , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID          = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"         , "Guid",  16);
			IDbDataParameter parUSER_NAME                 = Sql.CreateParameter(cmd, "@USER_NAME"                , "string",  60);
			IDbDataParameter parFIRST_NAME                = Sql.CreateParameter(cmd, "@FIRST_NAME"               , "string",  30);
			IDbDataParameter parLAST_NAME                 = Sql.CreateParameter(cmd, "@LAST_NAME"                , "string",  30);
			IDbDataParameter parREPORTS_TO_ID             = Sql.CreateParameter(cmd, "@REPORTS_TO_ID"            , "Guid",  16);
			IDbDataParameter parIS_ADMIN                  = Sql.CreateParameter(cmd, "@IS_ADMIN"                 , "bool",   1);
			IDbDataParameter parRECEIVE_NOTIFICATIONS     = Sql.CreateParameter(cmd, "@RECEIVE_NOTIFICATIONS"    , "bool",   1);
			IDbDataParameter parDESCRIPTION               = Sql.CreateParameter(cmd, "@DESCRIPTION"              , "string", 104857600);
			IDbDataParameter parTITLE                     = Sql.CreateParameter(cmd, "@TITLE"                    , "string",  50);
			IDbDataParameter parDEPARTMENT                = Sql.CreateParameter(cmd, "@DEPARTMENT"               , "string",  50);
			IDbDataParameter parPHONE_HOME                = Sql.CreateParameter(cmd, "@PHONE_HOME"               , "string",  50);
			IDbDataParameter parPHONE_MOBILE              = Sql.CreateParameter(cmd, "@PHONE_MOBILE"             , "string",  50);
			IDbDataParameter parPHONE_WORK                = Sql.CreateParameter(cmd, "@PHONE_WORK"               , "string",  50);
			IDbDataParameter parPHONE_OTHER               = Sql.CreateParameter(cmd, "@PHONE_OTHER"              , "string",  50);
			IDbDataParameter parPHONE_FAX                 = Sql.CreateParameter(cmd, "@PHONE_FAX"                , "string",  50);
			IDbDataParameter parEMAIL1                    = Sql.CreateParameter(cmd, "@EMAIL1"                   , "string", 100);
			IDbDataParameter parEMAIL2                    = Sql.CreateParameter(cmd, "@EMAIL2"                   , "string", 100);
			IDbDataParameter parSTATUS                    = Sql.CreateParameter(cmd, "@STATUS"                   , "string",  25);
			IDbDataParameter parADDRESS_STREET            = Sql.CreateParameter(cmd, "@ADDRESS_STREET"           , "string", 150);
			IDbDataParameter parADDRESS_CITY              = Sql.CreateParameter(cmd, "@ADDRESS_CITY"             , "string", 100);
			IDbDataParameter parADDRESS_STATE             = Sql.CreateParameter(cmd, "@ADDRESS_STATE"            , "string", 100);
			IDbDataParameter parADDRESS_POSTALCODE        = Sql.CreateParameter(cmd, "@ADDRESS_POSTALCODE"       , "string",   9);
			IDbDataParameter parADDRESS_COUNTRY           = Sql.CreateParameter(cmd, "@ADDRESS_COUNTRY"          , "string",  25);
			IDbDataParameter parUSER_PREFERENCES          = Sql.CreateParameter(cmd, "@USER_PREFERENCES"         , "string", 104857600);
			IDbDataParameter parPORTAL_ONLY               = Sql.CreateParameter(cmd, "@PORTAL_ONLY"              , "bool",   1);
			IDbDataParameter parEMPLOYEE_STATUS           = Sql.CreateParameter(cmd, "@EMPLOYEE_STATUS"          , "string",  25);
			IDbDataParameter parMESSENGER_ID              = Sql.CreateParameter(cmd, "@MESSENGER_ID"             , "string",  25);
			IDbDataParameter parMESSENGER_TYPE            = Sql.CreateParameter(cmd, "@MESSENGER_TYPE"           , "string",  25);
			IDbDataParameter parPARENT_TYPE               = Sql.CreateParameter(cmd, "@PARENT_TYPE"              , "string",  25);
			IDbDataParameter parPARENT_ID                 = Sql.CreateParameter(cmd, "@PARENT_ID"                , "Guid",  16);
			IDbDataParameter parIS_GROUP                  = Sql.CreateParameter(cmd, "@IS_GROUP"                 , "bool",   1);
			IDbDataParameter parDEFAULT_TEAM              = Sql.CreateParameter(cmd, "@DEFAULT_TEAM"             , "Guid",  16);
			IDbDataParameter parIS_ADMIN_DELEGATE         = Sql.CreateParameter(cmd, "@IS_ADMIN_DELEGATE"        , "bool",   1);
			IDbDataParameter parMAIL_SMTPUSER             = Sql.CreateParameter(cmd, "@MAIL_SMTPUSER"            , "string",  60);
			IDbDataParameter parMAIL_SMTPPASS             = Sql.CreateParameter(cmd, "@MAIL_SMTPPASS"            , "string", 100);
			IDbDataParameter parSYSTEM_GENERATED_PASSWORD = Sql.CreateParameter(cmd, "@SYSTEM_GENERATED_PASSWORD", "bool",   1);
			IDbDataParameter parGOOGLEAPPS_SYNC_CONTACTS  = Sql.CreateParameter(cmd, "@GOOGLEAPPS_SYNC_CONTACTS" , "bool",   1);
			IDbDataParameter parGOOGLEAPPS_SYNC_CALENDAR  = Sql.CreateParameter(cmd, "@GOOGLEAPPS_SYNC_CALENDAR" , "bool",   1);
			IDbDataParameter parGOOGLEAPPS_USERNAME       = Sql.CreateParameter(cmd, "@GOOGLEAPPS_USERNAME"      , "string", 100);
			IDbDataParameter parGOOGLEAPPS_PASSWORD       = Sql.CreateParameter(cmd, "@GOOGLEAPPS_PASSWORD"      , "string", 100);
			IDbDataParameter parFACEBOOK_ID               = Sql.CreateParameter(cmd, "@FACEBOOK_ID"              , "string",  25);
			IDbDataParameter parICLOUD_SYNC_CONTACTS      = Sql.CreateParameter(cmd, "@ICLOUD_SYNC_CONTACTS"     , "bool",   1);
			IDbDataParameter parICLOUD_SYNC_CALENDAR      = Sql.CreateParameter(cmd, "@ICLOUD_SYNC_CALENDAR"     , "bool",   1);
			IDbDataParameter parICLOUD_USERNAME           = Sql.CreateParameter(cmd, "@ICLOUD_USERNAME"          , "string", 100);
			IDbDataParameter parICLOUD_PASSWORD           = Sql.CreateParameter(cmd, "@ICLOUD_PASSWORD"          , "string", 100);
			IDbDataParameter parTHEME                     = Sql.CreateParameter(cmd, "@THEME"                    , "string",  25);
			IDbDataParameter parDATE_FORMAT               = Sql.CreateParameter(cmd, "@DATE_FORMAT"              , "string",  25);
			IDbDataParameter parTIME_FORMAT               = Sql.CreateParameter(cmd, "@TIME_FORMAT"              , "string",  25);
			IDbDataParameter parLANG                      = Sql.CreateParameter(cmd, "@LANG"                     , "string",  10);
			IDbDataParameter parCURRENCY_ID               = Sql.CreateParameter(cmd, "@CURRENCY_ID"              , "Guid",  16);
			IDbDataParameter parTIMEZONE_ID               = Sql.CreateParameter(cmd, "@TIMEZONE_ID"              , "Guid",  16);
			IDbDataParameter parSAVE_QUERY                = Sql.CreateParameter(cmd, "@SAVE_QUERY"               , "bool",   1);
			IDbDataParameter parGROUP_TABS                = Sql.CreateParameter(cmd, "@GROUP_TABS"               , "bool",   1);
			IDbDataParameter parSUBPANEL_TABS             = Sql.CreateParameter(cmd, "@SUBPANEL_TABS"            , "bool",   1);
			IDbDataParameter parEXTENSION                 = Sql.CreateParameter(cmd, "@EXTENSION"                , "string",  25);
			IDbDataParameter parSMS_OPT_IN                = Sql.CreateParameter(cmd, "@SMS_OPT_IN"               , "string",  25);
			IDbDataParameter parPICTURE                   = Sql.CreateParameter(cmd, "@PICTURE"                  , "string", 104857600);
			IDbDataParameter parMAIL_SMTPSERVER           = Sql.CreateParameter(cmd, "@MAIL_SMTPSERVER"          , "string", 100);
			IDbDataParameter parMAIL_SMTPPORT             = Sql.CreateParameter(cmd, "@MAIL_SMTPPORT"            , "Int32",   4);
			IDbDataParameter parMAIL_SMTPAUTH_REQ         = Sql.CreateParameter(cmd, "@MAIL_SMTPAUTH_REQ"        , "bool",   1);
			IDbDataParameter parMAIL_SMTPSSL              = Sql.CreateParameter(cmd, "@MAIL_SMTPSSL"             , "Int32",   4);
			IDbDataParameter parMAIL_SENDTYPE             = Sql.CreateParameter(cmd, "@MAIL_SENDTYPE"            , "string",  25);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spUSERS_UpdatePrimaryRole
		/// <summary>
		/// spUSERS_UpdatePrimaryRole
		/// </summary>
		public void spUSERS_UpdatePrimaryRole(Guid gID, Guid gROLE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_UpdatePrimaryRole";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_UpdatePrimaryRole
		/// <summary>
		/// spUSERS_UpdatePrimaryRole
		/// </summary>
		public void spUSERS_UpdatePrimaryRole(Guid gID, Guid gROLE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_UpdatePrimaryRole";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parROLE_ID          = Sql.AddParameter(cmd, "@ROLE_ID"         , gROLE_ID           );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_UpdatePrimaryRole
		/// <summary>
		/// spUSERS_UpdatePrimaryRole
		/// </summary>
		public IDbCommand cmdUSERS_UpdatePrimaryRole(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_UpdatePrimaryRole";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parROLE_ID          = Sql.CreateParameter(cmd, "@ROLE_ID"         , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spUSERS_UpdateStatus
		/// <summary>
		/// spUSERS_UpdateStatus
		/// </summary>
		public void spUSERS_UpdateStatus(Guid gID, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_UpdateStatus";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_UpdateStatus
		/// <summary>
		/// spUSERS_UpdateStatus
		/// </summary>
		public void spUSERS_UpdateStatus(Guid gID, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_UpdateStatus";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_UpdateStatus
		/// <summary>
		/// spUSERS_UpdateStatus
		/// </summary>
		public IDbCommand cmdUSERS_UpdateStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_UpdateStatus";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region spUSERS_WizardUpdate
		/// <summary>
		/// spUSERS_WizardUpdate
		/// </summary>
		public void spUSERS_WizardUpdate(Guid gID, string sDATE_FORMAT, string sTIME_FORMAT, string sLANG, Guid gCURRENCY_ID, Guid gTIMEZONE_ID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spUSERS_WizardUpdate";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parDATE_FORMAT      = Sql.AddParameter(cmd, "@DATE_FORMAT"     , sDATE_FORMAT       ,  25);
							IDbDataParameter parTIME_FORMAT      = Sql.AddParameter(cmd, "@TIME_FORMAT"     , sTIME_FORMAT       ,  25);
							IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
							IDbDataParameter parCURRENCY_ID      = Sql.AddParameter(cmd, "@CURRENCY_ID"     , gCURRENCY_ID       );
							IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spUSERS_WizardUpdate
		/// <summary>
		/// spUSERS_WizardUpdate
		/// </summary>
		public void spUSERS_WizardUpdate(Guid gID, string sDATE_FORMAT, string sTIME_FORMAT, string sLANG, Guid gCURRENCY_ID, Guid gTIMEZONE_ID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spUSERS_WizardUpdate";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parDATE_FORMAT      = Sql.AddParameter(cmd, "@DATE_FORMAT"     , sDATE_FORMAT       ,  25);
				IDbDataParameter parTIME_FORMAT      = Sql.AddParameter(cmd, "@TIME_FORMAT"     , sTIME_FORMAT       ,  25);
				IDbDataParameter parLANG             = Sql.AddParameter(cmd, "@LANG"            , sLANG              ,  10);
				IDbDataParameter parCURRENCY_ID      = Sql.AddParameter(cmd, "@CURRENCY_ID"     , gCURRENCY_ID       );
				IDbDataParameter parTIMEZONE_ID      = Sql.AddParameter(cmd, "@TIMEZONE_ID"     , gTIMEZONE_ID       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdUSERS_WizardUpdate
		/// <summary>
		/// spUSERS_WizardUpdate
		/// </summary>
		public IDbCommand cmdUSERS_WizardUpdate(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spUSERS_WizardUpdate";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parDATE_FORMAT      = Sql.CreateParameter(cmd, "@DATE_FORMAT"     , "string",  25);
			IDbDataParameter parTIME_FORMAT      = Sql.CreateParameter(cmd, "@TIME_FORMAT"     , "string",  25);
			IDbDataParameter parLANG             = Sql.CreateParameter(cmd, "@LANG"            , "string",  10);
			IDbDataParameter parCURRENCY_ID      = Sql.CreateParameter(cmd, "@CURRENCY_ID"     , "Guid",  16);
			IDbDataParameter parTIMEZONE_ID      = Sql.CreateParameter(cmd, "@TIMEZONE_ID"     , "Guid",  16);
			return cmd;
		}
		#endregion

		#region spVERSIONS_Delete
		/// <summary>
		/// spVERSIONS_Delete
		/// </summary>
		public void spVERSIONS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spVERSIONS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spVERSIONS_Delete
		/// <summary>
		/// spVERSIONS_Delete
		/// </summary>
		public void spVERSIONS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spVERSIONS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdVERSIONS_Delete
		/// <summary>
		/// spVERSIONS_Delete
		/// </summary>
		public IDbCommand cmdVERSIONS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spVERSIONS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spVERSIONS_Update
		/// <summary>
		/// spVERSIONS_Update
		/// </summary>
		public void spVERSIONS_Update(ref Guid gID, string sNAME, string sFILE_VERSION, string sDB_VERSION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spVERSIONS_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
							IDbDataParameter parFILE_VERSION     = Sql.AddParameter(cmd, "@FILE_VERSION"    , sFILE_VERSION      , 255);
							IDbDataParameter parDB_VERSION       = Sql.AddParameter(cmd, "@DB_VERSION"      , sDB_VERSION        , 255);
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spVERSIONS_Update
		/// <summary>
		/// spVERSIONS_Update
		/// </summary>
		public void spVERSIONS_Update(ref Guid gID, string sNAME, string sFILE_VERSION, string sDB_VERSION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spVERSIONS_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parNAME             = Sql.AddParameter(cmd, "@NAME"            , sNAME              , 255);
				IDbDataParameter parFILE_VERSION     = Sql.AddParameter(cmd, "@FILE_VERSION"    , sFILE_VERSION      , 255);
				IDbDataParameter parDB_VERSION       = Sql.AddParameter(cmd, "@DB_VERSION"      , sDB_VERSION        , 255);
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdVERSIONS_Update
		/// <summary>
		/// spVERSIONS_Update
		/// </summary>
		public IDbCommand cmdVERSIONS_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spVERSIONS_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parNAME             = Sql.CreateParameter(cmd, "@NAME"            , "string", 255);
			IDbDataParameter parFILE_VERSION     = Sql.CreateParameter(cmd, "@FILE_VERSION"    , "string", 255);
			IDbDataParameter parDB_VERSION       = Sql.CreateParameter(cmd, "@DB_VERSION"      , "string", 255);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spWORKFLOW_EVENTS_Delete
		/// <summary>
		/// spWORKFLOW_EVENTS_Delete
		/// </summary>
		public void spWORKFLOW_EVENTS_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spWORKFLOW_EVENTS_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spWORKFLOW_EVENTS_Delete
		/// <summary>
		/// spWORKFLOW_EVENTS_Delete
		/// </summary>
		public void spWORKFLOW_EVENTS_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spWORKFLOW_EVENTS_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdWORKFLOW_EVENTS_Delete
		/// <summary>
		/// spWORKFLOW_EVENTS_Delete
		/// </summary>
		public IDbCommand cmdWORKFLOW_EVENTS_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spWORKFLOW_EVENTS_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spWORKFLOW_EVENTS_ProcessAll
		/// <summary>
		/// spWORKFLOW_EVENTS_ProcessAll
		/// </summary>
		public void spWORKFLOW_EVENTS_ProcessAll()
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spWORKFLOW_EVENTS_ProcessAll";
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spWORKFLOW_EVENTS_ProcessAll
		/// <summary>
		/// spWORKFLOW_EVENTS_ProcessAll
		/// </summary>
		public void spWORKFLOW_EVENTS_ProcessAll(IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spWORKFLOW_EVENTS_ProcessAll";
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdWORKFLOW_EVENTS_ProcessAll
		/// <summary>
		/// spWORKFLOW_EVENTS_ProcessAll
		/// </summary>
		public IDbCommand cmdWORKFLOW_EVENTS_ProcessAll(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spWORKFLOW_EVENTS_ProcessAll";
			return cmd;
		}
		#endregion

		#region spPROCESSES_ChangeAssignedUser
		/// <summary>
		/// spPROCESSES_ChangeAssignedUser
		/// </summary>
		public void spPROCESSES_ChangeAssignedUser(Guid gID, Guid gASSIGNED_USER_ID, string sPROCESS_NOTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_ChangeAssignedUser";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
							IDbDataParameter parPROCESS_NOTES    = Sql.AddParameter(cmd, "@PROCESS_NOTES"   , sPROCESS_NOTES     );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_ChangeAssignedUser
		/// <summary>
		/// spPROCESSES_ChangeAssignedUser
		/// </summary>
		public void spPROCESSES_ChangeAssignedUser(Guid gID, Guid gASSIGNED_USER_ID, string sPROCESS_NOTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_ChangeAssignedUser";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parASSIGNED_USER_ID = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID", gASSIGNED_USER_ID  );
				IDbDataParameter parPROCESS_NOTES    = Sql.AddParameter(cmd, "@PROCESS_NOTES"   , sPROCESS_NOTES     );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_ChangeAssignedUser
		/// <summary>
		/// spPROCESSES_ChangeAssignedUser
		/// </summary>
		public IDbCommand cmdPROCESSES_ChangeAssignedUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_ChangeAssignedUser";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID", "Guid",  16);
			IDbDataParameter parPROCESS_NOTES    = Sql.CreateParameter(cmd, "@PROCESS_NOTES"   , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spPROCESSES_ChangeProcessUser
		/// <summary>
		/// spPROCESSES_ChangeProcessUser
		/// </summary>
		public void spPROCESSES_ChangeProcessUser(Guid gID, Guid gPROCESS_USER_ID, string sPROCESS_NOTES)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_ChangeProcessUser";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROCESS_USER_ID  = Sql.AddParameter(cmd, "@PROCESS_USER_ID" , gPROCESS_USER_ID   );
							IDbDataParameter parPROCESS_NOTES    = Sql.AddParameter(cmd, "@PROCESS_NOTES"   , sPROCESS_NOTES     );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_ChangeProcessUser
		/// <summary>
		/// spPROCESSES_ChangeProcessUser
		/// </summary>
		public void spPROCESSES_ChangeProcessUser(Guid gID, Guid gPROCESS_USER_ID, string sPROCESS_NOTES, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_ChangeProcessUser";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROCESS_USER_ID  = Sql.AddParameter(cmd, "@PROCESS_USER_ID" , gPROCESS_USER_ID   );
				IDbDataParameter parPROCESS_NOTES    = Sql.AddParameter(cmd, "@PROCESS_NOTES"   , sPROCESS_NOTES     );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_ChangeProcessUser
		/// <summary>
		/// spPROCESSES_ChangeProcessUser
		/// </summary>
		public IDbCommand cmdPROCESSES_ChangeProcessUser(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_ChangeProcessUser";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROCESS_USER_ID  = Sql.CreateParameter(cmd, "@PROCESS_USER_ID" , "Guid",  16);
			IDbDataParameter parPROCESS_NOTES    = Sql.CreateParameter(cmd, "@PROCESS_NOTES"   , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spPROCESSES_EndEventGateway
		/// <summary>
		/// spPROCESSES_EndEventGateway
		/// </summary>
		public void spPROCESSES_EndEventGateway(Guid gBUSINESS_PROCESS_INSTANCE_ID, string sBOOKMARK_NAME)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_EndEventGateway";
							IDbDataParameter parMODIFIED_USER_ID             = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"            ,  Security.USER_ID              );
							IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", gBUSINESS_PROCESS_INSTANCE_ID  );
							IDbDataParameter parBOOKMARK_NAME                = Sql.AddParameter(cmd, "@BOOKMARK_NAME"               , sBOOKMARK_NAME                 , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_EndEventGateway
		/// <summary>
		/// spPROCESSES_EndEventGateway
		/// </summary>
		public void spPROCESSES_EndEventGateway(Guid gBUSINESS_PROCESS_INSTANCE_ID, string sBOOKMARK_NAME, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_EndEventGateway";
				IDbDataParameter parMODIFIED_USER_ID             = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"            ,  Security.USER_ID              );
				IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", gBUSINESS_PROCESS_INSTANCE_ID  );
				IDbDataParameter parBOOKMARK_NAME                = Sql.AddParameter(cmd, "@BOOKMARK_NAME"               , sBOOKMARK_NAME                 , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_EndEventGateway
		/// <summary>
		/// spPROCESSES_EndEventGateway
		/// </summary>
		public IDbCommand cmdPROCESSES_EndEventGateway(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_EndEventGateway";
			IDbDataParameter parMODIFIED_USER_ID             = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"            , "Guid",  16);
			IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.CreateParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", "Guid",  16);
			IDbDataParameter parBOOKMARK_NAME                = Sql.CreateParameter(cmd, "@BOOKMARK_NAME"               , "string", 100);
			return cmd;
		}
		#endregion

		#region spPROCESSES_HISTORY_Delete
		/// <summary>
		/// spPROCESSES_HISTORY_Delete
		/// </summary>
		public void spPROCESSES_HISTORY_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_HISTORY_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_HISTORY_Delete
		/// <summary>
		/// spPROCESSES_HISTORY_Delete
		/// </summary>
		public void spPROCESSES_HISTORY_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_HISTORY_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_HISTORY_Delete
		/// <summary>
		/// spPROCESSES_HISTORY_Delete
		/// </summary>
		public IDbCommand cmdPROCESSES_HISTORY_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_HISTORY_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROCESSES_HISTORY_InsertOnly
		/// <summary>
		/// spPROCESSES_HISTORY_InsertOnly
		/// </summary>
		public void spPROCESSES_HISTORY_InsertOnly(Guid gPROCESS_ID, Guid gBUSINESS_PROCESS_INSTANCE_ID, string sPROCESS_ACTION, Guid gPROCESS_USER_ID, Guid gASSIGNED_USER_ID, Guid gAPPROVAL_USER_ID, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_HISTORY_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID             = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"            ,  Security.USER_ID              );
							IDbDataParameter parPROCESS_ID                   = Sql.AddParameter(cmd, "@PROCESS_ID"                  , gPROCESS_ID                    );
							IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", gBUSINESS_PROCESS_INSTANCE_ID  );
							IDbDataParameter parPROCESS_ACTION               = Sql.AddParameter(cmd, "@PROCESS_ACTION"              , sPROCESS_ACTION                ,  50);
							IDbDataParameter parPROCESS_USER_ID              = Sql.AddParameter(cmd, "@PROCESS_USER_ID"             , gPROCESS_USER_ID               );
							IDbDataParameter parASSIGNED_USER_ID             = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"            , gASSIGNED_USER_ID              );
							IDbDataParameter parAPPROVAL_USER_ID             = Sql.AddParameter(cmd, "@APPROVAL_USER_ID"            , gAPPROVAL_USER_ID              );
							IDbDataParameter parSTATUS                       = Sql.AddParameter(cmd, "@STATUS"                      , sSTATUS                        ,  50);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_HISTORY_InsertOnly
		/// <summary>
		/// spPROCESSES_HISTORY_InsertOnly
		/// </summary>
		public void spPROCESSES_HISTORY_InsertOnly(Guid gPROCESS_ID, Guid gBUSINESS_PROCESS_INSTANCE_ID, string sPROCESS_ACTION, Guid gPROCESS_USER_ID, Guid gASSIGNED_USER_ID, Guid gAPPROVAL_USER_ID, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_HISTORY_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID             = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"            ,  Security.USER_ID              );
				IDbDataParameter parPROCESS_ID                   = Sql.AddParameter(cmd, "@PROCESS_ID"                  , gPROCESS_ID                    );
				IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", gBUSINESS_PROCESS_INSTANCE_ID  );
				IDbDataParameter parPROCESS_ACTION               = Sql.AddParameter(cmd, "@PROCESS_ACTION"              , sPROCESS_ACTION                ,  50);
				IDbDataParameter parPROCESS_USER_ID              = Sql.AddParameter(cmd, "@PROCESS_USER_ID"             , gPROCESS_USER_ID               );
				IDbDataParameter parASSIGNED_USER_ID             = Sql.AddParameter(cmd, "@ASSIGNED_USER_ID"            , gASSIGNED_USER_ID              );
				IDbDataParameter parAPPROVAL_USER_ID             = Sql.AddParameter(cmd, "@APPROVAL_USER_ID"            , gAPPROVAL_USER_ID              );
				IDbDataParameter parSTATUS                       = Sql.AddParameter(cmd, "@STATUS"                      , sSTATUS                        ,  50);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_HISTORY_InsertOnly
		/// <summary>
		/// spPROCESSES_HISTORY_InsertOnly
		/// </summary>
		public IDbCommand cmdPROCESSES_HISTORY_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_HISTORY_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID             = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"            , "Guid",  16);
			IDbDataParameter parPROCESS_ID                   = Sql.CreateParameter(cmd, "@PROCESS_ID"                  , "Guid",  16);
			IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.CreateParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", "Guid",  16);
			IDbDataParameter parPROCESS_ACTION               = Sql.CreateParameter(cmd, "@PROCESS_ACTION"              , "string",  50);
			IDbDataParameter parPROCESS_USER_ID              = Sql.CreateParameter(cmd, "@PROCESS_USER_ID"             , "Guid",  16);
			IDbDataParameter parASSIGNED_USER_ID             = Sql.CreateParameter(cmd, "@ASSIGNED_USER_ID"            , "Guid",  16);
			IDbDataParameter parAPPROVAL_USER_ID             = Sql.CreateParameter(cmd, "@APPROVAL_USER_ID"            , "Guid",  16);
			IDbDataParameter parSTATUS                       = Sql.CreateParameter(cmd, "@STATUS"                      , "string",  50);
			return cmd;
		}
		#endregion

		#region spPROCESSES_InsertOnly
		/// <summary>
		/// spPROCESSES_InsertOnly
		/// </summary>
		public void spPROCESSES_InsertOnly(Guid gBUSINESS_PROCESS_INSTANCE_ID, string sACTIVITY_INSTANCE, string sACTIVITY_NAME, Guid gBUSINESS_PROCESS_ID, Guid gPROCESS_USER_ID, string sBOOKMARK_NAME, string sPARENT_TYPE, Guid gPARENT_ID, string sUSER_TASK_TYPE, bool bCHANGE_ASSIGNED_USER, Guid gCHANGE_ASSIGNED_TEAM_ID, bool bCHANGE_PROCESS_USER, Guid gCHANGE_PROCESS_TEAM_ID, string sUSER_ASSIGNMENT_METHOD, Guid gSTATIC_ASSIGNED_USER_ID, Guid gDYNAMIC_PROCESS_TEAM_ID, Guid gDYNAMIC_PROCESS_ROLE_ID, string sREAD_ONLY_FIELDS, string sREQUIRED_FIELDS, string sDURATION_UNITS, Int32 nDURATION_VALUE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_InsertOnly";
							IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", gBUSINESS_PROCESS_INSTANCE_ID  );
							IDbDataParameter parACTIVITY_INSTANCE            = Sql.AddParameter(cmd, "@ACTIVITY_INSTANCE"           , sACTIVITY_INSTANCE             , 100);
							IDbDataParameter parACTIVITY_NAME                = Sql.AddParameter(cmd, "@ACTIVITY_NAME"               , sACTIVITY_NAME                 , 100);
							IDbDataParameter parBUSINESS_PROCESS_ID          = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_ID"         , gBUSINESS_PROCESS_ID           );
							IDbDataParameter parPROCESS_USER_ID              = Sql.AddParameter(cmd, "@PROCESS_USER_ID"             , gPROCESS_USER_ID               );
							IDbDataParameter parBOOKMARK_NAME                = Sql.AddParameter(cmd, "@BOOKMARK_NAME"               , sBOOKMARK_NAME                 , 100);
							IDbDataParameter parPARENT_TYPE                  = Sql.AddParameter(cmd, "@PARENT_TYPE"                 , sPARENT_TYPE                   ,  50);
							IDbDataParameter parPARENT_ID                    = Sql.AddParameter(cmd, "@PARENT_ID"                   , gPARENT_ID                     );
							IDbDataParameter parUSER_TASK_TYPE               = Sql.AddParameter(cmd, "@USER_TASK_TYPE"              , sUSER_TASK_TYPE                ,  50);
							IDbDataParameter parCHANGE_ASSIGNED_USER         = Sql.AddParameter(cmd, "@CHANGE_ASSIGNED_USER"        , bCHANGE_ASSIGNED_USER          );
							IDbDataParameter parCHANGE_ASSIGNED_TEAM_ID      = Sql.AddParameter(cmd, "@CHANGE_ASSIGNED_TEAM_ID"     , gCHANGE_ASSIGNED_TEAM_ID       );
							IDbDataParameter parCHANGE_PROCESS_USER          = Sql.AddParameter(cmd, "@CHANGE_PROCESS_USER"         , bCHANGE_PROCESS_USER           );
							IDbDataParameter parCHANGE_PROCESS_TEAM_ID       = Sql.AddParameter(cmd, "@CHANGE_PROCESS_TEAM_ID"      , gCHANGE_PROCESS_TEAM_ID        );
							IDbDataParameter parUSER_ASSIGNMENT_METHOD       = Sql.AddParameter(cmd, "@USER_ASSIGNMENT_METHOD"      , sUSER_ASSIGNMENT_METHOD        ,  50);
							IDbDataParameter parSTATIC_ASSIGNED_USER_ID      = Sql.AddParameter(cmd, "@STATIC_ASSIGNED_USER_ID"     , gSTATIC_ASSIGNED_USER_ID       );
							IDbDataParameter parDYNAMIC_PROCESS_TEAM_ID      = Sql.AddParameter(cmd, "@DYNAMIC_PROCESS_TEAM_ID"     , gDYNAMIC_PROCESS_TEAM_ID       );
							IDbDataParameter parDYNAMIC_PROCESS_ROLE_ID      = Sql.AddParameter(cmd, "@DYNAMIC_PROCESS_ROLE_ID"     , gDYNAMIC_PROCESS_ROLE_ID       );
							IDbDataParameter parREAD_ONLY_FIELDS             = Sql.AddParameter(cmd, "@READ_ONLY_FIELDS"            , sREAD_ONLY_FIELDS              );
							IDbDataParameter parREQUIRED_FIELDS              = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"             , sREQUIRED_FIELDS               );
							IDbDataParameter parDURATION_UNITS               = Sql.AddParameter(cmd, "@DURATION_UNITS"              , sDURATION_UNITS                ,  50);
							IDbDataParameter parDURATION_VALUE               = Sql.AddParameter(cmd, "@DURATION_VALUE"              , nDURATION_VALUE                );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_InsertOnly
		/// <summary>
		/// spPROCESSES_InsertOnly
		/// </summary>
		public void spPROCESSES_InsertOnly(Guid gBUSINESS_PROCESS_INSTANCE_ID, string sACTIVITY_INSTANCE, string sACTIVITY_NAME, Guid gBUSINESS_PROCESS_ID, Guid gPROCESS_USER_ID, string sBOOKMARK_NAME, string sPARENT_TYPE, Guid gPARENT_ID, string sUSER_TASK_TYPE, bool bCHANGE_ASSIGNED_USER, Guid gCHANGE_ASSIGNED_TEAM_ID, bool bCHANGE_PROCESS_USER, Guid gCHANGE_PROCESS_TEAM_ID, string sUSER_ASSIGNMENT_METHOD, Guid gSTATIC_ASSIGNED_USER_ID, Guid gDYNAMIC_PROCESS_TEAM_ID, Guid gDYNAMIC_PROCESS_ROLE_ID, string sREAD_ONLY_FIELDS, string sREQUIRED_FIELDS, string sDURATION_UNITS, Int32 nDURATION_VALUE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_InsertOnly";
				IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", gBUSINESS_PROCESS_INSTANCE_ID  );
				IDbDataParameter parACTIVITY_INSTANCE            = Sql.AddParameter(cmd, "@ACTIVITY_INSTANCE"           , sACTIVITY_INSTANCE             , 100);
				IDbDataParameter parACTIVITY_NAME                = Sql.AddParameter(cmd, "@ACTIVITY_NAME"               , sACTIVITY_NAME                 , 100);
				IDbDataParameter parBUSINESS_PROCESS_ID          = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_ID"         , gBUSINESS_PROCESS_ID           );
				IDbDataParameter parPROCESS_USER_ID              = Sql.AddParameter(cmd, "@PROCESS_USER_ID"             , gPROCESS_USER_ID               );
				IDbDataParameter parBOOKMARK_NAME                = Sql.AddParameter(cmd, "@BOOKMARK_NAME"               , sBOOKMARK_NAME                 , 100);
				IDbDataParameter parPARENT_TYPE                  = Sql.AddParameter(cmd, "@PARENT_TYPE"                 , sPARENT_TYPE                   ,  50);
				IDbDataParameter parPARENT_ID                    = Sql.AddParameter(cmd, "@PARENT_ID"                   , gPARENT_ID                     );
				IDbDataParameter parUSER_TASK_TYPE               = Sql.AddParameter(cmd, "@USER_TASK_TYPE"              , sUSER_TASK_TYPE                ,  50);
				IDbDataParameter parCHANGE_ASSIGNED_USER         = Sql.AddParameter(cmd, "@CHANGE_ASSIGNED_USER"        , bCHANGE_ASSIGNED_USER          );
				IDbDataParameter parCHANGE_ASSIGNED_TEAM_ID      = Sql.AddParameter(cmd, "@CHANGE_ASSIGNED_TEAM_ID"     , gCHANGE_ASSIGNED_TEAM_ID       );
				IDbDataParameter parCHANGE_PROCESS_USER          = Sql.AddParameter(cmd, "@CHANGE_PROCESS_USER"         , bCHANGE_PROCESS_USER           );
				IDbDataParameter parCHANGE_PROCESS_TEAM_ID       = Sql.AddParameter(cmd, "@CHANGE_PROCESS_TEAM_ID"      , gCHANGE_PROCESS_TEAM_ID        );
				IDbDataParameter parUSER_ASSIGNMENT_METHOD       = Sql.AddParameter(cmd, "@USER_ASSIGNMENT_METHOD"      , sUSER_ASSIGNMENT_METHOD        ,  50);
				IDbDataParameter parSTATIC_ASSIGNED_USER_ID      = Sql.AddParameter(cmd, "@STATIC_ASSIGNED_USER_ID"     , gSTATIC_ASSIGNED_USER_ID       );
				IDbDataParameter parDYNAMIC_PROCESS_TEAM_ID      = Sql.AddParameter(cmd, "@DYNAMIC_PROCESS_TEAM_ID"     , gDYNAMIC_PROCESS_TEAM_ID       );
				IDbDataParameter parDYNAMIC_PROCESS_ROLE_ID      = Sql.AddParameter(cmd, "@DYNAMIC_PROCESS_ROLE_ID"     , gDYNAMIC_PROCESS_ROLE_ID       );
				IDbDataParameter parREAD_ONLY_FIELDS             = Sql.AddParameter(cmd, "@READ_ONLY_FIELDS"            , sREAD_ONLY_FIELDS              );
				IDbDataParameter parREQUIRED_FIELDS              = Sql.AddParameter(cmd, "@REQUIRED_FIELDS"             , sREQUIRED_FIELDS               );
				IDbDataParameter parDURATION_UNITS               = Sql.AddParameter(cmd, "@DURATION_UNITS"              , sDURATION_UNITS                ,  50);
				IDbDataParameter parDURATION_VALUE               = Sql.AddParameter(cmd, "@DURATION_VALUE"              , nDURATION_VALUE                );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_InsertOnly
		/// <summary>
		/// spPROCESSES_InsertOnly
		/// </summary>
		public IDbCommand cmdPROCESSES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_InsertOnly";
			IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.CreateParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", "Guid",  16);
			IDbDataParameter parACTIVITY_INSTANCE            = Sql.CreateParameter(cmd, "@ACTIVITY_INSTANCE"           , "string", 100);
			IDbDataParameter parACTIVITY_NAME                = Sql.CreateParameter(cmd, "@ACTIVITY_NAME"               , "string", 100);
			IDbDataParameter parBUSINESS_PROCESS_ID          = Sql.CreateParameter(cmd, "@BUSINESS_PROCESS_ID"         , "Guid",  16);
			IDbDataParameter parPROCESS_USER_ID              = Sql.CreateParameter(cmd, "@PROCESS_USER_ID"             , "Guid",  16);
			IDbDataParameter parBOOKMARK_NAME                = Sql.CreateParameter(cmd, "@BOOKMARK_NAME"               , "string", 100);
			IDbDataParameter parPARENT_TYPE                  = Sql.CreateParameter(cmd, "@PARENT_TYPE"                 , "string",  50);
			IDbDataParameter parPARENT_ID                    = Sql.CreateParameter(cmd, "@PARENT_ID"                   , "Guid",  16);
			IDbDataParameter parUSER_TASK_TYPE               = Sql.CreateParameter(cmd, "@USER_TASK_TYPE"              , "string",  50);
			IDbDataParameter parCHANGE_ASSIGNED_USER         = Sql.CreateParameter(cmd, "@CHANGE_ASSIGNED_USER"        , "bool",   1);
			IDbDataParameter parCHANGE_ASSIGNED_TEAM_ID      = Sql.CreateParameter(cmd, "@CHANGE_ASSIGNED_TEAM_ID"     , "Guid",  16);
			IDbDataParameter parCHANGE_PROCESS_USER          = Sql.CreateParameter(cmd, "@CHANGE_PROCESS_USER"         , "bool",   1);
			IDbDataParameter parCHANGE_PROCESS_TEAM_ID       = Sql.CreateParameter(cmd, "@CHANGE_PROCESS_TEAM_ID"      , "Guid",  16);
			IDbDataParameter parUSER_ASSIGNMENT_METHOD       = Sql.CreateParameter(cmd, "@USER_ASSIGNMENT_METHOD"      , "string",  50);
			IDbDataParameter parSTATIC_ASSIGNED_USER_ID      = Sql.CreateParameter(cmd, "@STATIC_ASSIGNED_USER_ID"     , "Guid",  16);
			IDbDataParameter parDYNAMIC_PROCESS_TEAM_ID      = Sql.CreateParameter(cmd, "@DYNAMIC_PROCESS_TEAM_ID"     , "Guid",  16);
			IDbDataParameter parDYNAMIC_PROCESS_ROLE_ID      = Sql.CreateParameter(cmd, "@DYNAMIC_PROCESS_ROLE_ID"     , "Guid",  16);
			IDbDataParameter parREAD_ONLY_FIELDS             = Sql.CreateParameter(cmd, "@READ_ONLY_FIELDS"            , "string", 104857600);
			IDbDataParameter parREQUIRED_FIELDS              = Sql.CreateParameter(cmd, "@REQUIRED_FIELDS"             , "string", 104857600);
			IDbDataParameter parDURATION_UNITS               = Sql.CreateParameter(cmd, "@DURATION_UNITS"              , "string",  50);
			IDbDataParameter parDURATION_VALUE               = Sql.CreateParameter(cmd, "@DURATION_VALUE"              , "Int32",   4);
			return cmd;
		}
		#endregion

		#region spPROCESSES_NOTES_Delete
		/// <summary>
		/// spPROCESSES_NOTES_Delete
		/// </summary>
		public void spPROCESSES_NOTES_Delete(Guid gID)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_NOTES_Delete";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_NOTES_Delete
		/// <summary>
		/// spPROCESSES_NOTES_Delete
		/// </summary>
		public void spPROCESSES_NOTES_Delete(Guid gID, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_NOTES_Delete";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_NOTES_Delete
		/// <summary>
		/// spPROCESSES_NOTES_Delete
		/// </summary>
		public IDbCommand cmdPROCESSES_NOTES_Delete(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_NOTES_Delete";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			return cmd;
		}
		#endregion

		#region spPROCESSES_NOTES_InsertOnly
		/// <summary>
		/// spPROCESSES_NOTES_InsertOnly
		/// </summary>
		public void spPROCESSES_NOTES_InsertOnly(Guid gPROCESS_ID, string sDESCRIPTION)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_NOTES_InsertOnly";
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parPROCESS_ID       = Sql.AddParameter(cmd, "@PROCESS_ID"      , gPROCESS_ID        );
							IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_NOTES_InsertOnly
		/// <summary>
		/// spPROCESSES_NOTES_InsertOnly
		/// </summary>
		public void spPROCESSES_NOTES_InsertOnly(Guid gPROCESS_ID, string sDESCRIPTION, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_NOTES_InsertOnly";
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parPROCESS_ID       = Sql.AddParameter(cmd, "@PROCESS_ID"      , gPROCESS_ID        );
				IDbDataParameter parDESCRIPTION      = Sql.AddParameter(cmd, "@DESCRIPTION"     , sDESCRIPTION       );
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_NOTES_InsertOnly
		/// <summary>
		/// spPROCESSES_NOTES_InsertOnly
		/// </summary>
		public IDbCommand cmdPROCESSES_NOTES_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_NOTES_InsertOnly";
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parPROCESS_ID       = Sql.CreateParameter(cmd, "@PROCESS_ID"      , "Guid",  16);
			IDbDataParameter parDESCRIPTION      = Sql.CreateParameter(cmd, "@DESCRIPTION"     , "string", 104857600);
			return cmd;
		}
		#endregion

		#region spPROCESSES_OPTOUT_InsertOnly
		/// <summary>
		/// spPROCESSES_OPTOUT_InsertOnly
		/// </summary>
		public void spPROCESSES_OPTOUT_InsertOnly(ref Guid gID, Guid gBUSINESS_PROCESS_INSTANCE_ID, Guid gPARENT_ID, string sREASON)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_OPTOUT_InsertOnly";
							IDbDataParameter parID                           = Sql.AddParameter(cmd, "@ID"                          , gID                            );
							IDbDataParameter parMODIFIED_USER_ID             = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"            ,  Security.USER_ID              );
							IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", gBUSINESS_PROCESS_INSTANCE_ID  );
							IDbDataParameter parPARENT_ID                    = Sql.AddParameter(cmd, "@PARENT_ID"                   , gPARENT_ID                     );
							IDbDataParameter parREASON                       = Sql.AddParameter(cmd, "@REASON"                      , sREASON                        );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_OPTOUT_InsertOnly
		/// <summary>
		/// spPROCESSES_OPTOUT_InsertOnly
		/// </summary>
		public void spPROCESSES_OPTOUT_InsertOnly(ref Guid gID, Guid gBUSINESS_PROCESS_INSTANCE_ID, Guid gPARENT_ID, string sREASON, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_OPTOUT_InsertOnly";
				IDbDataParameter parID                           = Sql.AddParameter(cmd, "@ID"                          , gID                            );
				IDbDataParameter parMODIFIED_USER_ID             = Sql.AddParameter(cmd, "@MODIFIED_USER_ID"            ,  Security.USER_ID              );
				IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.AddParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", gBUSINESS_PROCESS_INSTANCE_ID  );
				IDbDataParameter parPARENT_ID                    = Sql.AddParameter(cmd, "@PARENT_ID"                   , gPARENT_ID                     );
				IDbDataParameter parREASON                       = Sql.AddParameter(cmd, "@REASON"                      , sREASON                        );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROCESSES_OPTOUT_InsertOnly
		/// <summary>
		/// spPROCESSES_OPTOUT_InsertOnly
		/// </summary>
		public IDbCommand cmdPROCESSES_OPTOUT_InsertOnly(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_OPTOUT_InsertOnly";
			IDbDataParameter parID                           = Sql.CreateParameter(cmd, "@ID"                          , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID             = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID"            , "Guid",  16);
			IDbDataParameter parBUSINESS_PROCESS_INSTANCE_ID = Sql.CreateParameter(cmd, "@BUSINESS_PROCESS_INSTANCE_ID", "Guid",  16);
			IDbDataParameter parPARENT_ID                    = Sql.CreateParameter(cmd, "@PARENT_ID"                   , "Guid",  16);
			IDbDataParameter parREASON                       = Sql.CreateParameter(cmd, "@REASON"                      , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROCESSES_OPTOUT_Update
		/// <summary>
		/// spPROCESSES_OPTOUT_Update
		/// </summary>
		public void spPROCESSES_OPTOUT_Update(ref Guid gID, string sREASON)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_OPTOUT_Update";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parREASON           = Sql.AddParameter(cmd, "@REASON"          , sREASON            );
							parID.Direction = ParameterDirection.InputOutput;
							cmd.ExecuteNonQuery();
							gID = Sql.ToGuid(parID.Value);
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_OPTOUT_Update
		/// <summary>
		/// spPROCESSES_OPTOUT_Update
		/// </summary>
		public void spPROCESSES_OPTOUT_Update(ref Guid gID, string sREASON, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_OPTOUT_Update";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parREASON           = Sql.AddParameter(cmd, "@REASON"          , sREASON            );
				parID.Direction = ParameterDirection.InputOutput;
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
				gID = Sql.ToGuid(parID.Value);
			}
		}
		#endregion

		#region cmdPROCESSES_OPTOUT_Update
		/// <summary>
		/// spPROCESSES_OPTOUT_Update
		/// </summary>
		public IDbCommand cmdPROCESSES_OPTOUT_Update(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_OPTOUT_Update";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parREASON           = Sql.CreateParameter(cmd, "@REASON"          , "string", 104857600);
			parID.Direction = ParameterDirection.InputOutput;
			return cmd;
		}
		#endregion

		#region spPROCESSES_UpdateApproval
		/// <summary>
		/// spPROCESSES_UpdateApproval
		/// </summary>
		public void spPROCESSES_UpdateApproval(Guid gID, Guid gAPPROVAL_USER_ID, string sAPPROVAL_RESPONSE)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_UpdateApproval";
							IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
							IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
							IDbDataParameter parAPPROVAL_USER_ID  = Sql.AddParameter(cmd, "@APPROVAL_USER_ID" , gAPPROVAL_USER_ID   );
							IDbDataParameter parAPPROVAL_RESPONSE = Sql.AddParameter(cmd, "@APPROVAL_RESPONSE", sAPPROVAL_RESPONSE  , 100);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_UpdateApproval
		/// <summary>
		/// spPROCESSES_UpdateApproval
		/// </summary>
		public void spPROCESSES_UpdateApproval(Guid gID, Guid gAPPROVAL_USER_ID, string sAPPROVAL_RESPONSE, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_UpdateApproval";
				IDbDataParameter parID                = Sql.AddParameter(cmd, "@ID"               , gID                 );
				IDbDataParameter parMODIFIED_USER_ID  = Sql.AddParameter(cmd, "@MODIFIED_USER_ID" ,  Security.USER_ID   );
				IDbDataParameter parAPPROVAL_USER_ID  = Sql.AddParameter(cmd, "@APPROVAL_USER_ID" , gAPPROVAL_USER_ID   );
				IDbDataParameter parAPPROVAL_RESPONSE = Sql.AddParameter(cmd, "@APPROVAL_RESPONSE", sAPPROVAL_RESPONSE  , 100);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_UpdateApproval
		/// <summary>
		/// spPROCESSES_UpdateApproval
		/// </summary>
		public IDbCommand cmdPROCESSES_UpdateApproval(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_UpdateApproval";
			IDbDataParameter parID                = Sql.CreateParameter(cmd, "@ID"               , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID  = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID" , "Guid",  16);
			IDbDataParameter parAPPROVAL_USER_ID  = Sql.CreateParameter(cmd, "@APPROVAL_USER_ID" , "Guid",  16);
			IDbDataParameter parAPPROVAL_RESPONSE = Sql.CreateParameter(cmd, "@APPROVAL_RESPONSE", "string", 100);
			return cmd;
		}
		#endregion

		#region spPROCESSES_UpdateStatus
		/// <summary>
		/// spPROCESSES_UpdateStatus
		/// </summary>
		public void spPROCESSES_UpdateStatus(Guid gID, string sSTATUS)
		{
			DbProviderFactory dbf = DbProviderFactories.GetFactory();
			using ( IDbConnection con = dbf.CreateConnection() )
			{
				con.Open();
				using ( IDbTransaction trn = Sql.BeginTransaction(con) )
				{
					try
					{
						using ( IDbCommand cmd = con.CreateCommand() )
						{
							cmd.Transaction = trn;
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.CommandText = "spPROCESSES_UpdateStatus";
							IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
							IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
							IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
							cmd.ExecuteNonQuery();
						}
						trn.Commit();
					}
					catch
					{
						trn.Rollback();
						throw;
					}
				}
			}
		}
		#endregion

		#region spPROCESSES_UpdateStatus
		/// <summary>
		/// spPROCESSES_UpdateStatus
		/// </summary>
		public void spPROCESSES_UpdateStatus(Guid gID, string sSTATUS, IDbTransaction trn)
		{
			IDbConnection con = trn.Connection;
			using ( IDbCommand cmd = con.CreateCommand() )
			{
				cmd.Transaction = trn;
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "spPROCESSES_UpdateStatus";
				IDbDataParameter parID               = Sql.AddParameter(cmd, "@ID"              , gID                );
				IDbDataParameter parMODIFIED_USER_ID = Sql.AddParameter(cmd, "@MODIFIED_USER_ID",  Security.USER_ID  );
				IDbDataParameter parSTATUS           = Sql.AddParameter(cmd, "@STATUS"          , sSTATUS            ,  25);
				Sql.Trace(cmd);
				cmd.ExecuteNonQuery();
			}
		}
		#endregion

		#region cmdPROCESSES_UpdateStatus
		/// <summary>
		/// spPROCESSES_UpdateStatus
		/// </summary>
		public IDbCommand cmdPROCESSES_UpdateStatus(IDbConnection con)
		{
			IDbCommand cmd = con.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "spPROCESSES_UpdateStatus";
			IDbDataParameter parID               = Sql.CreateParameter(cmd, "@ID"              , "Guid",  16);
			IDbDataParameter parMODIFIED_USER_ID = Sql.CreateParameter(cmd, "@MODIFIED_USER_ID", "Guid",  16);
			IDbDataParameter parSTATUS           = Sql.CreateParameter(cmd, "@STATUS"          , "string",  25);
			return cmd;
		}
		#endregion

		#region Factory
		/// <summary>
		/// Factory
		/// </summary>
		public IDbCommand Factory(IDbConnection con, string sProcedureName)
		{
			IDbCommand cmd = null;
			switch ( sProcedureName.ToUpper() )
			{
				case "SPACL_ACTIONS_DELETE"                  :  cmd = cmdACL_ACTIONS_Delete                  (con);  break;
				case "SPACL_ACTIONS_INITIALIZE"              :  cmd = cmdACL_ACTIONS_Initialize              (con);  break;
				case "SPACL_ACTIONS_INSERTONLY"              :  cmd = cmdACL_ACTIONS_InsertOnly              (con);  break;
				case "SPACL_ACTIONS_UPDATE"                  :  cmd = cmdACL_ACTIONS_Update                  (con);  break;
				case "SPACL_FIELDS_UPDATE"                   :  cmd = cmdACL_FIELDS_Update                   (con);  break;
				case "SPACL_ROLES_ACTIONS_DELETE"            :  cmd = cmdACL_ROLES_ACTIONS_Delete            (con);  break;
				case "SPACL_ROLES_ACTIONS_UPDATE"            :  cmd = cmdACL_ROLES_ACTIONS_Update            (con);  break;
				case "SPACL_ROLES_DELETE"                    :  cmd = cmdACL_ROLES_Delete                    (con);  break;
				case "SPACL_ROLES_INSERTONLY"                :  cmd = cmdACL_ROLES_InsertOnly                (con);  break;
				case "SPACL_ROLES_MASSDELETE"                :  cmd = cmdACL_ROLES_MassDelete                (con);  break;
				case "SPACL_ROLES_UPDATE"                    :  cmd = cmdACL_ROLES_Update                    (con);  break;
				case "SPACL_ROLES_USERS_DELETE"              :  cmd = cmdACL_ROLES_USERS_Delete              (con);  break;
				case "SPACL_ROLES_USERS_MASSUPDATE"          :  cmd = cmdACL_ROLES_USERS_MassUpdate          (con);  break;
				case "SPACL_ROLES_USERS_UPDATE"              :  cmd = cmdACL_ROLES_USERS_Update              (con);  break;
				case "SPASSIGNED_SETS_NORMALIZESET"          :  cmd = cmdASSIGNED_SETS_NormalizeSet          (con);  break;
				case "SPASSIGNED_SETS_UPDATENAMES"           :  cmd = cmdASSIGNED_SETS_UpdateNames           (con);  break;
				case "SPCONFIG_DELETE"                       :  cmd = cmdCONFIG_Delete                       (con);  break;
				case "SPCONFIG_INSERTONLY"                   :  cmd = cmdCONFIG_InsertOnly                   (con);  break;
				case "SPCONFIG_MASSDELETE"                   :  cmd = cmdCONFIG_MassDelete                   (con);  break;
				case "SPCONFIG_UPDATE"                       :  cmd = cmdCONFIG_Update                       (con);  break;
				case "SPCURRENCIES_DELETE"                   :  cmd = cmdCURRENCIES_Delete                   (con);  break;
				case "SPCURRENCIES_INSERTONLY"               :  cmd = cmdCURRENCIES_InsertOnly               (con);  break;
				case "SPCURRENCIES_INSERTONLYBYISO"          :  cmd = cmdCURRENCIES_InsertOnlyByISO          (con);  break;
				case "SPCURRENCIES_MASSUPDATE"               :  cmd = cmdCURRENCIES_MassUpdate               (con);  break;
				case "SPCURRENCIES_UPDATE"                   :  cmd = cmdCURRENCIES_Update                   (con);  break;
				case "SPCURRENCIES_UPDATERATEBYISO"          :  cmd = cmdCURRENCIES_UpdateRateByISO          (con);  break;
				case "SPDASHBOARD_APPS_INSERTONLY"           :  cmd = cmdDASHBOARD_APPS_InsertOnly           (con);  break;
				case "SPDASHBOARDS_DELETE"                   :  cmd = cmdDASHBOARDS_Delete                   (con);  break;
				case "SPDASHBOARDS_INSERTONLY"               :  cmd = cmdDASHBOARDS_InsertOnly               (con);  break;
				case "SPDASHBOARDS_PANELS_ADDREPORT"         :  cmd = cmdDASHBOARDS_PANELS_AddReport         (con);  break;
				case "SPDASHBOARDS_PANELS_DELETE"            :  cmd = cmdDASHBOARDS_PANELS_Delete            (con);  break;
				case "SPDASHBOARDS_PANELS_INSERTONLY"        :  cmd = cmdDASHBOARDS_PANELS_InsertOnly        (con);  break;
				case "SPDASHBOARDS_PANELS_UPDATE"            :  cmd = cmdDASHBOARDS_PANELS_Update            (con);  break;
				case "SPDASHBOARDS_UPDATE"                   :  cmd = cmdDASHBOARDS_Update                   (con);  break;
				case "SPDASHLETS_DELETE"                     :  cmd = cmdDASHLETS_Delete                     (con);  break;
				case "SPDASHLETS_INSERTONLY"                 :  cmd = cmdDASHLETS_InsertOnly                 (con);  break;
				case "SPDASHLETS_UPDATE"                     :  cmd = cmdDASHLETS_Update                     (con);  break;
				case "SPDASHLETS_USERS_DELETE"               :  cmd = cmdDASHLETS_USERS_Delete               (con);  break;
				case "SPDASHLETS_USERS_DISABLE"              :  cmd = cmdDASHLETS_USERS_Disable              (con);  break;
				case "SPDASHLETS_USERS_ENABLE"               :  cmd = cmdDASHLETS_USERS_Enable               (con);  break;
				case "SPDASHLETS_USERS_INIT"                 :  cmd = cmdDASHLETS_USERS_Init                 (con);  break;
				case "SPDASHLETS_USERS_INITDISABLE"          :  cmd = cmdDASHLETS_USERS_InitDisable          (con);  break;
				case "SPDASHLETS_USERS_MASSUPDATE"           :  cmd = cmdDASHLETS_USERS_MassUpdate           (con);  break;
				case "SPDASHLETS_USERS_MOVEDOWN"             :  cmd = cmdDASHLETS_USERS_MoveDown             (con);  break;
				case "SPDASHLETS_USERS_MOVEITEM"             :  cmd = cmdDASHLETS_USERS_MoveItem             (con);  break;
				case "SPDASHLETS_USERS_MOVEUP"               :  cmd = cmdDASHLETS_USERS_MoveUp               (con);  break;
				case "SPDASHLETS_USERS_REORDER"              :  cmd = cmdDASHLETS_USERS_Reorder              (con);  break;
				case "SPDASHLETS_USERS_UPDATETITLE"          :  cmd = cmdDASHLETS_USERS_UpdateTitle          (con);  break;
				case "SPDETAILVIEWS_DELETE"                  :  cmd = cmdDETAILVIEWS_Delete                  (con);  break;
				case "SPDETAILVIEWS_FIELDS_DELETE"           :  cmd = cmdDETAILVIEWS_FIELDS_Delete           (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSBLANK"         :  cmd = cmdDETAILVIEWS_FIELDS_InsBlank         (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSBOUND"         :  cmd = cmdDETAILVIEWS_FIELDS_InsBound         (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSBOUNDLIST"     :  cmd = cmdDETAILVIEWS_FIELDS_InsBoundList     (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSBUTTON"        :  cmd = cmdDETAILVIEWS_FIELDS_InsButton        (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSCHECKBOX"      :  cmd = cmdDETAILVIEWS_FIELDS_InsCheckBox      (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSDEPENDLIST"    :  cmd = cmdDETAILVIEWS_FIELDS_InsDependList    (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSERTONLY"       :  cmd = cmdDETAILVIEWS_FIELDS_InsertOnly       (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSHEADER"        :  cmd = cmdDETAILVIEWS_FIELDS_InsHeader        (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSHYPERLINK"     :  cmd = cmdDETAILVIEWS_FIELDS_InsHyperLink     (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSJAVASCRIPT"    :  cmd = cmdDETAILVIEWS_FIELDS_InsJavaScript    (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSMODULE"        :  cmd = cmdDETAILVIEWS_FIELDS_InsModule        (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSMODULELINK"    :  cmd = cmdDETAILVIEWS_FIELDS_InsModuleLink    (con);  break;
				case "SPDETAILVIEWS_FIELDS_INSSEPARATOR"     :  cmd = cmdDETAILVIEWS_FIELDS_InsSeparator     (con);  break;
				case "SPDETAILVIEWS_FIELDS_UPDATE"           :  cmd = cmdDETAILVIEWS_FIELDS_Update           (con);  break;
				case "SPDETAILVIEWS_FIELDS_UPDATETIP"        :  cmd = cmdDETAILVIEWS_FIELDS_UpdateTip        (con);  break;
				case "SPDETAILVIEWS_FIELDS_UPDATEURL"        :  cmd = cmdDETAILVIEWS_FIELDS_UpdateUrl        (con);  break;
				case "SPDETAILVIEWS_INSERTONLY"              :  cmd = cmdDETAILVIEWS_InsertOnly              (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_DELETE"    :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Delete    (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_DISABLE"   :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Disable   (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_DOWN"      :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Down      (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_ENABLE"    :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Enable    (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_INSERTONLY":  cmd = cmdDETAILVIEWS_RELATIONSHIPS_InsertOnly(con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_ITEM"      :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Item      (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_MOVEUP"    :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_MoveUp    (con);  break;
				case "SPDETAILVIEWS_RELATIONSHIPS_UPDATE"    :  cmd = cmdDETAILVIEWS_RELATIONSHIPS_Update    (con);  break;
				case "SPDETAILVIEWS_UPDATE"                  :  cmd = cmdDETAILVIEWS_Update                  (con);  break;
				case "SPDETAILVIEWS_UPDATEEVENTS"            :  cmd = cmdDETAILVIEWS_UpdateEvents            (con);  break;
				case "SPDYNAMIC_BUTTONS_COPYDEFAULT"         :  cmd = cmdDYNAMIC_BUTTONS_CopyDefault         (con);  break;
				case "SPDYNAMIC_BUTTONS_DELETE"              :  cmd = cmdDYNAMIC_BUTTONS_Delete              (con);  break;
				case "SPDYNAMIC_BUTTONS_INSBUTTON"           :  cmd = cmdDYNAMIC_BUTTONS_InsButton           (con);  break;
				case "SPDYNAMIC_BUTTONS_INSBUTTONLINK"       :  cmd = cmdDYNAMIC_BUTTONS_InsButtonLink       (con);  break;
				case "SPDYNAMIC_BUTTONS_INSCANCEL"           :  cmd = cmdDYNAMIC_BUTTONS_InsCancel           (con);  break;
				case "SPDYNAMIC_BUTTONS_INSCANCELEDIT"       :  cmd = cmdDYNAMIC_BUTTONS_InsCancelEdit       (con);  break;
				case "SPDYNAMIC_BUTTONS_INSDELETE"           :  cmd = cmdDYNAMIC_BUTTONS_InsDelete           (con);  break;
				case "SPDYNAMIC_BUTTONS_INSDUPLICATE"        :  cmd = cmdDYNAMIC_BUTTONS_InsDuplicate        (con);  break;
				case "SPDYNAMIC_BUTTONS_INSEDIT"             :  cmd = cmdDYNAMIC_BUTTONS_InsEdit             (con);  break;
				case "SPDYNAMIC_BUTTONS_INSERTONLY"          :  cmd = cmdDYNAMIC_BUTTONS_InsertOnly          (con);  break;
				case "SPDYNAMIC_BUTTONS_INSHYPERLINK"        :  cmd = cmdDYNAMIC_BUTTONS_InsHyperLink        (con);  break;
				case "SPDYNAMIC_BUTTONS_INSPOPUP"            :  cmd = cmdDYNAMIC_BUTTONS_InsPopup            (con);  break;
				case "SPDYNAMIC_BUTTONS_INSPOPUPCANCEL"      :  cmd = cmdDYNAMIC_BUTTONS_InsPopupCancel      (con);  break;
				case "SPDYNAMIC_BUTTONS_INSPOPUPCLEAR"       :  cmd = cmdDYNAMIC_BUTTONS_InsPopupClear       (con);  break;
				case "SPDYNAMIC_BUTTONS_INSSAVE"             :  cmd = cmdDYNAMIC_BUTTONS_InsSave             (con);  break;
				case "SPDYNAMIC_BUTTONS_INSSAVECONCURRENCY"  :  cmd = cmdDYNAMIC_BUTTONS_InsSaveConcurrency  (con);  break;
				case "SPDYNAMIC_BUTTONS_INSSAVEDUPLICATE"    :  cmd = cmdDYNAMIC_BUTTONS_InsSaveDuplicate    (con);  break;
				case "SPDYNAMIC_BUTTONS_INSSAVENEW"          :  cmd = cmdDYNAMIC_BUTTONS_InsSaveNew          (con);  break;
				case "SPDYNAMIC_BUTTONS_INSVIEWLOG"          :  cmd = cmdDYNAMIC_BUTTONS_InsViewLog          (con);  break;
				case "SPDYNAMIC_BUTTONS_ORDER_MOVEDOWN"      :  cmd = cmdDYNAMIC_BUTTONS_ORDER_MoveDown      (con);  break;
				case "SPDYNAMIC_BUTTONS_ORDER_MOVEITEM"      :  cmd = cmdDYNAMIC_BUTTONS_ORDER_MoveItem      (con);  break;
				case "SPDYNAMIC_BUTTONS_ORDER_MOVEUP"        :  cmd = cmdDYNAMIC_BUTTONS_ORDER_MoveUp        (con);  break;
				case "SPDYNAMIC_BUTTONS_UPDATE"              :  cmd = cmdDYNAMIC_BUTTONS_Update              (con);  break;
				case "SPEDITVIEWS_DELETE"                    :  cmd = cmdEDITVIEWS_Delete                    (con);  break;
				case "SPEDITVIEWS_FIELDS_DELETE"             :  cmd = cmdEDITVIEWS_FIELDS_Delete             (con);  break;
				case "SPEDITVIEWS_FIELDS_INSAUTOCOMPLETE"    :  cmd = cmdEDITVIEWS_FIELDS_InsAutoComplete    (con);  break;
				case "SPEDITVIEWS_FIELDS_INSBLANK"           :  cmd = cmdEDITVIEWS_FIELDS_InsBlank           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSBOUND"           :  cmd = cmdEDITVIEWS_FIELDS_InsBound           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSBOUNDLIST"       :  cmd = cmdEDITVIEWS_FIELDS_InsBoundList       (con);  break;
				case "SPEDITVIEWS_FIELDS_INSBUTTON"          :  cmd = cmdEDITVIEWS_FIELDS_InsButton          (con);  break;
				case "SPEDITVIEWS_FIELDS_INSCHANGE"          :  cmd = cmdEDITVIEWS_FIELDS_InsChange          (con);  break;
				case "SPEDITVIEWS_FIELDS_INSCHECKBOX"        :  cmd = cmdEDITVIEWS_FIELDS_InsCheckBox        (con);  break;
				case "SPEDITVIEWS_FIELDS_INSCHECKLST"        :  cmd = cmdEDITVIEWS_FIELDS_InsCheckLst        (con);  break;
				case "SPEDITVIEWS_FIELDS_INSCONTROL"         :  cmd = cmdEDITVIEWS_FIELDS_InsControl         (con);  break;
				case "SPEDITVIEWS_FIELDS_INSDATEPICK"        :  cmd = cmdEDITVIEWS_FIELDS_InsDatePick        (con);  break;
				case "SPEDITVIEWS_FIELDS_INSDATERNG"         :  cmd = cmdEDITVIEWS_FIELDS_InsDateRng         (con);  break;
				case "SPEDITVIEWS_FIELDS_INSDEPENDLIST"      :  cmd = cmdEDITVIEWS_FIELDS_InsDependList      (con);  break;
				case "SPEDITVIEWS_FIELDS_INSFILE"            :  cmd = cmdEDITVIEWS_FIELDS_InsFile            (con);  break;
				case "SPEDITVIEWS_FIELDS_INSHEADER"          :  cmd = cmdEDITVIEWS_FIELDS_InsHeader          (con);  break;
				case "SPEDITVIEWS_FIELDS_INSHIDDEN"          :  cmd = cmdEDITVIEWS_FIELDS_InsHidden          (con);  break;
				case "SPEDITVIEWS_FIELDS_INSHTMLEDITOR"      :  cmd = cmdEDITVIEWS_FIELDS_InsHtmlEditor      (con);  break;
				case "SPEDITVIEWS_FIELDS_INSLABEL"           :  cmd = cmdEDITVIEWS_FIELDS_InsLabel           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSMODULEPOPUP"     :  cmd = cmdEDITVIEWS_FIELDS_InsModulePopup     (con);  break;
				case "SPEDITVIEWS_FIELDS_INSMULTILINE"       :  cmd = cmdEDITVIEWS_FIELDS_InsMultiLine       (con);  break;
				case "SPEDITVIEWS_FIELDS_INSPASSWORD"        :  cmd = cmdEDITVIEWS_FIELDS_InsPassword        (con);  break;
				case "SPEDITVIEWS_FIELDS_INSPOPUP"           :  cmd = cmdEDITVIEWS_FIELDS_InsPopup           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSRADIO"           :  cmd = cmdEDITVIEWS_FIELDS_InsRadio           (con);  break;
				case "SPEDITVIEWS_FIELDS_INSSEPARATOR"       :  cmd = cmdEDITVIEWS_FIELDS_InsSeparator       (con);  break;
				case "SPEDITVIEWS_FIELDS_INSTIMEEDIT"        :  cmd = cmdEDITVIEWS_FIELDS_InsTimeEdit        (con);  break;
				case "SPEDITVIEWS_FIELDS_INSTIMENEW"         :  cmd = cmdEDITVIEWS_FIELDS_InsTimeNew         (con);  break;
				case "SPEDITVIEWS_FIELDS_INSTIMEPICK"        :  cmd = cmdEDITVIEWS_FIELDS_InsTimePick        (con);  break;
				case "SPEDITVIEWS_FIELDS_INSVALIDATOR"       :  cmd = cmdEDITVIEWS_FIELDS_InsValidator       (con);  break;
				case "SPEDITVIEWS_FIELDS_LSTCHANGE"          :  cmd = cmdEDITVIEWS_FIELDS_LstChange          (con);  break;
				case "SPEDITVIEWS_FIELDS_MERGEVIEW"          :  cmd = cmdEDITVIEWS_FIELDS_MergeView          (con);  break;
				case "SPEDITVIEWS_FIELDS_UPDATE"             :  cmd = cmdEDITVIEWS_FIELDS_Update             (con);  break;
				case "SPEDITVIEWS_FIELDS_UPDATEDATAFORMAT"   :  cmd = cmdEDITVIEWS_FIELDS_UpdateDataFormat   (con);  break;
				case "SPEDITVIEWS_FIELDS_UPDATEONCLICK"      :  cmd = cmdEDITVIEWS_FIELDS_UpdateOnClick      (con);  break;
				case "SPEDITVIEWS_FIELDS_UPDATETIP"          :  cmd = cmdEDITVIEWS_FIELDS_UpdateTip          (con);  break;
				case "SPEDITVIEWS_INSERTONLY"                :  cmd = cmdEDITVIEWS_InsertOnly                (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_DELETE"      :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Delete      (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_DISABLE"     :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Disable     (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_DOWN"        :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Down        (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_ENABLE"      :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Enable      (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_INSERTONLY"  :  cmd = cmdEDITVIEWS_RELATIONSHIPS_InsertOnly  (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_ITEM"        :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Item        (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_MOVEUP"      :  cmd = cmdEDITVIEWS_RELATIONSHIPS_MoveUp      (con);  break;
				case "SPEDITVIEWS_RELATIONSHIPS_UPDATE"      :  cmd = cmdEDITVIEWS_RELATIONSHIPS_Update      (con);  break;
				case "SPEDITVIEWS_UPDATE"                    :  cmd = cmdEDITVIEWS_Update                    (con);  break;
				case "SPEDITVIEWS_UPDATEEVENTS"              :  cmd = cmdEDITVIEWS_UpdateEvents              (con);  break;
				case "SPFIELD_VALIDATORS_DELETE"             :  cmd = cmdFIELD_VALIDATORS_Delete             (con);  break;
				case "SPFIELD_VALIDATORS_INSERTREGEX"        :  cmd = cmdFIELD_VALIDATORS_InsertRegEx        (con);  break;
				case "SPFIELD_VALIDATORS_UPDATE"             :  cmd = cmdFIELD_VALIDATORS_Update             (con);  break;
				case "SPFIELDS_META_DATA_DELETE"             :  cmd = cmdFIELDS_META_DATA_Delete             (con);  break;
				case "SPFIELDS_META_DATA_DELETEBYNAME"       :  cmd = cmdFIELDS_META_DATA_DeleteByName       (con);  break;
				case "SPFIELDS_META_DATA_INSERT"             :  cmd = cmdFIELDS_META_DATA_Insert             (con);  break;
				case "SPFIELDS_META_DATA_UPDATE"             :  cmd = cmdFIELDS_META_DATA_Update             (con);  break;
				case "SPFULLTEXT_CONFIGCATALOG"              :  cmd = cmdFULLTEXT_ConfigCatalog              (con);  break;
				case "SPFULLTEXT_UPDATELAYOUTS"              :  cmd = cmdFULLTEXT_UpdateLayouts              (con);  break;
				case "SPGRIDVIEWS_COLUMNS_DELETE"            :  cmd = cmdGRIDVIEWS_COLUMNS_Delete            (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSBOUND"          :  cmd = cmdGRIDVIEWS_COLUMNS_InsBound          (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSBOUNDDATE"      :  cmd = cmdGRIDVIEWS_COLUMNS_InsBoundDate      (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSBOUNDLIST"      :  cmd = cmdGRIDVIEWS_COLUMNS_InsBoundList      (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSDEPENDLIST"     :  cmd = cmdGRIDVIEWS_COLUMNS_InsDependList     (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSFIELD"          :  cmd = cmdGRIDVIEWS_COLUMNS_InsField          (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSHIDDEN"         :  cmd = cmdGRIDVIEWS_COLUMNS_InsHidden         (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSHOVER"          :  cmd = cmdGRIDVIEWS_COLUMNS_InsHover          (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSHYPERLINK"      :  cmd = cmdGRIDVIEWS_COLUMNS_InsHyperLink      (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSIMAGEBUTTON"    :  cmd = cmdGRIDVIEWS_COLUMNS_InsImageButton    (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSJAVAIMAGE"      :  cmd = cmdGRIDVIEWS_COLUMNS_InsJavaImage      (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSJAVASCRIPT"     :  cmd = cmdGRIDVIEWS_COLUMNS_InsJavaScript     (con);  break;
				case "SPGRIDVIEWS_COLUMNS_INSMODULE"         :  cmd = cmdGRIDVIEWS_COLUMNS_InsModule         (con);  break;
				case "SPGRIDVIEWS_COLUMNS_RESERVEINDEX"      :  cmd = cmdGRIDVIEWS_COLUMNS_ReserveIndex      (con);  break;
				case "SPGRIDVIEWS_COLUMNS_UPDATE"            :  cmd = cmdGRIDVIEWS_COLUMNS_Update            (con);  break;
				case "SPGRIDVIEWS_COLUMNS_UPDATEFORMAT"      :  cmd = cmdGRIDVIEWS_COLUMNS_UpdateFormat      (con);  break;
				case "SPGRIDVIEWS_COLUMNS_UPDATESTYLE"       :  cmd = cmdGRIDVIEWS_COLUMNS_UpdateStyle       (con);  break;
				case "SPGRIDVIEWS_DELETE"                    :  cmd = cmdGRIDVIEWS_Delete                    (con);  break;
				case "SPGRIDVIEWS_INSERTONLY"                :  cmd = cmdGRIDVIEWS_InsertOnly                (con);  break;
				case "SPGRIDVIEWS_UPDATE"                    :  cmd = cmdGRIDVIEWS_Update                    (con);  break;
				case "SPGRIDVIEWS_UPDATEEVENTS"              :  cmd = cmdGRIDVIEWS_UpdateEvents              (con);  break;
				case "SPGRIDVIEWS_UPDATESORT"                :  cmd = cmdGRIDVIEWS_UpdateSort                (con);  break;
				case "SPIMAGE_INITPOINTER"                   :  cmd = cmdIMAGE_InitPointer                   (con);  break;
				case "SPIMAGE_READOFFSET"                    :  cmd = cmdIMAGE_ReadOffset                    (con);  break;
				case "SPIMAGE_WRITEOFFSET"                   :  cmd = cmdIMAGE_WriteOffset                   (con);  break;
				case "SPIMAGES_CONTENT_UPDATE"               :  cmd = cmdIMAGES_CONTENT_Update               (con);  break;
				case "SPIMAGES_DELETE"                       :  cmd = cmdIMAGES_Delete                       (con);  break;
				case "SPIMAGES_INSERT"                       :  cmd = cmdIMAGES_Insert                       (con);  break;
				case "SPIMPORT_MAPS_DELETE"                  :  cmd = cmdIMPORT_MAPS_Delete                  (con);  break;
				case "SPIMPORT_MAPS_INSERTONLY"              :  cmd = cmdIMPORT_MAPS_InsertOnly              (con);  break;
				case "SPIMPORT_MAPS_UPDATE"                  :  cmd = cmdIMPORT_MAPS_Update                  (con);  break;
				case "SPLANGUAGES_DELETE"                    :  cmd = cmdLANGUAGES_Delete                    (con);  break;
				case "SPLANGUAGES_DISABLE"                   :  cmd = cmdLANGUAGES_Disable                   (con);  break;
				case "SPLANGUAGES_ENABLE"                    :  cmd = cmdLANGUAGES_Enable                    (con);  break;
				case "SPLANGUAGES_INSERTONLY"                :  cmd = cmdLANGUAGES_InsertOnly                (con);  break;
				case "SPLANGUAGES_UPDATE"                    :  cmd = cmdLANGUAGES_Update                    (con);  break;
				case "SPMODULES_DELETE"                      :  cmd = cmdMODULES_Delete                      (con);  break;
				case "SPMODULES_DISABLE"                     :  cmd = cmdMODULES_Disable                     (con);  break;
				case "SPMODULES_ENABLE"                      :  cmd = cmdMODULES_Enable                      (con);  break;
				case "SPMODULES_GLOBALCUSTOMPAGING"          :  cmd = cmdMODULES_GlobalCustomPaging          (con);  break;
				case "SPMODULES_INSERTONLY"                  :  cmd = cmdMODULES_InsertOnly                  (con);  break;
				case "SPMODULES_REORDER"                     :  cmd = cmdMODULES_Reorder                     (con);  break;
				case "SPMODULES_TAB_HIDE"                    :  cmd = cmdMODULES_TAB_Hide                    (con);  break;
				case "SPMODULES_TAB_HIDEMOBILE"              :  cmd = cmdMODULES_TAB_HideMobile              (con);  break;
				case "SPMODULES_TAB_ORDER_MOVEDOWN"          :  cmd = cmdMODULES_TAB_ORDER_MoveDown          (con);  break;
				case "SPMODULES_TAB_ORDER_MOVEITEM"          :  cmd = cmdMODULES_TAB_ORDER_MoveItem          (con);  break;
				case "SPMODULES_TAB_ORDER_MOVEUP"            :  cmd = cmdMODULES_TAB_ORDER_MoveUp            (con);  break;
				case "SPMODULES_TAB_ORDER_REORDER"           :  cmd = cmdMODULES_TAB_ORDER_Reorder           (con);  break;
				case "SPMODULES_TAB_RENAME"                  :  cmd = cmdMODULES_TAB_Rename                  (con);  break;
				case "SPMODULES_TAB_SHOW"                    :  cmd = cmdMODULES_TAB_Show                    (con);  break;
				case "SPMODULES_TAB_SHOWMOBILE"              :  cmd = cmdMODULES_TAB_ShowMobile              (con);  break;
				case "SPMODULES_UPDATE"                      :  cmd = cmdMODULES_Update                      (con);  break;
				case "SPMODULES_UPDATERELATIVEPATH"          :  cmd = cmdMODULES_UpdateRelativePath          (con);  break;
				case "SPOAUTH_TOKENS_DELETE"                 :  cmd = cmdOAUTH_TOKENS_Delete                 (con);  break;
				case "SPOAUTH_TOKENS_UPDATE"                 :  cmd = cmdOAUTH_TOKENS_Update                 (con);  break;
				case "SPOAUTHKEYS_DELETE"                    :  cmd = cmdOAUTHKEYS_Delete                    (con);  break;
				case "SPOAUTHKEYS_UPDATE"                    :  cmd = cmdOAUTHKEYS_Update                    (con);  break;
				case "SPOUTBOUND_EMAILS_DELETE"              :  cmd = cmdOUTBOUND_EMAILS_Delete              (con);  break;
				case "SPOUTBOUND_EMAILS_UPDATE"              :  cmd = cmdOUTBOUND_EMAILS_Update              (con);  break;
				case "SPOUTBOUND_EMAILS_UPDATEUSER"          :  cmd = cmdOUTBOUND_EMAILS_UpdateUser          (con);  break;
				case "SPPARENT_DELETE"                       :  cmd = cmdPARENT_Delete                       (con);  break;
				case "SPPARENT_UNDELETE"                     :  cmd = cmdPARENT_Undelete                     (con);  break;
				case "SPREACT_CUSTOM_VIEWS_DELETE"           :  cmd = cmdREACT_CUSTOM_VIEWS_Delete           (con);  break;
				case "SPREACT_CUSTOM_VIEWS_UPDATE"           :  cmd = cmdREACT_CUSTOM_VIEWS_Update           (con);  break;
				case "SPRELATIONSHIPS_DELETE"                :  cmd = cmdRELATIONSHIPS_Delete                (con);  break;
				case "SPRELATIONSHIPS_INSERTONLY"            :  cmd = cmdRELATIONSHIPS_InsertOnly            (con);  break;
				case "SPRELATIONSHIPS_UPDATE"                :  cmd = cmdRELATIONSHIPS_Update                (con);  break;
				case "SPSAVED_SEARCH_DELETE"                 :  cmd = cmdSAVED_SEARCH_Delete                 (con);  break;
				case "SPSAVED_SEARCH_UPDATE"                 :  cmd = cmdSAVED_SEARCH_Update                 (con);  break;
				case "SPSCHEDULERS_DELETE"                   :  cmd = cmdSCHEDULERS_Delete                   (con);  break;
				case "SPSCHEDULERS_INSERTONLY"               :  cmd = cmdSCHEDULERS_InsertOnly               (con);  break;
				case "SPSCHEDULERS_UPDATE"                   :  cmd = cmdSCHEDULERS_Update                   (con);  break;
				case "SPSCHEDULERS_UPDATELASTRUN"            :  cmd = cmdSCHEDULERS_UpdateLastRun            (con);  break;
				case "SPSCHEDULERS_UPDATESTATUS"             :  cmd = cmdSCHEDULERS_UpdateStatus             (con);  break;
				case "SPSHORTCUTS_DELETE"                    :  cmd = cmdSHORTCUTS_Delete                    (con);  break;
				case "SPSHORTCUTS_INSERTONLY"                :  cmd = cmdSHORTCUTS_InsertOnly                (con);  break;
				case "SPSHORTCUTS_ORDER_MOVEDOWN"            :  cmd = cmdSHORTCUTS_ORDER_MoveDown            (con);  break;
				case "SPSHORTCUTS_ORDER_MOVEITEM"            :  cmd = cmdSHORTCUTS_ORDER_MoveItem            (con);  break;
				case "SPSHORTCUTS_ORDER_MOVEUP"              :  cmd = cmdSHORTCUTS_ORDER_MoveUp              (con);  break;
				case "SPSHORTCUTS_UPDATE"                    :  cmd = cmdSHORTCUTS_Update                    (con);  break;
				case "SPSQLBACKUPDATABASE"                   :  cmd = cmdSqlBackupDatabase                   (con);  break;
				case "SPSQLBUILDALLAUDITINDEXES"             :  cmd = cmdSqlBuildAllAuditIndexes             (con);  break;
				case "SPSQLBUILDALLAUDITTABLES"              :  cmd = cmdSqlBuildAllAuditTables              (con);  break;
				case "SPSQLBUILDALLAUDITTRIGGERS"            :  cmd = cmdSqlBuildAllAuditTriggers            (con);  break;
				case "SPSQLBUILDALLAUDITVIEWS"               :  cmd = cmdSqlBuildAllAuditViews               (con);  break;
				case "SPSQLBUILDARCHIVETABLE"                :  cmd = cmdSqlBuildArchiveTable                (con);  break;
				case "SPSQLBUILDARCHIVEVIEW"                 :  cmd = cmdSqlBuildArchiveView                 (con);  break;
				case "SPSQLBUILDAUDITINDEX"                  :  cmd = cmdSqlBuildAuditIndex                  (con);  break;
				case "SPSQLBUILDAUDITTABLE"                  :  cmd = cmdSqlBuildAuditTable                  (con);  break;
				case "SPSQLBUILDAUDITTRIGGER"                :  cmd = cmdSqlBuildAuditTrigger                (con);  break;
				case "SPSQLBUILDAUDITVIEW"                   :  cmd = cmdSqlBuildAuditView                   (con);  break;
				case "SPSQLBUILDSTREAMFUNCTION"              :  cmd = cmdSqlBuildStreamFunction              (con);  break;
				case "SPSQLBUILDSTREAMVIEW"                  :  cmd = cmdSqlBuildStreamView                  (con);  break;
				case "SPSQLBUILDSYSTEMTRIGGER"               :  cmd = cmdSqlBuildSystemTrigger               (con);  break;
				case "SPSQLDROPALLAUDITTABLES"               :  cmd = cmdSqlDropAllAuditTables               (con);  break;
				case "SPSQLDROPALLAUDITTRIGGERS"             :  cmd = cmdSqlDropAllAuditTriggers             (con);  break;
				case "SPSQLDROPALLAUDITVIEWS"                :  cmd = cmdSqlDropAllAuditViews                (con);  break;
				case "SPSQLDROPDEFAULTCONSTRAINT"            :  cmd = cmdSqlDropDefaultConstraint            (con);  break;
				case "SPSQLDROPFOREIGNKEYS"                  :  cmd = cmdSqlDropForeignKeys                  (con);  break;
				case "SPSQLGETTRANSACTIONTOKEN"              :  cmd = cmdSqlGetTransactionToken              (con);  break;
				case "SPSQLPRINTBYLINE"                      :  cmd = cmdSqlPrintByLine                      (con);  break;
				case "SPSQLREFRESHALLVIEWS"                  :  cmd = cmdSqlRefreshAllViews                  (con);  break;
				case "SPSQLTABLEADDCOLUMN"                   :  cmd = cmdSqlTableAddColumn                   (con);  break;
				case "SPSQLTABLEALTERCOLUMN"                 :  cmd = cmdSqlTableAlterColumn                 (con);  break;
				case "SPSQLTABLECOLUMNEXISTS"                :  cmd = cmdSqlTableColumnExists                (con);  break;
				case "SPSQLTABLECOLUMNSCHANGED"              :  cmd = cmdSqlTableColumnsChanged              (con);  break;
				case "SPSQLTABLEDISABLETRIGGERS"             :  cmd = cmdSqlTableDisableTriggers             (con);  break;
				case "SPSQLTABLEDROPCOLUMN"                  :  cmd = cmdSqlTableDropColumn                  (con);  break;
				case "SPSQLTABLEDROPCOLUMNCONSTRAINT"        :  cmd = cmdSqlTableDropColumnConstraint        (con);  break;
				case "SPSQLTABLEENABLETRIGGERS"              :  cmd = cmdSqlTableEnableTriggers              (con);  break;
				case "SPSQLTABLEEXISTS"                      :  cmd = cmdSqlTableExists                      (con);  break;
				case "SPSQLTABLEINDEXEXISTS"                 :  cmd = cmdSqlTableIndexExists                 (con);  break;
				case "SPSQLUPDATEINDEX"                      :  cmd = cmdSqlUpdateIndex                      (con);  break;
				case "SPSQLUPDATESYNCDTABLES"                :  cmd = cmdSqlUpdateSyncdTables                (con);  break;
				case "SPSYSTEM_CURRENCY_LOG_DELETE"          :  cmd = cmdSYSTEM_CURRENCY_LOG_Delete          (con);  break;
				case "SPSYSTEM_CURRENCY_LOG_INSERTONLY"      :  cmd = cmdSYSTEM_CURRENCY_LOG_InsertOnly      (con);  break;
				case "SPSYSTEM_EVENTS_PROCESSALL"            :  cmd = cmdSYSTEM_EVENTS_ProcessAll            (con);  break;
				case "SPSYSTEM_LOG_CLEANUP"                  :  cmd = cmdSYSTEM_LOG_Cleanup                  (con);  break;
				case "SPSYSTEM_LOG_DELETE"                   :  cmd = cmdSYSTEM_LOG_Delete                   (con);  break;
				case "SPSYSTEM_LOG_INSERTONLY"               :  cmd = cmdSYSTEM_LOG_InsertOnly               (con);  break;
				case "SPSYSTEM_LOG_MESSAGEONLY"              :  cmd = cmdSYSTEM_LOG_MessageOnly              (con);  break;
				case "SPSYSTEM_REST_TABLES_DELETE"           :  cmd = cmdSYSTEM_REST_TABLES_Delete           (con);  break;
				case "SPSYSTEM_REST_TABLES_INSERTONLY"       :  cmd = cmdSYSTEM_REST_TABLES_InsertOnly       (con);  break;
				case "SPSYSTEM_REST_TABLES_UPDATE"           :  cmd = cmdSYSTEM_REST_TABLES_Update           (con);  break;
				case "SPSYSTEM_SYNC_LOG_INSERTONLY"          :  cmd = cmdSYSTEM_SYNC_LOG_InsertOnly          (con);  break;
				case "SPSYSTEM_TRANSACTIONS_CREATE"          :  cmd = cmdSYSTEM_TRANSACTIONS_Create          (con);  break;
				case "SPTEAM_MEMBERSHIPS_DELETEUSER"         :  cmd = cmdTEAM_MEMBERSHIPS_DeleteUser         (con);  break;
				case "SPTEAM_MEMBERSHIPS_REFRESHUSER"        :  cmd = cmdTEAM_MEMBERSHIPS_RefreshUser        (con);  break;
				case "SPTEAM_MEMBERSHIPS_UPDATE"             :  cmd = cmdTEAM_MEMBERSHIPS_Update             (con);  break;
				case "SPTEAM_SETS_NORMALIZESET"              :  cmd = cmdTEAM_SETS_NormalizeSet              (con);  break;
				case "SPTEAMS_INITPRIVATE"                   :  cmd = cmdTEAMS_InitPrivate                   (con);  break;
				case "SPTEAMS_INSERTONLY"                    :  cmd = cmdTEAMS_InsertOnly                    (con);  break;
				case "SPTEAMS_INSERTPRIVATE"                 :  cmd = cmdTEAMS_InsertPrivate                 (con);  break;
				case "SPTERMINOLOGY_ALIASES_DELETE"          :  cmd = cmdTERMINOLOGY_ALIASES_Delete          (con);  break;
				case "SPTERMINOLOGY_ALIASES_INSERTONLY"      :  cmd = cmdTERMINOLOGY_ALIASES_InsertOnly      (con);  break;
				case "SPTERMINOLOGY_ALIASES_UPDATE"          :  cmd = cmdTERMINOLOGY_ALIASES_Update          (con);  break;
				case "SPTERMINOLOGY_DELETE"                  :  cmd = cmdTERMINOLOGY_Delete                  (con);  break;
				case "SPTERMINOLOGY_DELETEALL"               :  cmd = cmdTERMINOLOGY_DeleteAll               (con);  break;
				case "SPTERMINOLOGY_DELETELIST"              :  cmd = cmdTERMINOLOGY_DeleteList              (con);  break;
				case "SPTERMINOLOGY_DELETEMODULE"            :  cmd = cmdTERMINOLOGY_DeleteModule            (con);  break;
				case "SPTERMINOLOGY_DELETETERM"              :  cmd = cmdTERMINOLOGY_DeleteTerm              (con);  break;
				case "SPTERMINOLOGY_INSERTONLY"              :  cmd = cmdTERMINOLOGY_InsertOnly              (con);  break;
				case "SPTERMINOLOGY_LIST_DELETE"             :  cmd = cmdTERMINOLOGY_LIST_Delete             (con);  break;
				case "SPTERMINOLOGY_LIST_INSERT"             :  cmd = cmdTERMINOLOGY_LIST_Insert             (con);  break;
				case "SPTERMINOLOGY_LIST_MOVEDOWN"           :  cmd = cmdTERMINOLOGY_LIST_MoveDown           (con);  break;
				case "SPTERMINOLOGY_LIST_MOVEITEM"           :  cmd = cmdTERMINOLOGY_LIST_MoveItem           (con);  break;
				case "SPTERMINOLOGY_LIST_MOVEUP"             :  cmd = cmdTERMINOLOGY_LIST_MoveUp             (con);  break;
				case "SPTERMINOLOGY_LIST_REORDER"            :  cmd = cmdTERMINOLOGY_LIST_Reorder            (con);  break;
				case "SPTERMINOLOGY_LIST_REORDERALL"         :  cmd = cmdTERMINOLOGY_LIST_ReorderAll         (con);  break;
				case "SPTERMINOLOGY_MASSDELETE"              :  cmd = cmdTERMINOLOGY_MassDelete              (con);  break;
				case "SPTERMINOLOGY_UPDATE"                  :  cmd = cmdTERMINOLOGY_Update                  (con);  break;
				case "SPTIMEZONES_DELETE"                    :  cmd = cmdTIMEZONES_Delete                    (con);  break;
				case "SPTIMEZONES_INSERTONLY"                :  cmd = cmdTIMEZONES_InsertOnly                (con);  break;
				case "SPTIMEZONES_UPDATE"                    :  cmd = cmdTIMEZONES_Update                    (con);  break;
				case "SPTIMEZONES_UPDATEBYNAME"              :  cmd = cmdTIMEZONES_UpdateByName              (con);  break;
				case "SPTRACKER_DELETE"                      :  cmd = cmdTRACKER_Delete                      (con);  break;
				case "SPTRACKER_UPDATE"                      :  cmd = cmdTRACKER_Update                      (con);  break;
				case "SPUSER_PREFERENCES_CONTENT_UPDATE"     :  cmd = cmdUSER_PREFERENCES_CONTENT_Update     (con);  break;
				case "SPUSER_PREFERENCES_DELETE"             :  cmd = cmdUSER_PREFERENCES_Delete             (con);  break;
				case "SPUSER_PREFERENCES_DELETEBYUSER"       :  cmd = cmdUSER_PREFERENCES_DeleteByUser       (con);  break;
				case "SPUSER_PREFERENCES_INITPOINTER"        :  cmd = cmdUSER_PREFERENCES_InitPointer        (con);  break;
				case "SPUSER_PREFERENCES_INSERT"             :  cmd = cmdUSER_PREFERENCES_Insert             (con);  break;
				case "SPUSER_PREFERENCES_INSERTBYUSER"       :  cmd = cmdUSER_PREFERENCES_InsertByUser       (con);  break;
				case "SPUSER_PREFERENCES_READOFFSET"         :  cmd = cmdUSER_PREFERENCES_ReadOffset         (con);  break;
				case "SPUSER_PREFERENCES_WRITEOFFSET"        :  cmd = cmdUSER_PREFERENCES_WriteOffset        (con);  break;
				case "SPUSERS_ACL_ROLES_DELETE"              :  cmd = cmdUSERS_ACL_ROLES_Delete              (con);  break;
				case "SPUSERS_ACL_ROLES_MASSUPDATE"          :  cmd = cmdUSERS_ACL_ROLES_MassUpdate          (con);  break;
				case "SPUSERS_ACL_ROLES_UPDATE"              :  cmd = cmdUSERS_ACL_ROLES_Update              (con);  break;
				case "SPUSERS_DELETE"                        :  cmd = cmdUSERS_Delete                        (con);  break;
				case "SPUSERS_FEEDS_DELETE"                  :  cmd = cmdUSERS_FEEDS_Delete                  (con);  break;
				case "SPUSERS_FEEDS_UPDATE"                  :  cmd = cmdUSERS_FEEDS_Update                  (con);  break;
				case "SPUSERS_IMPORT"                        :  cmd = cmdUSERS_Import                        (con);  break;
				case "SPUSERS_INSERTNTLM"                    :  cmd = cmdUSERS_InsertNTLM                    (con);  break;
				case "SPUSERS_LAST_IMPORT_DELETE"            :  cmd = cmdUSERS_LAST_IMPORT_Delete            (con);  break;
				case "SPUSERS_LAST_IMPORT_UPDATE"            :  cmd = cmdUSERS_LAST_IMPORT_Update            (con);  break;
				case "SPUSERS_LOGINS_INSERTONLY"             :  cmd = cmdUSERS_LOGINS_InsertOnly             (con);  break;
				case "SPUSERS_LOGINS_LOGOUT"                 :  cmd = cmdUSERS_LOGINS_Logout                 (con);  break;
				case "SPUSERS_MASSDELETE"                    :  cmd = cmdUSERS_MassDelete                    (con);  break;
				case "SPUSERS_PASSWORD_HISTORY_INSERTONLY"   :  cmd = cmdUSERS_PASSWORD_HISTORY_InsertOnly   (con);  break;
				case "SPUSERS_PASSWORD_LINK_DELETE"          :  cmd = cmdUSERS_PASSWORD_LINK_Delete          (con);  break;
				case "SPUSERS_PASSWORD_LINK_INSERTONLY"      :  cmd = cmdUSERS_PASSWORD_LINK_InsertOnly      (con);  break;
				case "SPUSERS_PASSWORDUPDATE"                :  cmd = cmdUSERS_PasswordUpdate                (con);  break;
				case "SPUSERS_PREFERENCESUPDATE"             :  cmd = cmdUSERS_PreferencesUpdate             (con);  break;
				case "SPUSERS_TEAM_MEMBERSHIPS_UPDATE"       :  cmd = cmdUSERS_TEAM_MEMBERSHIPS_Update       (con);  break;
				case "SPUSERS_TIMEZONEUPDATE"                :  cmd = cmdUSERS_TimeZoneUpdate                (con);  break;
				case "SPUSERS_UNDELETE"                      :  cmd = cmdUSERS_Undelete                      (con);  break;
				case "SPUSERS_UPDATE"                        :  cmd = cmdUSERS_Update                        (con);  break;
				case "SPUSERS_UPDATEPRIMARYROLE"             :  cmd = cmdUSERS_UpdatePrimaryRole             (con);  break;
				case "SPUSERS_UPDATESTATUS"                  :  cmd = cmdUSERS_UpdateStatus                  (con);  break;
				case "SPUSERS_WIZARDUPDATE"                  :  cmd = cmdUSERS_WizardUpdate                  (con);  break;
				case "SPVERSIONS_DELETE"                     :  cmd = cmdVERSIONS_Delete                     (con);  break;
				case "SPVERSIONS_UPDATE"                     :  cmd = cmdVERSIONS_Update                     (con);  break;
				case "SPWORKFLOW_EVENTS_DELETE"              :  cmd = cmdWORKFLOW_EVENTS_Delete              (con);  break;
				case "SPWORKFLOW_EVENTS_PROCESSALL"          :  cmd = cmdWORKFLOW_EVENTS_ProcessAll          (con);  break;
				case "SPPROCESSES_CHANGEASSIGNEDUSER"        :  cmd = cmdPROCESSES_ChangeAssignedUser        (con);  break;
				case "SPPROCESSES_CHANGEPROCESSUSER"         :  cmd = cmdPROCESSES_ChangeProcessUser         (con);  break;
				case "SPPROCESSES_ENDEVENTGATEWAY"           :  cmd = cmdPROCESSES_EndEventGateway           (con);  break;
				case "SPPROCESSES_HISTORY_DELETE"            :  cmd = cmdPROCESSES_HISTORY_Delete            (con);  break;
				case "SPPROCESSES_HISTORY_INSERTONLY"        :  cmd = cmdPROCESSES_HISTORY_InsertOnly        (con);  break;
				case "SPPROCESSES_INSERTONLY"                :  cmd = cmdPROCESSES_InsertOnly                (con);  break;
				case "SPPROCESSES_NOTES_DELETE"              :  cmd = cmdPROCESSES_NOTES_Delete              (con);  break;
				case "SPPROCESSES_NOTES_INSERTONLY"          :  cmd = cmdPROCESSES_NOTES_InsertOnly          (con);  break;
				case "SPPROCESSES_OPTOUT_INSERTONLY"         :  cmd = cmdPROCESSES_OPTOUT_InsertOnly         (con);  break;
				case "SPPROCESSES_OPTOUT_UPDATE"             :  cmd = cmdPROCESSES_OPTOUT_Update             (con);  break;
				case "SPPROCESSES_UPDATEAPPROVAL"            :  cmd = cmdPROCESSES_UpdateApproval            (con);  break;
				case "SPPROCESSES_UPDATESTATUS"              :  cmd = cmdPROCESSES_UpdateStatus              (con);  break;
				// 11/26/2021 Paul.  In order to support dynamically created modules in the React client, we need to load the procedures dynamically. 
				default:  cmd = this.DynamicFactory(con, sProcedureName);  break;
			}
			// 11/11/2008 Paul.  PostgreSQL has issues treating integers as booleans and booleans as integers. 
			if ( Sql.IsPostgreSQL(cmd) )
			{
				foreach ( IDbDataParameter par in cmd.Parameters )
				{
					if ( par.DbType == DbType.Boolean )
						par.DbType = DbType.Int32;
				}
			}
			return cmd;
		}
		#endregion

	}
}
